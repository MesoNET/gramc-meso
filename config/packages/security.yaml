security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    password_hashers:
      App\Entity\Individu: plaintext
      App\Entity\Serveur: 'auto'
      Symfony\Component\Security\Core\User\InMemoryUser: bcrypt
    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    # Pour générer le mot de passe hashé en bcrypt:
    #
    # php -r "echo password_hash('ThePassword', PASSWORD_BCRYPT, ['cost' => 13]) . PHP_EOL;"
    providers:
        in_memory:
            memory:
                users:
                    apiuft:
                       password: '%env(PASSWORD_APIUFT)%'
                       roles: 'ROLE_ADMIN'
                    apicriann:
                       password: '%env(PASSWORD_APICRIANN)%'
                       roles: 'ROLE_ADMIN'
                    apijuliet:
                       password: '%env(PASSWORD_APIJULIET)%'
                       roles: 'ROLE_ADMIN'
                    apizen:
                       password: '%env(PASSWORD_APIZEN)%'
                       roles: 'ROLE_ADMIN'
        api:
            entity:
                class: App\Entity\Serveur
                property: admname
        gramc_provider:
            entity:
                class: App\Entity\Individu
                property: id
    
    # User: pas de hasher car pas de password on utilise saml ou openid pour se connecter
    # InMemoryUser: les mots de passe sont hashés - cf .env.dist
    # cf. https://symfony.com/doc/5.4/security.html

    
    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
            # activate different ways to authenticate

            # http_basic: ~
            # http://symfony.com/doc/current/book/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: ~
            # http://symfony.com/doc/current/cookbook/security/form_login_setup.html
            
        calc:
            pattern:   ^/adminux
            http_basic:
                  provider: in_memory

        api:
            pattern:   ^/api
            http_basic:
              provider: api

        main:
            lazy: true
            pattern:    ^/
            entry_point: App\Security\AuthenticationEntryPoint
            access_denied_handler: App\Security\AccessDeniedHandler
            custom_authenticators:
               - App\Security\GramcAuthenticator
            provider: gramc_provider

            context: global_security_context

            # https://symfony.com/doc/current/security/impersonating_user.html
            switch_user:
                 provider: gramc_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            #logout:
            #   path: deconnexion

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api, roles: ROLE_API}
        # - { path: ^/gramc3/login, roles: PUBLIC_ACCESS}
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
