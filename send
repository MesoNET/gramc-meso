src/Command/Brouillage.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Command/Brouillage.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Command/Brouillage.php: * goulbi-goulba incompréhensible.
src/Command/Brouillage.php: * Chaque lettre a-z ou A-Z est remplacée par une lettre choisie au hasard
src/Command/Brouillage.php: * Chaque chiffre 0-9 est remplacé par un chiffre choisi au hasard
src/Command/Brouillage.php: *      - prj_titre
src/Command/Brouillage.php: *      - prj_sous_thematique
src/Command/Brouillage.php: *      - prj_financement
src/Command/Brouillage.php: *      - prj_resume
src/Command/Brouillage.php: *      - prj_expose
src/Command/Brouillage.php: *      - prj_justif_renouv
src/Command/Brouillage.php: *      - prj_algorithme
src/Command/Brouillage.php: *      - prj_genci_dari
src/Command/Brouillage.php: *      - code_nom
src/Command/Brouillage.php: *      - code_licence
src/Command/Brouillage.php: *      - sond_justif_donn_perm
src/Command/Brouillage.php: *      - dem_form_autres_autres
src/Command/Brouillage.php: *      - nom
src/Command/Brouillage.php: *      - prenom
src/Command/Brouillage.php: *      - mail
src/Command/Brouillage.php:        $this->sd = $sd;
src/Command/Brouillage.php:        $this->sp = $sp;
src/Command/Brouillage.php:        $this->sv = $sv;
src/Command/Brouillage.php:        $this->sj = $sj;
src/Command/Brouillage.php:        $this->em = $em;
src/Command/Brouillage.php:        $this->minuscules = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];
src/Command/Brouillage.php:        $this->majuscules = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'x', 'Y', 'Z'];
src/Command/Brouillage.php:        $this->chiffres = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
src/Command/Brouillage.php:        $this->setDescription('Brouiller tout ce qui pourrait ressembler à des données personnelles');
src/Command/Brouillage.php:        $this->setHelp('');
src/Command/Brouillage.php:                shuffle($this->minuscules);
src/Command/Brouillage.php:                $c = $this->minuscules[0];
src/Command/Brouillage.php:                shuffle($this->majuscules);
src/Command/Brouillage.php:                $c = $this->majuscules[0];
src/Command/Brouillage.php:                shuffle($this->chiffres);
src/Command/Brouillage.php:                $c = $this->chiffres[0];
src/Command/Brouillage.php:        if (false == $this->debug) {
src/Command/Brouillage.php:            $output->writeln("OUPS - VOUS N'ETES PAS EN MODE DEBUG !");
src/Command/Brouillage.php:            $output->writeln('EXECUTION DE LA COMMANDE: brouillage');
src/Command/Brouillage.php:            $this->sj->infoMessage('EXECUTION DE LA COMMANDE: brouillage');
src/Command/Brouillage.php:        $sd = $this->sd;
src/Command/Brouillage.php:        $sp = $this->sp;
src/Command/Brouillage.php:        $sj = $this->sj;
src/Command/Brouillage.php:        $em = $this->em;
src/Command/Brouillage.php:        // dd($this->brouilleString("é~#è£\$azerty toto"));
src/Command/Brouillage.php:        $projets = $em->getRepository(Projet::class)->findAll();
src/Command/Brouillage.php:            $output->writeln("Projet: $p");
src/Command/Brouillage.php:            $output->writeln('=========');
src/Command/Brouillage.php:            foreach ($p->getVersion() as $v) {
src/Command/Brouillage.php:                $output->writeln("Version: $v");
src/Command/Brouillage.php:                $output->writeln('=========');
src/Command/Brouillage.php:                $v->setPrjTitre($this->brouilleString($v->getPrjTitre()));
src/Command/Brouillage.php:                $v->setPrjSousThematique($this->brouilleString($v->getPrjSousThematique()));
src/Command/Brouillage.php:                $v->setPrjFinancement($this->brouilleString($v->getPrjFinancement()));
src/Command/Brouillage.php:                $v->setPrjResume($this->brouilleString($v->getPrjResume()));
src/Command/Brouillage.php:                $v->setPrjExpose($this->brouilleString($v->getPrjExpose()));
src/Command/Brouillage.php:                $v->setPrjJustifRenouv($this->brouilleString($v->getPrjJustifRenouv()));
src/Command/Brouillage.php:                $v->setPrjAlgorithme($this->brouilleString($v->getPrjAlgorithme()));
src/Command/Brouillage.php:                $v->setPrjGenciDari($this->brouilleString($v->getPrjGenciDari()));
src/Command/Brouillage.php:                $v->setCodeNom($this->brouilleString($v->getCodeNom()));
src/Command/Brouillage.php:                $v->setCodeLicence($this->brouilleString($v->getCodeLicence()));
src/Command/Brouillage.php:                $v->setSondJustifDonnPerm($this->brouilleString($v->getSondJustifDonnPerm()));
src/Command/Brouillage.php:                $v->setDemFormAutresAutres($this->brouilleString($v->getDemFormAutresAutres()));
src/Command/Brouillage.php:                $em->persist($v);
src/Command/Brouillage.php:                $em->flush();
src/Command/Brouillage.php:        $individus = $em->getRepository(Individu::class)->findAll();
src/Command/Brouillage.php:            if ($i->getAdmin()) {
src/Command/Brouillage.php:            if ($i->getObs()) {
src/Command/Brouillage.php:            if ($i->getPresident()) {
src/Command/Brouillage.php:            $i->setNom($this->brouilleString($i->getNom()));
src/Command/Brouillage.php:            $i->setPrenom($this->brouilleString($i->getPrenom()));
src/Command/Brouillage.php:            $i->setMail($this->brouilleString($i->getMail()));
src/Command/Brouillage.php:            $em->persist($v);
src/Command/Brouillage.php:            $em->flush();
src/Command/Brouillage.php:        $em = $this->em;
src/Command/Brouillage.php:        $repo = $em->getRepository(Compta::class);
src/Command/Brouillage.php:        return $repo->removeDate($j);
src/Command/CronCmd.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Command/CronCmd.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Command/CronCmd.php:        $this->setDescription('Exécution des tâches de maintenance');
src/Command/CronCmd.php:        $this->setHelp('Voir src/GramcServices/Cron pour les détails');
src/Command/CronCmd.php:        $sc = $this->sc;
src/Command/CronCmd.php:        $sc->execute();
src/Command/ImporterLaboCommand.php:            $output->writeln($currentIndex.' laboratoires scannés');
src/Command/ImporterLaboCommand.php:            $response = $this->HTTPClient->request(
src/Command/ImporterLaboCommand.php:            if (!Response::HTTP_OK == $response->getStatusCode()) {
src/Command/ImporterLaboCommand.php:                $output->writeln('erreur');
src/Command/ImporterLaboCommand.php:                $output->writeln($response->getContent());
src/Command/ImporterLaboCommand.php:            $results = $response->toArray()['results'];
src/Command/ImporterLaboCommand.php:                if (null != $libelle && !$this->entityManager->getRepository(Laboratoire::class)->findBy([
src/Command/ImporterLaboCommand.php:                        ->setNomLabo($libelle)
src/Command/ImporterLaboCommand.php:                        ->setAcroLabo($ligne['sigle'])
src/Command/ImporterLaboCommand.php:                        ->setNumeroLabo($currentIndex + $i);
src/Command/ImporterLaboCommand.php:                    $this->entityManager->persist($lab);
src/Command/ImporterLaboCommand.php:                    $output->writeln('Ajout du laboratoire '.$libelle);
src/Command/ImporterLaboCommand.php:        $this->entityManager->flush();
src/Command/KeepOnly.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Command/KeepOnly.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Command/KeepOnly.php: * sauf quelques-uns
src/Command/KeepOnly.php:        $this->setDescription('KeepOnly: Vide presque complètement la base de données: ne garde que quelques projets, et les utilisateurs associés');
src/Command/KeepOnly.php:        $this->setHelp('Vidage massif de la base de données');
src/Command/KeepOnly.php:        $this->addArgument('keeponly', InputArgument::REQUIRED, 'Projets à conserver: P123456,P234567');
src/Command/KeepOnly.php:        if (false == $this->debug) {
src/Command/KeepOnly.php:            $output->writeln("OUPS - VOUS N'ETES PAS EN MODE DEBUG !");
src/Command/KeepOnly.php:            $output->writeln('EXECUTION DE LA COMMANDE: keeponly');
src/Command/KeepOnly.php:            $this->sj->infoMessage('EXECUTION DE LA COMMANDE: keeponly');
src/Command/KeepOnly.php:        $sd = $this->sd;
src/Command/KeepOnly.php:        $sp = $this->sp;
src/Command/KeepOnly.php:        $sj = $this->sj;
src/Command/KeepOnly.php:        $em = $this->em;
src/Command/KeepOnly.php:        $kept = $input->getArgument('keeponly');
src/Command/KeepOnly.php:        $anneeCourante = $sd->showYear();
src/Command/KeepOnly.php:        $output->writeln('');
src/Command/KeepOnly.php:        $output->writeln('======================================================');
src/Command/KeepOnly.php:        $output->writeln("Tous les projets seront supprimés... sauf $kept");
src/Command/KeepOnly.php:        $output->writeln('======================================================');
src/Command/KeepOnly.php:        $allProjets = $em->getRepository(Projet::class)->findAll();
src/Command/KeepOnly.php:        $projets_annee = $this->buildProjetsByYear($anneeLimite, $allProjets, $a_kept);
src/Command/KeepOnly.php:            $output->writeln('');
src/Command/KeepOnly.php:            $output->writeln("PROJETS TERMINES EN $a");
src/Command/KeepOnly.php:                $output->writeln("PROJET $p");
src/Command/KeepOnly.php:        $loginnames = $this->buildUsersList($projets_annee);
src/Command/KeepOnly.php:        $output->writeln('');
src/Command/KeepOnly.php:        $output->writeln('=============================================================================================================');
src/Command/KeepOnly.php:        $output->writeln('Les enregistrements de compta des groupes ou utilisateurs suivants seront supprimés (loginname - date limite)');
src/Command/KeepOnly.php:        $output->writeln('=============================================================================================================');
src/Command/KeepOnly.php:            $output->writeln($l);
src/Command/KeepOnly.php:        $output->writeln('==========');
src/Command/KeepOnly.php:            $output->writeln('ANNULATION');
src/Command/KeepOnly.php:        $sj->infoMessage("EXECUTION DE LA COMMANDE: keeponly $kept");
src/Command/KeepOnly.php:        $this->effacerCompta($output, $loginnames);
src/Command/KeepOnly.php:        $this->effacerProjets($output, $projets_annee);
src/Command/KeepOnly.php:        $individus_effaces = $sp->effacer_utilisateurs();
src/Command/KeepOnly.php:        $output->writeln('');
src/Command/KeepOnly.php:        $output->writeln('=================');
src/Command/KeepOnly.php:        $output->writeln('INDIVIDUS EFFACES');
src/Command/KeepOnly.php:        $output->writeln('=================');
src/Command/KeepOnly.php:            $output->writeln("$i ".$i->getIdIndividu().' '.$i->getMail());
src/Command/KeepOnly.php:        $output->writeln('bye');
src/Command/Rgpd.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Command/Rgpd.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Command/Rgpd.php: * NOTES - On ne supprime pas les fichiers de rapports d'activité, qui sont considérés comme des articles
src/Command/Rgpd.php:        $this->setDescription('Nettoyer pour conformité au RGPD: suppression des vieux projets et des utilisateurs etc. associés');
src/Command/Rgpd.php:        $this->setHelp('Envoyer un mail pour tester le système de mail');
src/Command/Rgpd.php:        $this->addArgument('years', InputArgument::REQUIRED, "Nombre d'années à conserver");
src/Command/Rgpd.php:        $sp = $this->sp;
src/Command/Rgpd.php:        $em = $this->em;
src/Command/Rgpd.php:        foreach ($projet->getVersion() as $version) {
src/Command/Rgpd.php:            $output->writeln("                VERSION $version");
src/Command/Rgpd.php:            $sp->supprimerVersion($version);
src/Command/Rgpd.php:        $em = $this->em;
src/Command/Rgpd.php:        $sj = $this->sj;
src/Command/Rgpd.php:            $output->writeln("    ANNEE $a");
src/Command/Rgpd.php:                $output->writeln("        PROJET $projet");
src/Command/Rgpd.php:                $projet->setVersionActive(null);
src/Command/Rgpd.php:                $this->effacerVersions($projet, $output);
src/Command/Rgpd.php:                $sj->infoMessage('Le projet '.$projet.' a été effacé ');
src/Command/Rgpd.php:                $em->remove($projet);
src/Command/Rgpd.php:                $em->flush();
src/Command/Rgpd.php:                $output->writeln('                Projet supprimé');
src/Command/Rgpd.php:        // $projets_annee[2015] -> un array contenant la liste des projets arrêtés depuis 2015
src/Command/Rgpd.php:            if (in_array($projet->getIdProjet(), $toSkip)) {
src/Command/Rgpd.php:            $derniereVersion = $projet->derniereVersion();
src/Command/Rgpd.php:            // Projet merdique - On le met de côté
src/Command/Rgpd.php:                $mauvais_projets[$projet->getIdProjet()] = $projet;
src/Command/Rgpd.php:                $date_fin = $projet->derniereVersion()->getEndDate();
src/Command/Rgpd.php:                $annee = $date_fin->format('Y');
src/Command/Rgpd.php:    // retour: Le tableau des utilisateurs, sous la forme loginname-2015
src/Command/Rgpd.php:                // $output->writeln("coucou " . $p->getIdProjet());
src/Command/Rgpd.php:                foreach ($p->getVersion() as $v) {
src/Command/Rgpd.php:                    foreach ($v->getCollaborateurVersion() as $cv) {
src/Command/Rgpd.php:                        $individu = $cv->getCollaborateur();
src/Command/Rgpd.php:                        foreach ($individu->getUser() as $u) {
src/Command/Rgpd.php:                            if ($u->getLogin()) {
src/Command/Rgpd.php:                                if (null !== $u->getLoginname()) {
src/Command/Rgpd.php:                                    $loginnames[$u->getLoginname().'-'.$a] = 1;
src/Command/Rgpd.php:        // $sn   = $this->sn;
src/Command/Rgpd.php:        $sd = $this->sd;
src/Command/Rgpd.php:        $sp = $this->sp;
src/Command/Rgpd.php:        $sj = $this->sj;
src/Command/Rgpd.php:        $em = $this->em;
src/Command/Rgpd.php:        $years = $input->getArgument('years');
src/Command/Rgpd.php:        $anneeCourante = $sd->showYear();
src/Command/Rgpd.php:        $anneeLimite = intval($anneeCourante) - intval($years);
src/Command/Rgpd.php:        $output->writeln('');
src/Command/Rgpd.php:        $output->writeln('======================================================');
src/Command/Rgpd.php:        $output->writeln("Les projets terminés en $anneeLimite ou avant seront supprimés");
src/Command/Rgpd.php:        $output->writeln('======================================================');
src/Command/Rgpd.php:            $output->writeln('ERREUR - vous devez rester au 21ème siècle !');
src/Command/Rgpd.php:        $allProjets = $em->getRepository(Projet::class)->findAll();
src/Command/Rgpd.php:        $projets_annee = $this->buildProjetsByYear($anneeLimite, $allProjets);
src/Command/Rgpd.php:            $output->writeln('');
src/Command/Rgpd.php:            $output->writeln("PROJETS TERMINES EN $a");
src/Command/Rgpd.php:                $output->writeln("PROJET $p");
src/Command/Rgpd.php:        $loginnames = $this->buildUsersList($projets_annee);
src/Command/Rgpd.php:        $output->writeln('');
src/Command/Rgpd.php:        $output->writeln('=============================================================================================================');
src/Command/Rgpd.php:        $output->writeln('Les utilisateurs suivants seront supprimés (loginname - date limite)');
src/Command/Rgpd.php:        $output->writeln('=============================================================================================================');
src/Command/Rgpd.php:            $output->writeln($l);
src/Command/Rgpd.php:        $output->writeln('==========');
src/Command/Rgpd.php:            $output->writeln('ANNULATION');
src/Command/Rgpd.php:        $sj->infoMessage("EXECUTION DE LA COMMANDE: rgpd $years");
src/Command/Rgpd.php:        $this->effacerProjets($output, $projets_annee);
src/Command/Rgpd.php:        $individus_effaces = $sp->effacer_utilisateurs();
src/Command/Rgpd.php:        $output->writeln('');
src/Command/Rgpd.php:        $output->writeln('=================');
src/Command/Rgpd.php:        $output->writeln('INDIVIDUS EFFACES');
src/Command/Rgpd.php:        $output->writeln('=================');
src/Command/Rgpd.php:            $output->writeln("$i ".$i->getIdIndividu().' '.$i->getMail());
src/Command/Rgpd.php:        $output->writeln('bye');
src/Command/Sendamail.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Command/Sendamail.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Command/Sendamail.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Command/Sendamail.php:#[AsCommand(name: 'app:send-a-mail', )]
src/Command/Sendamail.php:        $this->env = $env;
src/Command/Sendamail.php:        $this->sn = $sn;
src/Command/Sendamail.php:        $this->twig = $twig;
src/Command/Sendamail.php:        $this->setDescription('Envoyer un mail');
src/Command/Sendamail.php:        $this->setHelp('Envoyer un mail pour tester le système de mail');
src/Command/Sendamail.php:        $this->addArgument('dest', InputArgument::REQUIRED, 'Adresse destinataire');
src/Command/Sendamail.php:        $sn = $this->sn;
src/Command/Sendamail.php:        $twig = $this->twig;
src/Command/Sendamail.php:        $env = $this->env;
src/Command/Sendamail.php:        $address = $input->getArgument('dest');
src/Command/Sendamail.php:        $twig_sujet = $twig->createTemplate("Essai d'envoi de mails par gramc3");
src/Command/Sendamail.php:        $twig_contenu = $twig->createTemplate('Bonjour '.$address."\nPour essayer le système de mail en environnement ".$env."\nGramc\n");
src/Command/Sendamail.php:        $sn->sendMessage($twig_sujet, $twig_contenu, [], [$address]);
src/Command/Sendamail.php:        $output->writeln('mail envoyé à '.$address);
src/Controller/AdminuxController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/AdminuxController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/AdminuxController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/AdminuxController.php:    // exemple: curl --netrc -X POST -d '{ "projet": "M12345", "ressource": "TURPAN", "conso": "10345" }'https://.../adminux/projet/setconso
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $sroc = $this->sroc;
src/Controller/AdminuxController.php:        $su = $this->su;
src/Controller/AdminuxController.php:        $content = json_decode($request->getContent(), true);
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de données');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de projet');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de ressource');
src/Controller/AdminuxController.php:            $sj->errorMessage('AdminUxController::setconsoAction - Pas de conso');
src/Controller/AdminuxController.php:        // Donc on balaie toutes les ressources... qui ne devraient pas être super-nombreuses non plus
src/Controller/AdminuxController.php:        $ressources = $sroc->getRessources();
src/Controller/AdminuxController.php:            if ($sroc->getnomComplet($r) === $nomRessource) {
src/Controller/AdminuxController.php:            $serveur = $ressource->getServeur();
src/Controller/AdminuxController.php:        if (null != $serveur && !$this->checkUser($serveur)) {
src/Controller/AdminuxController.php:        $projet = $em->getRepository(Projet::class)->find($idProjet);
src/Controller/AdminuxController.php:            $version = $projet->getVersionActive();
src/Controller/AdminuxController.php:                $sj->errorMessage(__METHOD__.':'.__FILE__." - Pas de version active pour $projet");
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - '.print_r($error, true));
src/Controller/AdminuxController.php:        // C'est OK - On positionne la conso
src/Controller/AdminuxController.php:        $dacs = $version->getdac();
src/Controller/AdminuxController.php:            if ($d->getRessource() === $ressource) {
src/Controller/AdminuxController.php:                $d->setConsommation(intval($conso));
src/Controller/AdminuxController.php:                $em->flush();
src/Controller/AdminuxController.php:        $sj->infoMessage(__METHOD__."conso ajustée pour $projet");
src/Controller/AdminuxController.php:    // exemple: curl --netrc -X POST -d '{ "loginname": "toto@TURPAN", "idIndividu": "6543", "projet": "P1234" }'https://.../adminux/utilisateurs/setloginname
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $su = $this->su;
src/Controller/AdminuxController.php:        $content = json_decode($request->getContent(), true);
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de données');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de nom de login');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de projet');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de idIndividu');
src/Controller/AdminuxController.php:        $projet = $em->getRepository(Projet::class)->find($idProjet);
src/Controller/AdminuxController.php:        $individu = $em->getRepository(Individu::class)->find($idIndividu);
src/Controller/AdminuxController.php:        $loginname_p = $su->parseLoginname($loginname);
src/Controller/AdminuxController.php:        $serveur = $em->getRepository(Serveur::class)->findOneBy(['nom' => $loginname_p['serveur']]);
src/Controller/AdminuxController.php:        if (null != $serveur && !$this->checkUser($serveur)) {
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - '.print_r($error, true));
src/Controller/AdminuxController.php:        $u = $su->getUser($individu, $projet, $serveur);
src/Controller/AdminuxController.php:        if (false === $u->getLogin()) {
src/Controller/AdminuxController.php:            $sj->warningMessage(__METHOD__.':'.__FILE__." - $msg");
src/Controller/AdminuxController.php:        if ('nologin' != $u->getLoginname() && null != $u->getLoginname()) {
src/Controller/AdminuxController.php:            $sj->warningMessage(__METHOD__.':'.__FILE__." - $msg ");
src/Controller/AdminuxController.php:        $u->setLoginname($loginname_p['loginname']);
src/Controller/AdminuxController.php:        $em->persist($u);
src/Controller/AdminuxController.php:            $em->flush();
src/Controller/AdminuxController.php:            // $sj -> warningMessage("__METHOD__ . ':' . __FILE__ .  $e");
src/Controller/AdminuxController.php:            return new Response(json_encode(['KO - Erreur de base de données (nom de login dupliqué ?)']));
src/Controller/AdminuxController.php:        $sj->infoMessage(__METHOD__."user $u modifié");
src/Controller/AdminuxController.php:    // curl --netrc -H "Content-Type: application/json" -X POST -d '{ "loginname": "bob@serveur", "password": "azerty", "cpassword": "qwerty" }' https://.../adminux/utilisateurs/setpassword
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $content = json_decode($request->getContent(), true);
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de données');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de nom de login');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de mot de passe');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de version cryptée du mot de passe');
src/Controller/AdminuxController.php:        $pwd_duree = $this->getParameter('pwd_duree');  // Le nombre de jours avant expiration du mot de passe
src/Controller/AdminuxController.php:        $grdt = $this->grdt;
src/Controller/AdminuxController.php:        $passexpir = $grdt->getNew()->add(new \DateInterval($pwd_duree));
src/Controller/AdminuxController.php:        if (!$this->checkUser($loginname)) {
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - '.$msg);
src/Controller/AdminuxController.php:            $cv = $em->getRepository(User::class)->existsLoginname($loginname);
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - '.$msg);
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__." - No user '$loginname' found in any projet");
src/Controller/AdminuxController.php:            $user = $em->getRepository(User::class)->findOneBy(['loginname' => $loginname]);
src/Controller/AdminuxController.php:                $user->setLoginname($loginname);
src/Controller/AdminuxController.php:                $user->setExpire(false);
src/Controller/AdminuxController.php:            $user->setPassword($password);
src/Controller/AdminuxController.php:            $user->setPassexpir($passexpir);
src/Controller/AdminuxController.php:            $user->setCpassword($cpassword);
src/Controller/AdminuxController.php:            // TODO - A creuser
src/Controller/AdminuxController.php:            $em->persist($user);
src/Controller/AdminuxController.php:            $em->flush($user);
src/Controller/AdminuxController.php:            $sj->infoMessage(__METHOD__."Mot de passe de $loginname modifié");
src/Controller/AdminuxController.php:    // curl --netrc -H "Content-Type: application/json" -X POST -d '{ "loginname": "toto" }' https://.../adminux/users/clearpassword
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $content = json_decode($request->getContent(), true);
src/Controller/AdminuxController.php:            $sj->errorMessage("__METHOD__ . ':' . __FILE__ .  - Pas de données");
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de nom de login');
src/Controller/AdminuxController.php:        if (!$this->checkUser($loginname)) {
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - '.$msg);
src/Controller/AdminuxController.php:            $cv = $em->getRepository(User::class)->existsLoginname($loginname);
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - '.$msg);
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__." - No user '$loginname' found in any projet");
src/Controller/AdminuxController.php:            $user = $em->getRepository(User::class)->findOneBy(['loginname' => $loginname]);
src/Controller/AdminuxController.php:                $sj->errorMessage(__METHOD__.':'.__FILE__." - No password stored for '$loginname");
src/Controller/AdminuxController.php:            $em->remove($user);
src/Controller/AdminuxController.php:            $em->flush();
src/Controller/AdminuxController.php:        $sj->infoMessage(__METHOD__."Mot de passe de $loginname effacé");
src/Controller/AdminuxController.php:    // curl --netrc -H "Content-Type: application/json" -X POST -d '{ "loginname": "toto@SERVEUR", "projet":"P1234" }' https://.../adminux/utilisateurs/clearloginname
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $token = $this->tok->getToken();
src/Controller/AdminuxController.php:        $content = json_decode($request->getContent(), true);
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de données');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de nom de login');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de projet');
src/Controller/AdminuxController.php:        if (!$this->checkUser($loginname)) {
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - '.$msg);
src/Controller/AdminuxController.php:        $user = $em->getRepository(User::class)->findOneByLoginname($loginname);
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__." - No user '$loginname' found in any active version");
src/Controller/AdminuxController.php:            $user->setLoginname(null);
src/Controller/AdminuxController.php:            $em->persist($user);
src/Controller/AdminuxController.php:            $em->flush();
src/Controller/AdminuxController.php:        $sj->infoMessage(__METHOD__."Compte $loginname supprimé");
src/Controller/AdminuxController.php:        $sp = $this->sp;
src/Controller/AdminuxController.php:        $sroc = $this->sroc;
src/Controller/AdminuxController.php:        $sdac = $this->sdac;
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $r['idProjet'] = $v->getProjet()->getIdProjet();
src/Controller/AdminuxController.php:        $r['idVersion'] = $v->getIdVersion();
src/Controller/AdminuxController.php:        $r['etatVersion'] = $v->getEtatVersion();
src/Controller/AdminuxController.php:        $r['etatProjet'] = $v->getProjet()->getEtatProjet();
src/Controller/AdminuxController.php:        if (null === $v->getStartDate()) {
src/Controller/AdminuxController.php:            $r['startDate'] = $v->getStartDate()->format('Y-m-d');
src/Controller/AdminuxController.php:        if (null === $v->getEndDate()) {
src/Controller/AdminuxController.php:            $r['endDate'] = $v->getEndDate()->format('Y-m-d');
src/Controller/AdminuxController.php:        if (null === $v->getLimitDate()) {
src/Controller/AdminuxController.php:            $r['limitDate'] = $v->getLimitDate()->format('Y-m-d');
src/Controller/AdminuxController.php:        $resp = $v->getResponsable();
src/Controller/AdminuxController.php:        $r['mail'] = null === $resp ? null : $resp->getMail();
src/Controller/AdminuxController.php:            $r['titre'] = $v->getPrjTitre();
src/Controller/AdminuxController.php:            $r['expose'] = $v->getPrjExpose();
src/Controller/AdminuxController.php:            $r['labo'] = $v->getPrjLLabo();
src/Controller/AdminuxController.php:            $r['idLabo'] = $resp->getLabo()->getId();
src/Controller/AdminuxController.php:            if (null != $v->getPrjThematique()) {
src/Controller/AdminuxController.php:                $r['thematique'] = $v->getPrjThematique()->getLibelleThematique();
src/Controller/AdminuxController.php:                $r['idthematique'] = $v->getPrjThematique()->getIdThematique();
src/Controller/AdminuxController.php:        foreach ($v->getDac() as $dac) {
src/Controller/AdminuxController.php:            $d['attribution'] = $sdac->getAttributionConsolidee($dac);
src/Controller/AdminuxController.php:            $d['demande'] = $sdac->getDemandeConsolidee($dac);
src/Controller/AdminuxController.php:            $d['consommation'] = $dac->getConsommation();
src/Controller/AdminuxController.php:            $ressources[$sroc->getNomComplet($dac->getRessource())] = $d;
src/Controller/AdminuxController.php:     *             '{ "projet" : null     }' -> Tous les projets non terminés
src/Controller/AdminuxController.php:     *             '{ "projet" : "P01234" }' -> Le projet P01234
src/Controller/AdminuxController.php:     *     - typeProjet
src/Controller/AdminuxController.php:     *     - etatProjet
src/Controller/AdminuxController.php:     *     - metaEtat
src/Controller/AdminuxController.php:     *     - nepasterminer (True/False)
src/Controller/AdminuxController.php:     *     - versionActive   -> On renvoie les mêmes données que getVersion
src/Controller/AdminuxController.php:     *     - versionDerniere -> On renvoie les mêmes données que getVersion
src/Controller/AdminuxController.php:    // curl --netrc -H "Content-Type: application/json" -X POST -d '{ "projet": "P1234" }' https://.../adminux/projets/get
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $sp = $this->sp;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $grdt = $this->grdt;
src/Controller/AdminuxController.php:        $rep = $em->getRepository(Projet::class);
src/Controller/AdminuxController.php:        $content = json_decode($request->getContent(), true);
src/Controller/AdminuxController.php:            $projets = $rep->findNonTermines(true);
src/Controller/AdminuxController.php:            $p = $rep->findOneBy(['idProjet' => $id_projet]);
src/Controller/AdminuxController.php:            $data['idProjet'] = $p->getIdProjet();
src/Controller/AdminuxController.php:            $data['etatProjet'] = $p->getEtat();
src/Controller/AdminuxController.php:            $data['metaEtat'] = $sp->getMetaEtat($p);
src/Controller/AdminuxController.php:            $data['typeProjet'] = $p->getTypeProjet();
src/Controller/AdminuxController.php:            // $data['consoTurpan'] = $sp->getConsoRessource($p,'gpu@TURPAN',$grdt);
src/Controller/AdminuxController.php:            // $data['consoBoreale'] = $sp->getConsoRessource($p,'cpu@BOREALE',$grdt);
src/Controller/AdminuxController.php:            $va = (null != $p->getVersionActive()) ? $p->getVersionActive() : null;
src/Controller/AdminuxController.php:            $vb = (null != $p->getVersionDerniere()) ? $p->getVersionDerniere() : null;
src/Controller/AdminuxController.php:                    $v_data[$k] = $this->__getVersionInfo($v, $long);
src/Controller/AdminuxController.php:        $sj->infoMessage(__METHOD__.' OK');
src/Controller/AdminuxController.php:     *             '{ "projet" : null,     "session" : null }' -> Toutes les VERSIONS ACTIVES
src/Controller/AdminuxController.php:     *             '{ "projet" : "P01234", "session" : null }' -> LA VERSION ACTIVE du projet P01234
src/Controller/AdminuxController.php:     *             '{ "projet" : null,     "session" : "20A"}' -> Toutes les versions de la session 20A
src/Controller/AdminuxController.php:     *             '{ "projet" : "P01234", "session" : "20A"}' -> La version 20AP01234
src/Controller/AdminuxController.php:     *             '{ "version" : "01M22022" }' -> La version 01M22022
src/Controller/AdminuxController.php:     * Version "longue" - Le paramètre "long" provoque l'envoi de données supplémentaires concernant la ou les versions:
src/Controller/AdminuxController.php:     * -----------------------------------------------------------------------------------------------------------------
src/Controller/AdminuxController.php:     *             '{ "projet" : "P01234", "session" : null, "long: true" }' -> LA VERSION ACTIVE du projet P01234
src/Controller/AdminuxController.php:     * curl --netrc -H "Content-Type: application/json" -X POST  -d '{ "projet" : "P1234" }' https://.../adminux/version/get
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $sp = $this->sp;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $content = json_decode($request->getContent(), true);
src/Controller/AdminuxController.php:            $version = $em->getRepository(Version::class)->find($id_version);
src/Controller/AdminuxController.php:            $v_tmp = $em->getRepository(Version::class)->findAll();
src/Controller/AdminuxController.php:            $projet = $em->getRepository(Projet::class)->find($id_projet);
src/Controller/AdminuxController.php:                $v_tmp[] = $projet->getVersionActive();
src/Controller/AdminuxController.php:            if (in_array($v->getEtatVersion(), $etats, true)) {
src/Controller/AdminuxController.php:            $r = $this->__getVersionInfo($v, $long);
src/Controller/AdminuxController.php:            $r['idProjet'] = $v->getProjet()->getIdProjet();
src/Controller/AdminuxController.php:            $r['idVersion'] = $v->getIdVersion();
src/Controller/AdminuxController.php:            $r['etatVersion'] = $v->getEtatVersion();
src/Controller/AdminuxController.php:            $r['etatProjet'] = $v->getProjet()->getEtatProjet();
src/Controller/AdminuxController.php:            $r['mail'] = $v->getResponsable()->getMail();
src/Controller/AdminuxController.php:        $sj->infoMessage(__METHOD__.' OK');
src/Controller/AdminuxController.php:     *             '{ "projet" : null,     "mail" : null }' -> Tous les collaborateurs avec login
src/Controller/AdminuxController.php:     *             '{ "projet" : "P01234", "mail" : null }' -> Tous les collaborateurs avec login du projet P01234 (version ACTIVE)
src/Controller/AdminuxController.php:     *             '{ "projet" : null,     "mail" : "toto@exemple.fr"}' -> Tous les projets dans lesquels ce collaborateur a un login (version ACTIVE de chaque projet)
src/Controller/AdminuxController.php:     *             '{ "projet" : "P01234", "mail" : "toto@exemple.fr" }' -> rien ou toto si toto avait un login sur ce projet
src/Controller/AdminuxController.php:     * tels que loginname != null (login créé, peut-être à supprimer si login==false),
src/Controller/AdminuxController.php:    // curl --netrc -H "Content-Type: application/json" -X POST  -d '{ "projet" : "P1234", "mail" : null }' https://.../adminux/utilisateurs/get
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $raw_content = $request->getContent();
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $su = $this->su;
src/Controller/AdminuxController.php:            $content = json_decode($request->getContent(), true);
src/Controller/AdminuxController.php:            $projets = $em->getRepository(Projet::class)->findNonTermines();
src/Controller/AdminuxController.php:            $projets = $em->getRepository(Projet::class)->findNonTermines();
src/Controller/AdminuxController.php:            $p = $em->getRepository(Projet::class)->find($id_projet);
src/Controller/AdminuxController.php:            $p = $em->getRepository(Projet::class)->find($id_projet);
src/Controller/AdminuxController.php:            if (Etat::TERMINE != $p->getEtatProjet()) {
src/Controller/AdminuxController.php:        // $pdbg[] = $p->getIdProjet();
src/Controller/AdminuxController.php:            $id_projet = $p->getIdProjet();
src/Controller/AdminuxController.php:            if (null === $p->getVersionDerniere()) {
src/Controller/AdminuxController.php:                $this->sj->warningMessage("ATTENTION - Projet $p SANS DERNIERE VERSION !");
src/Controller/AdminuxController.php:                $vs[] = $p->getVersionDerniere();
src/Controller/AdminuxController.php:            if (null != $p->getVersionActive()) {
src/Controller/AdminuxController.php:                $vs[] = $p->getVersionActive();
src/Controller/AdminuxController.php:            $i = 0; // i=0 -> version dernière, $i=1 -> version active
src/Controller/AdminuxController.php:                $collaborateurs = $v->getCollaborateurVersion();
src/Controller/AdminuxController.php:                    $m = $cv->getCollaborateur()->getMail();
src/Controller/AdminuxController.php:                    // si on a spécifié un mail, ne retenir que celui-la
src/Controller/AdminuxController.php:                    // if ($cv->getLogin()==false && $cv->getClogin()==false && $cv->getLoginname()==null) {
src/Controller/AdminuxController.php:                        $users[$m]['nom'] = $cv->getCollaborateur()->getNom();
src/Controller/AdminuxController.php:                        $users[$m]['prenom'] = $cv->getCollaborateur()->getPrenom();
src/Controller/AdminuxController.php:                        $users[$m]['idIndividu'] = $cv->getCollaborateur()->getIdIndividu();
src/Controller/AdminuxController.php:                    $loginnames = $su->collaborateurVersion2LoginNames($cv);
src/Controller/AdminuxController.php:                    $v_info['version'] = $v->getIdVersion();
src/Controller/AdminuxController.php:                    $v_info['deleted'] = $cv->getDeleted();
src/Controller/AdminuxController.php:        $sj->infoMessage(__METHOD__.' OK');
src/Controller/AdminuxController.php:    // curl --netrc -H "Content-Type: application/json" -X GET https://.../adminux/getloginnames/P1234/projet
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $su = $this->su;
src/Controller/AdminuxController.php:        $projet = $em->getRepository(Projet::class)->find($idProjet);
src/Controller/AdminuxController.php:            $sj->infoMessage(__METHOD__." No projet $idProjet");
src/Controller/AdminuxController.php:        $versions = $projet->getVersion();
src/Controller/AdminuxController.php:        $idProjet = $projet->getIdProjet();
src/Controller/AdminuxController.php:            if (Etat::ACTIF == $version->getEtatVersion()) {
src/Controller/AdminuxController.php:                foreach ($version->getCollaborateurVersion() as $cv) {
src/Controller/AdminuxController.php:                    $collaborateur = $cv->getCollaborateur();
src/Controller/AdminuxController.php:                        $prenom = $collaborateur->getPrenom();
src/Controller/AdminuxController.php:                        $nom = $collaborateur->getNom();
src/Controller/AdminuxController.php:                        $idIndividu = $collaborateur->getIdIndividu();
src/Controller/AdminuxController.php:                        $mail = $collaborateur->getMail();
src/Controller/AdminuxController.php:                        $loginnames = $su->collaborateurVersion2LoginNames($cv, true);
src/Controller/AdminuxController.php:        $sj->infoMessage(__METHOD__.' OK');
src/Controller/AdminuxController.php:        $grdt = $this->grdt;
src/Controller/AdminuxController.php:        $sn = $this->sn;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:            $dest = $sn->mailUsers(['S'], null);
src/Controller/AdminuxController.php:            $msg = "\n ---->  FONCTIONNALITE NON IMPLEMENTEE !  <-----\n";
src/Controller/AdminuxController.php:            $sn->sendMessage('notification/quota_check-sujet.html.twig', 'notification/quota_check-contenu.html.twig', ['MSG' => $msg], $dest);
src/Controller/AdminuxController.php:            $annee_courante = $grdt->showYear();
src/Controller/AdminuxController.php:            $sp = $this->sp;
src/Controller/AdminuxController.php:            $projets = $sp->projetsParAnnee($annee_courante)[0];
src/Controller/AdminuxController.php:                // TODO - Tester sur l'état plutôt que sur le meta état,
src/Controller/AdminuxController.php:                    $msg .= $p['p']->getIdProjet()."\t".$p['attrib']."\t\t".$p['q']."\n";
src/Controller/AdminuxController.php:                $dest = $sn->mailUsers(['S'], null);
src/Controller/AdminuxController.php:                $sn->sendMessage('notification/quota_check-sujet.html.twig', 'notification/quota_check-contenu.html.twig', ['MSG' => $msg], $dest);
src/Controller/AdminuxController.php:            $sj->infoMessage(__METHOD__.' OK');
src/Controller/AdminuxController.php:        return $this->render('consommation/conso_update_batch.html.twig');
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $su = $this->su;
src/Controller/AdminuxController.php:        $grdt = $this->grdt;
src/Controller/AdminuxController.php:        $users = $em->getRepository(User::class)->findAll();
src/Controller/AdminuxController.php:            $u['loginname'] = $su->getLoginname($user);
src/Controller/AdminuxController.php:            if (!$this->checkUser($u['loginname'])) {
src/Controller/AdminuxController.php:            if ($user->getPassexpir() <= $grdt && false === $user->getExpire()) {
src/Controller/AdminuxController.php:                $user->setExpire(true);
src/Controller/AdminuxController.php:                $em->persist($user);
src/Controller/AdminuxController.php:                $em->flush();
src/Controller/AdminuxController.php:            if ($user->getPassexpir() > $grdt && true === $user->getExpire()) {
src/Controller/AdminuxController.php:                $user->setExpire(false);
src/Controller/AdminuxController.php:                $em->persist($user);
src/Controller/AdminuxController.php:                $em->flush();
src/Controller/AdminuxController.php:            $u['loginname'] = $su->getLoginname($user);
src/Controller/AdminuxController.php:            $u['expire'] = $user->getExpire();
src/Controller/AdminuxController.php:        $sj->infoMessage(__METHOD__.' OK');
src/Controller/AdminuxController.php:        $token = $this->tok->getToken();
src/Controller/AdminuxController.php:        $su = $this->su;
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:            $loginname_p = $su->parseLoginname($prm);
src/Controller/AdminuxController.php:            $serveur = $em->getRepository(Serveur::class)->findOneBy(['nom' => $loginname_p['serveur']]);
src/Controller/AdminuxController.php:        $moi = $token->getUser();
src/Controller/AdminuxController.php:        if (null != $moi && $moi->getUserIdentifier() != $serveur->getAdmname()) {
src/Controller/AdminuxController.php:     *             '' -> toutes les clés
src/Controller/AdminuxController.php:     *             '{ "rvk" : true }' -> Les clés qui ont été révoquées
src/Controller/AdminuxController.php:     *             '{ "rvk" : false }' -> Les clés qui ne sont PAS révoquées
src/Controller/AdminuxController.php:    // curl -s --netrc -H "Content-Type: application/json" -X POST -d '{}' https://.../adminux/clessh/get
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $raw_content = $request->getContent();
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $su = $this->su;
src/Controller/AdminuxController.php:            $content = json_decode($request->getContent(), true);
src/Controller/AdminuxController.php:                $rvk = $content['rvk'] ? 1 : -1;
src/Controller/AdminuxController.php:        $clessh = $em->getRepository(Clessh::class)->findall();
src/Controller/AdminuxController.php:            $r_c['idCle'] = $c->getId();
src/Controller/AdminuxController.php:            $r_c['nom'] = $c->getNom();
src/Controller/AdminuxController.php:            $r_c['pub'] = $c->getPub();
src/Controller/AdminuxController.php:            $r_c['rvk'] = $c->getrvk();
src/Controller/AdminuxController.php:            if (-1 === $rvk && true === $r_c['rvk']) {
src/Controller/AdminuxController.php:            $r_c['idindividu'] = $c->getIndividu()->getIdIndividu();
src/Controller/AdminuxController.php:            $r_c['empreinte'] = $c->getEmp();
src/Controller/AdminuxController.php:            $users = $c->getUser();
src/Controller/AdminuxController.php:                // $c_cv = $u->getCollaborateurVersion();
src/Controller/AdminuxController.php:                // $cv = $c_cv[$l-1];
src/Controller/AdminuxController.php:                $individu = $u->getIndividu();
src/Controller/AdminuxController.php:                $r_u['individu'] = $individu->getPrenom().' '.$individu->getNom();
src/Controller/AdminuxController.php:                $r_u['idIndividu'] = $individu->getIdIndividu();
src/Controller/AdminuxController.php:                $r_u['mail'] = $individu->getMail();
src/Controller/AdminuxController.php:                $r_u['loginname'] = $su->getLoginname($u);
src/Controller/AdminuxController.php:                $r_u['deploy'] = $u->getDeply();
src/Controller/AdminuxController.php:                $r_u['projet'] = $u->getProjet()->getIdProjet();
src/Controller/AdminuxController.php:        $sj->infoMessage(__METHOD__.' OK');
src/Controller/AdminuxController.php:    // curl --netrc -X POST -d '{ "loginname": "toto@TURPAN", "idIndividu": "6543", "projet": "P1234" }' https://.../adminux/clessh/deployer
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $su = $this->su;
src/Controller/AdminuxController.php:        $content = json_decode($request->getContent(), true);
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de données');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de nom de login');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de projet');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de idIndividu');
src/Controller/AdminuxController.php:        $projet = $em->getRepository(Projet::class)->find($idProjet);
src/Controller/AdminuxController.php:        $individu = $em->getRepository(Individu::class)->find($idIndividu);
src/Controller/AdminuxController.php:            $loginname_p = $su->parseLoginname($loginname);
src/Controller/AdminuxController.php:        $serveur = $em->getRepository(Serveur::class)->findOneBy(['nom' => $loginname_p['serveur']]);
src/Controller/AdminuxController.php:        if (null != $serveur && !$this->checkUser($serveur)) {
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - '.print_r($error, true));
src/Controller/AdminuxController.php:        $versions = $projet->getVersion();
src/Controller/AdminuxController.php:            // $version->getIdVersion()."\n";
src/Controller/AdminuxController.php:            if (Etat::ACTIF === $version->getEtatVersion()
src/Controller/AdminuxController.php:                || Etat::ACTIF_TEST === $version->getEtatVersion()
src/Controller/AdminuxController.php:                || Etat::NOUVELLE_VERSION_DEMANDEE === $version->getEtatVersion()
src/Controller/AdminuxController.php:                || Etat::EN_ATTENTE === $version->getEtatVersion()
src/Controller/AdminuxController.php:                foreach ($version->getCollaborateurVersion() as $cv) {
src/Controller/AdminuxController.php:                    $collaborateur = $cv->getCollaborateur();
src/Controller/AdminuxController.php:                    if (null != $collaborateur && $collaborateur->isEqualTo($individu)) {
src/Controller/AdminuxController.php:                        $user = $em->getRepository(User::class)->findOneByLoginname($loginname);
src/Controller/AdminuxController.php:                            $sj->errorMessage(__METHOD__.':'.__FILE__." - $msg");
src/Controller/AdminuxController.php:                        $user->setDeply(true);
src/Controller/AdminuxController.php:            $sj->infoMessage(__METHOD__."$i versions modifiées");
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Mauvais projet ou mauvais idIndividu !');
src/Controller/AdminuxController.php:    // curl --netrc -X POST -d '{ "idIndividu": "6543", "idCle": "55" }' https://.../adminux/clessh/revoquer
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $su = $this->su;
src/Controller/AdminuxController.php:        $content = json_decode($request->getContent(), true);
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de données');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de idCle');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de idIndividu');
src/Controller/AdminuxController.php:        $individu = $em->getRepository(Individu::class)->find($idIndividu);
src/Controller/AdminuxController.php:        $cle = $em->getRepository(Clessh::class)->find($idCle);
src/Controller/AdminuxController.php:            if (null == $cle->getIndividu() || $cle->getIndividu()->getIdIndividu() != $idIndividu) {
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - '.print_r($error, true));
src/Controller/AdminuxController.php:        $cle->setRvk(true);
src/Controller/AdminuxController.php:    // curl --netrc -X GET https://.../adminux/cron/execute
src/Controller/AdminuxController.php:        $cr = $this->cr;
src/Controller/AdminuxController.php:        $cr->execute();
src/Controller/AdminuxController.php:    // curl --netrc -X GET https://.../adminux/todo/get
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $sp = $this->sp;
src/Controller/AdminuxController.php:        $sroc = $this->sroc;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        // $grdt = $this->grdt;
src/Controller/AdminuxController.php:        $rep = $em->getRepository(Projet::class);
src/Controller/AdminuxController.php:        $projets = $rep->findNonTermines();
src/Controller/AdminuxController.php:            // TODO (ou pas) -> Projets à supprimer
src/Controller/AdminuxController.php:            //               -> On ne les traite pas pour l'instant avec gramc-meso
src/Controller/AdminuxController.php:            //               -> Il faudrait une table supplémentaire (pour les traiter par ressource)
src/Controller/AdminuxController.php:            $v = $p->getVersionActive();
src/Controller/AdminuxController.php:            // Y a-t-il une version à traiter ?
src/Controller/AdminuxController.php:            $data = $this->__getTodo($v->getDac(), $v);
src/Controller/AdminuxController.php:            // Y a-t-il une rallonge à traiter ?
src/Controller/AdminuxController.php:            foreach ($v->getRallonge() as $r) {
src/Controller/AdminuxController.php:                $data = $this->__getTodo($r->getDar(), $v, $r);
src/Controller/AdminuxController.php:        $sroc = $this->sroc;
src/Controller/AdminuxController.php:            $ressource = $d->getRessource();
src/Controller/AdminuxController.php:                $sj->errorMessage(__METHOD__.':'.__FILE__." - $d - Ressource is null !");
src/Controller/AdminuxController.php:            $serveur = $ressource->getServeur();
src/Controller/AdminuxController.php:                $sj->errorMessage(__METHOD__.':'.__FILE__." - $d - Serveur is null !");
src/Controller/AdminuxController.php:            if (!$this->checkUser($serveur)) {
src/Controller/AdminuxController.php:            if ($d->getTodof()) {
src/Controller/AdminuxController.php:                $data['idProjet'] = $v->getProjet()->getIdProjet();
src/Controller/AdminuxController.php:                    $data['idRallonge'] = $r->getIdRallonge();
src/Controller/AdminuxController.php:                $data['attribution'] = $d->getAttribution();
src/Controller/AdminuxController.php:                $data['ressource'] = $sroc->getNomComplet($d->getRessource());
src/Controller/AdminuxController.php:    // curl --netrc -X POST -d '{ "projet": "M12345", "ressource": "TURPAN" }' https://.../adminux/todo/done
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $su = $this->su;
src/Controller/AdminuxController.php:        $sroc = $this->sroc;
src/Controller/AdminuxController.php:        $content = json_decode($request->getContent(), true);
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de données');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de projet');
src/Controller/AdminuxController.php:            $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de ressource');
src/Controller/AdminuxController.php:        // Donc on balaie toutes les ressources... qui ne devraient pas être super-nombreuses non plus
src/Controller/AdminuxController.php:        $ressources = $sroc->getRessources();
src/Controller/AdminuxController.php:            if ($sroc->getnomComplet($r) === $nomRessource) {
src/Controller/AdminuxController.php:            $serveur = $ressource->getServeur();
src/Controller/AdminuxController.php:        if (null !== $serveur && !$this->checkUser($serveur)) {
src/Controller/AdminuxController.php:        $projet = $em->getRepository(Projet::class)->find($idProjet);
src/Controller/AdminuxController.php:            $version = $projet->getVersionActive();
src/Controller/AdminuxController.php:            // La version doit-elle être acquittée ?
src/Controller/AdminuxController.php:            $todofound = $this->__clrTodof($version->getDac(), $ressource);
src/Controller/AdminuxController.php:            // Sinon, existe-t-il une rallonge non encore acquittée ?
src/Controller/AdminuxController.php:                foreach ($version->getRallonge() as $r) {
src/Controller/AdminuxController.php:                    $todofound = $this->__clrTodof($r->getDar(), $ressource);
src/Controller/AdminuxController.php:                $error[] = "Pas de todo-flag sur le projet $idProjet pour la ressource $nomRessource";
src/Controller/AdminuxController.php:            $sj->errorMessage(print_r($error, true));
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:            if ($d->getRessource() === $ressource) {
src/Controller/AdminuxController.php:                if ($d->getTodof()) {
src/Controller/AdminuxController.php:                    $d->setTodof(false);
src/Controller/AdminuxController.php:                    $em->persist($d);
src/Controller/AdminuxController.php:                    $em->flush();
src/Controller/AdminuxController.php:    // curl --netrc -X GET https://.../adminux/gramcdate/get
src/Controller/AdminuxController.php:        if (false === $this->getParameter('kernel.debug')) {
src/Controller/AdminuxController.php:            return new Response(json_encode($this->grdt->format('Y-m-d')));
src/Controller/AdminuxController.php:     *             '{ "labo" : true     }' -> Toutes les adresses IP, associées à un acronyme de laboratoire
src/Controller/AdminuxController.php:     *             '{ "verif" : true }' --> Si true, ne renvoie que les adresses utiles au mésocentre connecté
src/Controller/AdminuxController.php:    // curl --netrc -H "Content-Type: application/json" -X POST -d '{ "labo": true }' https://.../adminux/adresseip/get
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        $sp = $this->sp;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $token = $this->tok->getToken();
src/Controller/AdminuxController.php:        $grdt = $this->grdt;
src/Controller/AdminuxController.php:        $labo_rep = $em->getRepository(Laboratoire::class);
src/Controller/AdminuxController.php:        $content = json_decode($request->getContent(), true);
src/Controller/AdminuxController.php:            $labos = $labo_rep->findAll();
src/Controller/AdminuxController.php:            $moi = $token->getUser();
src/Controller/AdminuxController.php:                $sj->errorMessage(__METHOD__.':'.__FILE__.' - non connecté');
src/Controller/AdminuxController.php:            $labos = $labo_rep->findByAdmname($moi->getUserIdentifier());
src/Controller/AdminuxController.php:                foreach ($l->getAdresseip() as $adr) {
src/Controller/AdminuxController.php:                    $adr_lab[] = $adr->getAdresse();
src/Controller/AdminuxController.php:                $adresses[$l->getAcroLabo()] = $adr_lab;
src/Controller/AdminuxController.php:                foreach ($l->getAdresseip() as $adr) {
src/Controller/AdminuxController.php:                    if (!in_array($adr->getAdresse(), $adresses)) {
src/Controller/AdminuxController.php:                        $adresses[] = $adr->getAdresse();
src/Controller/AdminuxController.php:        $sj->infoMessage(__METHOD__.' OK');
src/Controller/AdminuxController.php:    // curl --netrc -X POST -d '{ "shift": "2" }' https://.../adminux/gramcdate/set
src/Controller/AdminuxController.php:    // curl --netrc -X POST -d '{ "rel" : true, shift": "2" }' https://.../adminux/gramcdate/set
src/Controller/AdminuxController.php:    // curl --netrc -X POST -d '{ "shift": "today" }' https://.../adminux/gramcdate/set
src/Controller/AdminuxController.php:    // curl --netrc -X POST -d '{ "shift": "2", "cron":"1" }' https://.../adminux/gramcdate/set
src/Controller/AdminuxController.php:        $grdt = $this->grdt;
src/Controller/AdminuxController.php:        $cr = $this->cr;
src/Controller/AdminuxController.php:        $sj = $this->sj;
src/Controller/AdminuxController.php:        $em = $this->em;
src/Controller/AdminuxController.php:        if (false === $this->getParameter('kernel.debug')) {
src/Controller/AdminuxController.php:            $content = json_decode($request->getContent(), true);
src/Controller/AdminuxController.php:                $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de données');
src/Controller/AdminuxController.php:                $sj->errorMessage(__METHOD__.':'.__FILE__.' - Pas de shift');
src/Controller/AdminuxController.php:            $grdt_now = $em->getRepository(Param::class)->findOneBy(['cle' => 'now']);
src/Controller/AdminuxController.php:                $grdt_now->setCle('now');
src/Controller/AdminuxController.php:                $em->remove($grdt_now);
src/Controller/AdminuxController.php:                    $date = $grdt->getNew();
src/Controller/AdminuxController.php:                $date->add($dateInterval);
src/Controller/AdminuxController.php:                $grdt_now->setVal($date->format('Y-m-d'));
src/Controller/AdminuxController.php:                $em->persist($grdt_now);
src/Controller/AdminuxController.php:            $em->flush();
src/Controller/AdminuxController.php:            $grdt_now = $em->getRepository(Param::class)->findOneBy(['cle' => 'now']);
src/Controller/AdminuxController.php:                $cr->execute();
src/Controller/ClesshController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/ClesshController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/ClesshController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/ClesshController.php:        $token = $this->tok->getToken();
src/Controller/ClesshController.php:        $em = $this->em;
src/Controller/ClesshController.php:        $moi = $token->getUser();
src/Controller/ClesshController.php:        $clessh_all = $moi->getClessh();
src/Controller/ClesshController.php:            if ($c->getRvk()) {
src/Controller/ClesshController.php:        return $this->render(
src/Controller/ClesshController.php:        $token = $this->tok->getToken();
src/Controller/ClesshController.php:        $em = $this->em;
src/Controller/ClesshController.php:        $moi = $token->getUser();
src/Controller/ClesshController.php:        $clessh_all = $moi->getClessh();
src/Controller/ClesshController.php:        return $this->render(
src/Controller/ClesshController.php:        if ($clessh->getRvk()) {
src/Controller/ClesshController.php:            $request->getSession()->getFlashbag()->add('flash erreur', $msg);
src/Controller/ClesshController.php:            $em = $this->em;
src/Controller/ClesshController.php:            $em->remove($clessh);
src/Controller/ClesshController.php:                $em->flush();
src/Controller/ClesshController.php:                $request->getSession()->getFlashbag()->add('flash erreur', $msg);
src/Controller/ClesshController.php:        return $this->redirectToRoute('gerer_clessh');
src/Controller/ClesshController.php:        $em = $this->em;
src/Controller/ClesshController.php:        $token = $this->tok->getToken();
src/Controller/ClesshController.php:        $moi = $token->getUser();
src/Controller/ClesshController.php:        $clessh->setIndividu($moi);
src/Controller/ClesshController.php:        $clessh->setIndividu($moi);
src/Controller/ClesshController.php:        $form = $this->createForm('App\Form\ClesshType', $clessh);
src/Controller/ClesshController.php:        $form->handleRequest($request);
src/Controller/ClesshController.php:        if ($form->isSubmitted()) {
src/Controller/ClesshController.php:            if ($form->isValid()) {
src/Controller/ClesshController.php:                // TODO ssh-keygen est appelé ici pour la SECONDE FOIS car il a déjà été appelé
src/Controller/ClesshController.php:                $pub = $clessh->getPub();
src/Controller/ClesshController.php:                exec("/bin/bash -c 'ssh-keygen -l -f <(echo $pub)'", $o, $c);
src/Controller/ClesshController.php:                $clessh->setEmp($empreinte[1]);
src/Controller/ClesshController.php:                $em = $this->em;
src/Controller/ClesshController.php:                $em->persist($clessh);
src/Controller/ClesshController.php:                    $em->flush();
src/Controller/ClesshController.php:                    $request->getSession()->getFlashbag()->add('flash erreur', $msg);
src/Controller/ClesshController.php:                return $this->redirectToRoute('gerer_clessh');
src/Controller/ClesshController.php:                $request->getSession()->getFlashbag()->add('flash erreur', $msg);
src/Controller/ClesshController.php:                return $this->redirectToRoute('gerer_clessh');
src/Controller/ClesshController.php:        return $this->render(
src/Controller/ClesshController.php:            'form' => $form->createView(),
src/Controller/DefaultController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/DefaultController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/DefaultController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/DefaultController.php:        $em = $this->em;
src/Controller/DefaultController.php:        $projet = $em->getRepository(Projet::class)->findOneBy(['idProjet' => 'P1440']);
src/Controller/DefaultController.php:        $query = $em->createQuery('SELECT partial u.{idIndividu,nom} AS individu, partial s.{eppn} AS sso, count(s) AS score FROM App\Entity\Individu u JOIN u.sso s GROUP BY u');
src/Controller/DefaultController.php:        $result = $query->getResult();
src/Controller/DefaultController.php:        $sn = $this->sn;
src/Controller/DefaultController.php:        $em = $this->em;
src/Controller/DefaultController.php:        $users = $em->getRepository(Individu::class)->findBy(['president' => true]);
src/Controller/DefaultController.php:        $versions = $em->getRepository(Version::class)->findAll();
src/Controller/DefaultController.php:        $users = $sn->mailUsers(['E', 'R'], $versions[301]);
src/Controller/DefaultController.php:        $output = $sn->sendMessage('projet/dialog_back.html.twig', 'projet/dialog_back.html.twig', ['projet' => ['idProjet' => 'ID']], $users);
src/Controller/DefaultController.php:        $ss = $this->ss;
src/Controller/DefaultController.php:        var_dump($ss->getSessionCourante());
src/Controller/DefaultController.php:        $form = $this->ff
src/Controller/DefaultController.php:                   ->createNamedBuilder('image_form', FormType::class, [])
src/Controller/DefaultController.php:                   ->add('image', TextType::class, ['required' => false])
src/Controller/DefaultController.php:                   ->add('number', TextType::class, ['required' => false])
src/Controller/DefaultController.php:                   ->getForm();
src/Controller/DefaultController.php:        $form->handleRequest($request);
src/Controller/DefaultController.php:        // if ($form->isSubmitted() )
src/Controller/DefaultController.php:        return $this->render(
src/Controller/DefaultController.php:            'form' => $form->createView(),
src/Controller/EtablissementController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/EtablissementController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/EtablissementController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/EtablissementController.php:        $em = $this->em;
src/Controller/EtablissementController.php:        $etablissements = $em->getRepository(Etablissement::class)->findAll();
src/Controller/EtablissementController.php:        return $this->render('etablissement/index.html.twig', [
src/Controller/EtablissementController.php:        $form = $this->createForm('App\Form\EtablissementType', $etablissement);
src/Controller/EtablissementController.php:        $form->handleRequest($request);
src/Controller/EtablissementController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/EtablissementController.php:            $em = $this->em;
src/Controller/EtablissementController.php:            $em->persist($etablissement);
src/Controller/EtablissementController.php:            $em->flush($etablissement);
src/Controller/EtablissementController.php:            return $this->redirectToRoute('etablissement_show', ['id' => $etablissement->getId()]);
src/Controller/EtablissementController.php:        return $this->render('etablissement/new.html.twig', [
src/Controller/EtablissementController.php:            'form' => $form->createView(),
src/Controller/EtablissementController.php:        $deleteForm = $this->createDeleteForm($etablissement);
src/Controller/EtablissementController.php:        return $this->render('etablissement/show.html.twig', [
src/Controller/EtablissementController.php:        $deleteForm = $this->createDeleteForm($etablissement);
src/Controller/EtablissementController.php:        $editForm = $this->createForm('App\Form\EtablissementType', $etablissement);
src/Controller/EtablissementController.php:        $editForm->handleRequest($request);
src/Controller/EtablissementController.php:        if ($editForm->isSubmitted() && $editForm->isValid()) {
src/Controller/EtablissementController.php:            $this->em->flush();
src/Controller/EtablissementController.php:            return $this->redirectToRoute('etablissement_edit', ['id' => $etablissement->getId()]);
src/Controller/EtablissementController.php:        return $this->render('etablissement/edit.html.twig', [
src/Controller/EtablissementController.php:            'edit_form' => $editForm->createView(),
src/Controller/EtablissementController.php:        $form = $this->createDeleteForm($etablissement);
src/Controller/EtablissementController.php:        $form->handleRequest($request);
src/Controller/EtablissementController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/EtablissementController.php:            $em = $this->em;
src/Controller/EtablissementController.php:            $em->remove($etablissement);
src/Controller/EtablissementController.php:            $em->flush($etablissement);
src/Controller/EtablissementController.php:        return $this->redirectToRoute('etablissement_index');
src/Controller/EtablissementController.php:        return $this->createFormBuilder()
src/Controller/EtablissementController.php:            ->setAction($this->generateUrl('etablissement_delete', ['id' => $etablissement->getId()]))
src/Controller/EtablissementController.php:            ->setMethod('DELETE')
src/Controller/EtablissementController.php:            ->getForm()
src/Controller/ExpertiseController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/ExpertiseController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/ExpertiseController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/ExpertiseController.php:        $this->token = $tok->getToken();
src/Controller/ExpertiseController.php:        return Etat::cmpEtatExpertise($a->getEtatVersion(), $b->getEtatVersion());
src/Controller/ExpertiseController.php:        $token = $this->token;
src/Controller/ExpertiseController.php:        $sm = $this->sm;
src/Controller/ExpertiseController.php:        $menu[] = $sm->expert();
src/Controller/ExpertiseController.php:        $moi = $token->getUser();
src/Controller/ExpertiseController.php:        $version = $expertise->getVersion();
src/Controller/ExpertiseController.php:        if (null !== $version && $version->isExpertDe($moi)) {
src/Controller/ExpertiseController.php:            return $this->render('expertise/consulter.html.twig', ['expertise' => $expertise, 'menu' => $menu]);
src/Controller/ExpertiseController.php:            return new RedirectResponse($this->generateUrl('accueil'));
src/Controller/ExpertiseController.php:            return -1;
src/Controller/ExpertiseController.php:            return -1;
src/Controller/ExpertiseController.php:        $grdt = $this->grdt;
src/Controller/ExpertiseController.php:        $sid = $this->sid;
src/Controller/ExpertiseController.php:        $ss = $this->ss;
src/Controller/ExpertiseController.php:        $sp = $this->sp;
src/Controller/ExpertiseController.php:        $sj = $this->sj;
src/Controller/ExpertiseController.php:        $token = $this->token;
src/Controller/ExpertiseController.php:        $em = $this->em;
src/Controller/ExpertiseController.php:        $moi = $token->getUser();
src/Controller/ExpertiseController.php:            $sj->throwException();
src/Controller/ExpertiseController.php:            $individu = $token->getUser();
src/Controller/ExpertiseController.php:            if (!$sid->validerProfil($individu)) {
src/Controller/ExpertiseController.php:                return $this->redirectToRoute('profil');
src/Controller/ExpertiseController.php:        $mes_thematiques = $moi->getThematique();
src/Controller/ExpertiseController.php:        $expertiseRepository = $em->getRepository(Expertise::class);
src/Controller/ExpertiseController.php:        $expertises = $expertiseRepository->findExpertisesDyn();
src/Controller/ExpertiseController.php:        return $this->render('expertise/dyn.html.twig',
src/Controller/ExpertiseController.php:        // rallonge - version
src/Controller/ExpertiseController.php:        if (null === $a->getVersion() && null !== $b->getVersion()) {
src/Controller/ExpertiseController.php:        // version - rallonge
src/Controller/ExpertiseController.php:        if (null !== $a->getVersion() && null === $b->getVersion()) {
src/Controller/ExpertiseController.php:            return -1;
src/Controller/ExpertiseController.php:        // version - version
src/Controller/ExpertiseController.php:        if (null !== $a->getVersion()) {
src/Controller/ExpertiseController.php:            if ($a->getVersion()->getProjet()->getId() < $b->getVersion()->getId()) {
src/Controller/ExpertiseController.php:                return -1;
src/Controller/ExpertiseController.php:        // rallonge - rallonge
src/Controller/ExpertiseController.php:        if (null !== $a->getRallonge()) {
src/Controller/ExpertiseController.php:            if ($a->getRallonge()->getVersion()->getProjet()->getId() < $b->getRallonge()->getVersion()->getId()) {
src/Controller/ExpertiseController.php:                return -1;
src/Controller/ExpertiseController.php:        throw new \Exception('OUPS - Expertise mauvaise');
src/Controller/ExpertiseController.php:     * ATTENTION - La même fonction permet de valider PROJETS ET RALLONGES
src/Controller/ExpertiseController.php:        $ss = $this->ss;
src/Controller/ExpertiseController.php:        $sv = $this->sv;
src/Controller/ExpertiseController.php:        $sp = $this->sp;
src/Controller/ExpertiseController.php:        $sj = $this->sj;
src/Controller/ExpertiseController.php:        $ac = $this->ac;
src/Controller/ExpertiseController.php:        $grdt = $this->grdt;
src/Controller/ExpertiseController.php:        $sval = $this->vl;
src/Controller/ExpertiseController.php:        $sexp = $this->sexp;
src/Controller/ExpertiseController.php:        $token = $this->token;
src/Controller/ExpertiseController.php:        $em = $this->em;
src/Controller/ExpertiseController.php:        $moi = $token->getUser();
src/Controller/ExpertiseController.php:        $version = $expertise->getVersion();
src/Controller/ExpertiseController.php:        $rallonge = $expertise->getRallonge();
src/Controller/ExpertiseController.php:            $version = $rallonge->getVersion();
src/Controller/ExpertiseController.php:            $sj->throwException(__METHOD__.':'.__LINE__.'  '.$expertise." n'a pas de version !");
src/Controller/ExpertiseController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' personne connecté');
src/Controller/ExpertiseController.php:        if ($expertise->getDefinitif()) {
src/Controller/ExpertiseController.php:            $request->getSession()->getFlashbag()->add('flash erreur', 'Version ou rallonge déjà validée !');
src/Controller/ExpertiseController.php:            return $this->redirectToRoute($redirect_to_route);
src/Controller/ExpertiseController.php:        $expertiseRepository = $em->getRepository(Expertise::class);
src/Controller/ExpertiseController.php:        $anneeCour = intval($grdt->format('Y'));
src/Controller/ExpertiseController.php:        $anneePrec = $anneeCour - 1;
src/Controller/ExpertiseController.php:        // Version est-elle nouvelle ?
src/Controller/ExpertiseController.php:        $isnouvelle = $sv->isNouvelle($version);
src/Controller/ExpertiseController.php:        $projet = $version->getProjet();
src/Controller/ExpertiseController.php:        $projet_type = $projet->getTypeProjet();
src/Controller/ExpertiseController.php:            $sj->throwException(__METHOD__.':'.__LINE__." Le projet $projet n'est pas un projet dynamique (type=$projet_type)");
src/Controller/ExpertiseController.php:        // $peut_envoyer -> Si true, on affiche le bouton Envoyer
src/Controller/ExpertiseController.php:        $editForm = $this->createFormBuilder($expertise)
src/Controller/ExpertiseController.php:            ->add('commentaireInterne', TextareaType::class, ['required' => false])
src/Controller/ExpertiseController.php:            ->add('commentaireExterne', TextareaType::class, ['required' => false])
src/Controller/ExpertiseController.php:            ->add(
src/Controller/ExpertiseController.php:            ->add('enregistrer', SubmitType::class, ['label' => 'Enregistrer'])
src/Controller/ExpertiseController.php:            ->add('envoyer', SubmitType::class, ['label' => 'Envoyer'])
src/Controller/ExpertiseController.php:            ->add('annuler', SubmitType::class, ['label' => 'Annuler'])
src/Controller/ExpertiseController.php:            ->add('fermer', SubmitType::class)
src/Controller/ExpertiseController.php:            ->getForm();
src/Controller/ExpertiseController.php:        $editForm->handleRequest($request);
src/Controller/ExpertiseController.php:        $ressource_form = $expRallonge ? $sexp->getRessourceFormForRallonge($rallonge) : $sexp->getRessourceFormForVersion($version);
src/Controller/ExpertiseController.php:        $ressource_form->handleRequest($request);
src/Controller/ExpertiseController.php:        if ($editForm->isSubmitted() && $editForm->get('annuler')->isClicked()) {
src/Controller/ExpertiseController.php:            return $this->redirectToRoute($redirect_to_route);
src/Controller/ExpertiseController.php:        if ($editForm->isSubmitted()) {
src/Controller/ExpertiseController.php:            $expertise->setExpert($moi);
src/Controller/ExpertiseController.php:            $em->persist($expertise);
src/Controller/ExpertiseController.php:            $em->flush();
src/Controller/ExpertiseController.php:            if ($editForm->get('fermer')->isClicked()) {
src/Controller/ExpertiseController.php:                return $this->redirectToRoute($redirect_to_route);
src/Controller/ExpertiseController.php:            // Bouton ENVOYER --> Vérification des champs non renseignés
src/Controller/ExpertiseController.php:            if ($peut_envoyer && $editForm->get('envoyer')->isClicked() && [] === $erreurs) {
src/Controller/ExpertiseController.php:                if (false === $expertise->getValidation()) {
src/Controller/ExpertiseController.php:                        $dars = $ressource_form->getData()['ressource'];
src/Controller/ExpertiseController.php:                            $d->setAttribution(0);
src/Controller/ExpertiseController.php:                            $em->persist($d);
src/Controller/ExpertiseController.php:                        $em->flush();
src/Controller/ExpertiseController.php:                        $dacs = $ressource_form->getData()['ressource'];
src/Controller/ExpertiseController.php:                            $d->setAttribution(0);
src/Controller/ExpertiseController.php:                            $em->persist($d);
src/Controller/ExpertiseController.php:                        $em->flush();
src/Controller/ExpertiseController.php:                return $this->redirectToRoute('expertise_validation', ['id' => $expertise->getId()]);
src/Controller/ExpertiseController.php:        $expertises = $expertiseRepository->findExpertisesDyn();
src/Controller/ExpertiseController.php:                $prev = $expertises[$k - 1];
src/Controller/ExpertiseController.php:            if ($k == count($expertises) - 1) {
src/Controller/ExpertiseController.php:        return $this->render(
src/Controller/ExpertiseController.php:                'edit_form' => $editForm->createView(),
src/Controller/ExpertiseController.php:                'ressource_form' => $ressource_form->createView(),
src/Controller/ExpertiseController.php:        $dyn_duree = $this->dyn_duree;
src/Controller/ExpertiseController.php:        $sn = $this->sn;
src/Controller/ExpertiseController.php:        $sj = $this->sj;
src/Controller/ExpertiseController.php:        $ac = $this->ac;
src/Controller/ExpertiseController.php:        $sp = $this->sp;
src/Controller/ExpertiseController.php:        $p4w = $this->p4w;
src/Controller/ExpertiseController.php:        $grdt = $this->grdt;
src/Controller/ExpertiseController.php:        $em = $this->em;
src/Controller/ExpertiseController.php:        $token = $this->token;
src/Controller/ExpertiseController.php:        $version = $expertise->getVersion();
src/Controller/ExpertiseController.php:        $rallonge = $expertise->getRallonge();
src/Controller/ExpertiseController.php:            $version = $rallonge->getVersion();
src/Controller/ExpertiseController.php:            $sj->throwException(__METHOD__.':'.__LINE__.'  '.$expertise." n'a pas de version !");
src/Controller/ExpertiseController.php:        $moi = $token->getUser();
src/Controller/ExpertiseController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' personne connecté');
src/Controller/ExpertiseController.php:        } elseif (null === $expertise->getExpert()) {
src/Controller/ExpertiseController.php:            $sj->throwException(__METHOD__.':'.__LINE__." aucun expert pour l'expertise ".$expertise);
src/Controller/ExpertiseController.php:        } elseif (!$expertise->getExpert()->isEqualTo($moi)) {
src/Controller/ExpertiseController.php:            $sj->throwException(__METHOD__.':'.__LINE__.'  '.$moi.
src/Controller/ExpertiseController.php:                " n'est pas un expert de l'expertise ".$expertise.", c'est ".$expertise->getExpert());
src/Controller/ExpertiseController.php:        $editForm = $this->createFormBuilder($expertise)
src/Controller/ExpertiseController.php:                    ->add('confirmer', SubmitType::class, ['label' => 'Confirmer'])
src/Controller/ExpertiseController.php:                    ->add('annuler', SubmitType::class, ['label' => 'Annuler'])
src/Controller/ExpertiseController.php:                    ->getForm();
src/Controller/ExpertiseController.php:        $editForm->handleRequest($request);
src/Controller/ExpertiseController.php:        if ($editForm->isSubmitted()) {
src/Controller/ExpertiseController.php:            if ($editForm->get('annuler')->isClicked()) {
src/Controller/ExpertiseController.php:                return $this->redirectToRoute('expertise_modifier', ['id' => $expertise->getId()]);
src/Controller/ExpertiseController.php:                $this->validationForRallonge($rallonge, $expertise);
src/Controller/ExpertiseController.php:                $this->validationForVersion($version, $expertise);
src/Controller/ExpertiseController.php:            return $this->redirectToRoute($redirect_to_route);
src/Controller/ExpertiseController.php:        return $this->render(
src/Controller/ExpertiseController.php:            'edit_form' => $editForm->createView(),
src/Controller/ExpertiseController.php:        $sj = $this->sj;
src/Controller/ExpertiseController.php:        $em = $this->em;
src/Controller/ExpertiseController.php:        $sp = $this->sp;
src/Controller/ExpertiseController.php:        $workflow = $this->p4w;
src/Controller/ExpertiseController.php:        $dyn_duree = $this->dyn_duree;
src/Controller/ExpertiseController.php:        $grdt = $this->grdt;
src/Controller/ExpertiseController.php:        $projet = $expertise->getVersion()->getProjet();
src/Controller/ExpertiseController.php:        $version->setStartDate($grdt->getNew());
src/Controller/ExpertiseController.php:        $version->setLimitDate($grdt->getNew()->add(new \DateInterval($dyn_duree)));
src/Controller/ExpertiseController.php:        $projet->setLimitDate($version->getLimitDate());
src/Controller/ExpertiseController.php:        $veract = $projet->getVersionActive();
src/Controller/ExpertiseController.php:            $veract->setEndDate($grdt);
src/Controller/ExpertiseController.php:            $em->persist($veract);
src/Controller/ExpertiseController.php:        $validation = $expertise->getValidation();
src/Controller/ExpertiseController.php:        $rtn = $workflow->execute($signal, $version->getProjet());
src/Controller/ExpertiseController.php:            $sj->errorMessage(__METHOD__.':'.__LINE__.' Transition avec '.Signal::getLibelle($signal)
src/Controller/ExpertiseController.php:            $expertise->setDefinitif(true);
src/Controller/ExpertiseController.php:                $version->setEndDate($grdt->getNew());
src/Controller/ExpertiseController.php:                $version->setLimitDate($grdt->getNew());
src/Controller/ExpertiseController.php:        $sp->versionActive($projet);
src/Controller/ExpertiseController.php:        $em->persist($expertise);
src/Controller/ExpertiseController.php:        $em->persist($version);
src/Controller/ExpertiseController.php:        $em->persist($projet);
src/Controller/ExpertiseController.php:        $em->flush();
src/Controller/ExpertiseController.php:        $sj = $this->sj;
src/Controller/ExpertiseController.php:        $workflow = $this->r4w;
src/Controller/ExpertiseController.php:        $em = $this->em;
src/Controller/ExpertiseController.php:        $validation = $expertise->getValidation();
src/Controller/ExpertiseController.php:        $rtn = $workflow->execute($signal, $rallonge);
src/Controller/ExpertiseController.php:            $sj->errorMessage(__METHOD__.':'.__LINE__.' Transition avec '.Signal::getLibelle($signal)
src/Controller/ExpertiseController.php:            $expertise->setDefinitif(true);
src/Controller/ExpertiseController.php:        $em->persist($expertise);
src/Controller/ExpertiseController.php:        $em->persist($rallonge);
src/Controller/ExpertiseController.php:        $em->flush();
src/Controller/FormationController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/FormationController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/FormationController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/FormationController.php:        $ac = $this->ac;
src/Controller/FormationController.php:        $em = $this->em;
src/Controller/FormationController.php:        $menu = $ac->isGranted('ROLE_ADMIN') ? [['ok' => true, 'name' => 'ajouter_formation', 'lien' => 'Ajouter une formation', 'commentaire' => 'Ajouter une formation']] : [];
src/Controller/FormationController.php:        return $this->render(
src/Controller/FormationController.php:            'formations' => $em->getRepository(Formation::class)->findBy([], ['numeroForm' => 'ASC']),
src/Controller/FormationController.php:        $form = $this->createForm('App\Form\FormationType', $formation, ['ajouter' => true]);
src/Controller/FormationController.php:        $form->handleRequest($request);
src/Controller/FormationController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/FormationController.php:            $em = $this->em;
src/Controller/FormationController.php:            $em->persist($formation);
src/Controller/FormationController.php:            $em->flush($formation);
src/Controller/FormationController.php:            return $this->redirectToRoute('gerer_formations');
src/Controller/FormationController.php:        return $this->render(
src/Controller/FormationController.php:            'form' => $form->createView(),
src/Controller/FormationController.php:        $form = $this->createForm('App\Form\FormationType', $formation, ['modifier' => true]);
src/Controller/FormationController.php:        $form->handleRequest($request);
src/Controller/FormationController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/FormationController.php:            $this->em->flush();
src/Controller/FormationController.php:            return $this->redirectToRoute('gerer_formations');
src/Controller/FormationController.php:        return $this->render(
src/Controller/FormationController.php:            'form' => $form->createView(),
src/Controller/FormationController.php:        $em = $this->em;
src/Controller/FormationController.php:        $em->remove($formation);
src/Controller/FormationController.php:        $em->flush($formation);
src/Controller/FormationController.php:        return $this->redirectToRoute('gerer_formations');
src/Controller/FormationController.php:        return $this->createFormBuilder()
src/Controller/FormationController.php:            ->setAction($this->generateUrl('formation_delete', ['id' => $formation->getId()]))
src/Controller/FormationController.php:            ->setMethod('DELETE')
src/Controller/FormationController.php:            ->getForm()
src/Controller/GramcSessionController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/GramcSessionController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/GramcSessionController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/GramcSessionController.php:        $sm = $this->sm;
src/Controller/GramcSessionController.php:        $sid = $this->sid;
src/Controller/GramcSessionController.php:        $token = $this->ts->getToken();
src/Controller/GramcSessionController.php:            $individu = $token->getUser();
src/Controller/GramcSessionController.php:            if (!$sid->validerProfil($individu)) {
src/Controller/GramcSessionController.php:                return $this->redirectToRoute('profil');
src/Controller/GramcSessionController.php:        $menu1[] = $sm->gererIndividu();
src/Controller/GramcSessionController.php:        $menu1[] = $sm->gererInvitations();
src/Controller/GramcSessionController.php:        $menu3[] = $sm->projetsDyn();
src/Controller/GramcSessionController.php:        $menu3[] = $sm->rallongesDyn();
src/Controller/GramcSessionController.php:        $menu3[] = $sm->televersementGenerique();
src/Controller/GramcSessionController.php:        $menu4[] = $sm->gererFormations();
src/Controller/GramcSessionController.php:        $menu4[] = $sm->gererLaboratoires();
src/Controller/GramcSessionController.php:        $menu4[] = $sm->gererThematiques();
src/Controller/GramcSessionController.php:        $menu4[] = $sm->gererServeurs();
src/Controller/GramcSessionController.php:        $menu4[] = $sm->gererResources();
src/Controller/GramcSessionController.php:        $menu5[] = $sm->statistiquesDyn();
src/Controller/GramcSessionController.php:        $menu5[] = $sm->statistiquesFormation();
src/Controller/GramcSessionController.php:        $menu5[] = $sm->publicationsAnnee();
src/Controller/GramcSessionController.php:        $menu6[] = $sm->lireJournal();
src/Controller/GramcSessionController.php:        $menu6[] = $sm->afficherConnexions();
src/Controller/GramcSessionController.php:        if ($this->getParameter('kernel.debug')) {
src/Controller/GramcSessionController.php:            $menu6[] = $sm->tempsAvancer();
src/Controller/GramcSessionController.php:        $menu6[] = $sm->testerMail();
src/Controller/GramcSessionController.php:        $menu6[] = $sm->phpInfo();
src/Controller/GramcSessionController.php:        $menu6[] = $sm->nettoyerRgpd();
src/Controller/GramcSessionController.php:        return $this->render('default/accueil_admin.html.twig', ['menu1' => $menu1,
src/Controller/GramcSessionController.php:        return $this->render('default/aide.html.twig');
src/Controller/GramcSessionController.php:        $sm = $this->sm;
src/Controller/GramcSessionController.php:        $ss = $this->ss;
src/Controller/GramcSessionController.php:        $sid = $this->sid;
src/Controller/GramcSessionController.php:        $token = $this->ts->getToken();
src/Controller/GramcSessionController.php:            $individu = $token->getUser();
src/Controller/GramcSessionController.php:            if (!$sid->validerProfil($individu)) {
src/Controller/GramcSessionController.php:                return $this->redirectToRoute('profil');
src/Controller/GramcSessionController.php:            $roles = $individu->getRoles();
src/Controller/GramcSessionController.php:                return $this->redirectToRoute('projet_accueil');
src/Controller/GramcSessionController.php:        return $this->render('default/accueil.html.twig');
src/Controller/GramcSessionController.php:        $sj = $this->sj;
src/Controller/GramcSessionController.php:        $em = $this->em;
src/Controller/GramcSessionController.php:        $individu = $this->ts->getToken()->getUser();
src/Controller/GramcSessionController.php:            return $this->redirectToRoute('accueil');
src/Controller/GramcSessionController.php:        $form = $this->createForm(IndividuType::class, $individu, ['mail' => false]);
src/Controller/GramcSessionController.php:        $form->handleRequest($request);
src/Controller/GramcSessionController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/GramcSessionController.php:            if ($old_individu->isPermanent() != $individu->isPermanent() && !$individu->isPermanent()) {
src/Controller/GramcSessionController.php:                $sj->warningMessage(__METHOD__.':'.__LINE__.' '.$individu." cesse d'être permanent !!");
src/Controller/GramcSessionController.php:            if ($old_individu->isFromLaboRegional() != $individu->isFromLaboRegional() && !$individu->isFromLaboRegional()) {
src/Controller/GramcSessionController.php:                $sj->warningMessage(__METHOD__.':'.__LINE__.' '.$individu." cesse d'être d'un labo regional !!");
src/Controller/GramcSessionController.php:            $new_statut = $individu->getStatut();
src/Controller/GramcSessionController.php:            $old_statut = $old_individu->getStatut();
src/Controller/GramcSessionController.php:                $sj->noticeMessage(__METHOD__.':'.__LINE__.' '.$individu.' a changé son statut de '.$old_statut
src/Controller/GramcSessionController.php:            $new_laboratoire = $individu->getLabo();
src/Controller/GramcSessionController.php:            $old_laboratoire = $old_individu->getLabo();
src/Controller/GramcSessionController.php:                $sj->noticeMessage(__METHOD__.':'.__LINE__.' '.$individu.' a changé son laboratoire de '.$old_laboratoire
src/Controller/GramcSessionController.php:            $em->persist($individu);
src/Controller/GramcSessionController.php:            $em->flush();
src/Controller/GramcSessionController.php:            $projetRepository = $em->getRepository(Projet::class);
src/Controller/GramcSessionController.php:            $cvRepository = $em->getRepository(CollaborateurVersion::class);
src/Controller/GramcSessionController.php:            $list_projets = $projetRepository->getProjetsCollab($individu->getId(), true, true);
src/Controller/GramcSessionController.php:                foreach ($projet->getVersion() as $v) {
src/Controller/GramcSessionController.php:                    if (Etat::TERMINE != $v->getEtatVersion() && Etat::ANNULE != $v->getEtatVersion()) {
src/Controller/GramcSessionController.php:                        foreach ($v->getCollaborateurVersion() as $cv) {
src/Controller/GramcSessionController.php:                            $c = $cv->getCollaborateur();
src/Controller/GramcSessionController.php:                            if ($c->isEqualTo($individu)) {
src/Controller/GramcSessionController.php:                                $cv->setStatut($individu->getStatut());
src/Controller/GramcSessionController.php:                                $cv->setLabo($individu->getLabo());
src/Controller/GramcSessionController.php:                                $cv->setEtab($individu->getEtab());
src/Controller/GramcSessionController.php:                                $em->persist($cv);
src/Controller/GramcSessionController.php:                                $em->flush();
src/Controller/GramcSessionController.php:                                if ($cv->getResponsable()) {
src/Controller/GramcSessionController.php:                                    $v->setPrjLLabo(Functions::string_conversion($c->getLabo()));
src/Controller/GramcSessionController.php:                                    $em->persist($v);
src/Controller/GramcSessionController.php:                                    $em->flush();
src/Controller/GramcSessionController.php:            $this->addFlash(
src/Controller/GramcSessionController.php:            return $this->redirectToRoute('profil');
src/Controller/GramcSessionController.php:            return $this->render('default/profil.html.twig', ['form' => $form->createView(), 'individu' => $individu]);
src/Controller/GramcSessionController.php:        $sj = $this->sj;
src/Controller/GramcSessionController.php:        $ff = $this->ff;
src/Controller/GramcSessionController.php:        // Sinon, c'est peut-être qu'on est allé à l'URL nouveau_compte sans être authentifié
src/Controller/GramcSessionController.php:        if (!$request->getSession()->has('eppn')) {
src/Controller/GramcSessionController.php:            $sj->warningMessage(__FILE__.':'.__LINE__." Pas d'eppn dans session");
src/Controller/GramcSessionController.php:            $lg->warning("URL nouveau_compte: Pas d'EPPN", ['request' => $request]);
src/Controller/GramcSessionController.php:            return $this->redirectToRoute('accueil');
src/Controller/GramcSessionController.php:        if ($request->getSession()->has('eppn')) {
src/Controller/GramcSessionController.php:            $eppn = $request->getSession()->get('eppn');
src/Controller/GramcSessionController.php:        if ($request->getSession()->has('mail')) {
src/Controller/GramcSessionController.php:            $email = $request->getSession()->get('mail');
src/Controller/GramcSessionController.php:        // Ce qu'on appelle eppn peut être un autre header (persistent-id par exemple)'
src/Controller/GramcSessionController.php:            $sj->warningMessage(__FILE__.':'.__LINE__." eppn défectueux pour le nouveau compte (eppn=$eppn, mail=$email)");
src/Controller/GramcSessionController.php:            return $this->redirectToRoute('accueil');
src/Controller/GramcSessionController.php:        // Mauvaise adresse - Pas d'ouverture de compte
src/Controller/GramcSessionController.php:        if ('' != $email && !$this->isEmail($email)) {
src/Controller/GramcSessionController.php:            $sj->warningMessage(__FILE__.':'.__LINE__." Adresse mail défectueuse pour le nouveau compte (eppn=$eppn, mail=$email)");
src/Controller/GramcSessionController.php:            return $this->redirectToRoute('accueil');
src/Controller/GramcSessionController.php:        ->add('save', SubmitType::class, ['label' => 'Continuer'])
src/Controller/GramcSessionController.php:        ->getForm();
src/Controller/GramcSessionController.php:        $form->handleRequest($request);
src/Controller/GramcSessionController.php:        if ($form->get('save')->isClicked() && $form->isSubmitted() && $form->isValid()) {
src/Controller/GramcSessionController.php:            return $this->redirectToRoute('nouveau_profil');
src/Controller/GramcSessionController.php:        return $this->render('default/nouveau_compte.html.twig', ['mail' => $email, 'eppn' => $eppn, 'form' => $form->createView()]);
src/Controller/GramcSessionController.php:        $regex = '/^[a-z0-9_%.+-]+@[a-z0-9.-]+\.[a-z]{2,}$/';
src/Controller/GramcSessionController.php:        $sn = $this->sn;
src/Controller/GramcSessionController.php:        $sj = $this->sj;
src/Controller/GramcSessionController.php:        $em = $this->em;
src/Controller/GramcSessionController.php:        $session = $request->getSession();
src/Controller/GramcSessionController.php:        if (!$session->has('eppn')) {
src/Controller/GramcSessionController.php:            $sj->warningMessage(__FILE__.':'.__LINE__."Pas d'eppn pour le nouveau profil");
src/Controller/GramcSessionController.php:            return $this->redirectToRoute('accueil');
src/Controller/GramcSessionController.php:            $eppn = $session->get('eppn');
src/Controller/GramcSessionController.php:        if (!$session->has('mail')) {
src/Controller/GramcSessionController.php:            $sj->warningMessage(__FILE__.':'.__LINE__." Pas d'email pour le nouveau profil");
src/Controller/GramcSessionController.php:            return $this->redirectToRoute('accueil');
src/Controller/GramcSessionController.php:            $mail = $session->get('mail');
src/Controller/GramcSessionController.php:        // Est-ce qu'il y a déjà un compte avec cette adresse ?
src/Controller/GramcSessionController.php:        $individu = $em->getRepository(Individu::class)->findOneBy(['mail' => $mail]);
src/Controller/GramcSessionController.php:            $individu->setMail($session->get('mail'));
src/Controller/GramcSessionController.php:            if ($session->has('sn')) {
src/Controller/GramcSessionController.php:                $individu->setNom($session->get('sn'));
src/Controller/GramcSessionController.php:            if ($individu->getDesactive()) {
src/Controller/GramcSessionController.php:                $sj->errorMessage(__METHOD__.':'.__LINE__." $individu est désactivé - eppn $eppn refusé !");
src/Controller/GramcSessionController.php:                return $this->redirectToRoute('accueil');
src/Controller/GramcSessionController.php:        // $session->set('givenName','ursule');
src/Controller/GramcSessionController.php:        // $session->set('sn','Dupont');
src/Controller/GramcSessionController.php:        if ($session->has('givenName')) {
src/Controller/GramcSessionController.php:            $individu->setPrenom($session->get('givenName'));
src/Controller/GramcSessionController.php:        if ($session->has('given_name')) {
src/Controller/GramcSessionController.php:            $individu->setPrenom($session->get('given_name'));
src/Controller/GramcSessionController.php:        if ($session->has('sn')) {
src/Controller/GramcSessionController.php:            $individu->setNom($session->get('sn'));
src/Controller/GramcSessionController.php:        if ($session->has('family_name')) {
src/Controller/GramcSessionController.php:            $individu->setNom($session->get('family_name'));
src/Controller/GramcSessionController.php:        $form = $this->createForm(IndividuType::class, $individu, ['mail' => false]);
src/Controller/GramcSessionController.php:        $form->handleRequest($request);
src/Controller/GramcSessionController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/GramcSessionController.php:            $em->persist($individu);
src/Controller/GramcSessionController.php:            $sso->setEppn($eppn);
src/Controller/GramcSessionController.php:            $sso->setIndividu($individu);
src/Controller/GramcSessionController.php:            $em->persist($sso);
src/Controller/GramcSessionController.php:            $em->flush();
src/Controller/GramcSessionController.php:                $sj->infoMessage(__METHOD__.':'.__LINE__." Nouvel eppn pour $mail = $eppn");
src/Controller/GramcSessionController.php:                $sj->infoMessage(__METHOD__.':'.__LINE__." Nouvel utilisateur créé: $eppn -> $mail");
src/Controller/GramcSessionController.php:            $sn->sendMessage(
src/Controller/GramcSessionController.php:                'notification/compte_ouvert-sujet.html.twig',
src/Controller/GramcSessionController.php:                'notification/compte_ouvert-contenu.html.twig',
src/Controller/GramcSessionController.php:                // $sj->debugMessage(__FILE__ .':' . __LINE__ . ' Demande de COMPTE CRU - '.$eppn);
src/Controller/GramcSessionController.php:                $dest = $sn->mailUsers(['A']);
src/Controller/GramcSessionController.php:                $sn->sendMessage(
src/Controller/GramcSessionController.php:                    'notification/compte_ouvert_pour_admin-sujet.html.twig',
src/Controller/GramcSessionController.php:                    'notification/compte_ouvert_pour_admin-contenu.html.twig',
src/Controller/GramcSessionController.php:            $session = $request->getSession();
src/Controller/GramcSessionController.php:            $session->remove('eppn');
src/Controller/GramcSessionController.php:            $session->remove('mail');
src/Controller/GramcSessionController.php:            return $this->redirectToRoute('remlogin');
src/Controller/GramcSessionController.php:        return $this->render('default/nouveau_profil.html.twig', ['mail' => $request->getSession()->get('mail'), 'form' => $form->createView()]);
src/Controller/GramcSessionController.php:        $em = $this->em;
src/Controller/GramcSessionController.php:        $sps = $this->sps;
src/Controller/GramcSessionController.php:        $sj = $this->sj;
src/Controller/GramcSessionController.php:        $connexions = $sps->getConnexions();
src/Controller/GramcSessionController.php:        return $this->render('default/connexions.html.twig', ['connexions' => $connexions_uniq]);
src/Controller/GramcSessionController.php:        return $this->render('default/phpinfo.html.twig', ['sfversion' => $sf_version, 'info' => $info]);
src/Controller/GramcSessionController.php:        $em = $this->em;
src/Controller/GramcSessionController.php:        $sj = $this->sj;
src/Controller/GramcSessionController.php:        $ts = $this->ts;
src/Controller/GramcSessionController.php:        if (!$this->validInvit($request, $invitation)) {
src/Controller/GramcSessionController.php:            $ts->setToken(null);
src/Controller/GramcSessionController.php:            // $request->getSession()->invalidate();
src/Controller/GramcSessionController.php:            return $this->redirectToRoute('accueil');
src/Controller/GramcSessionController.php:        // Invitation valide - On vérifie les users
src/Controller/GramcSessionController.php:        $em = $this->em;
src/Controller/GramcSessionController.php:        $invited = $invitation->getInvited();
src/Controller/GramcSessionController.php:        $connected = $this->ts->getToken()->getUser();
src/Controller/GramcSessionController.php:        if ($invited->getId() === $connected->getId()) {
src/Controller/GramcSessionController.php:            $em->remove($invitation);
src/Controller/GramcSessionController.php:            $em->flush();
src/Controller/GramcSessionController.php:            return $this->redirectToRoute('profil');
src/Controller/GramcSessionController.php:            return $this->choisirMail($request, $connected, $invitation);
src/Controller/GramcSessionController.php:     * c'est-à-dire qu'elle existe et qu'elle n'a pas expiré
src/Controller/GramcSessionController.php:        $sj = $this->sj;
src/Controller/GramcSessionController.php:            $request->getSession()->getFlashbag()->add('flash erreur', $message.' - Merci de vous rapprocher de CALMIP');
src/Controller/GramcSessionController.php:            $sj->warningMessage(__METHOD__.':'.__LINE__.$message);
src/Controller/GramcSessionController.php:        // Invitation OK - On vérifie la date
src/Controller/GramcSessionController.php:        $now = $this->grdt;
src/Controller/GramcSessionController.php:        $invit_duree = $this->getParameter('invit_duree');
src/Controller/GramcSessionController.php:        $expiration = $invitation->getCreationStamp()->add(new \DateInterval($invit_duree));
src/Controller/GramcSessionController.php:            $em->remove($invitation);
src/Controller/GramcSessionController.php:            $em->flush();
src/Controller/GramcSessionController.php:            $request->getSession()->getFlashbag()->add('flash erreur', $message.' - Merci de vous rapprocher de CALMIP');
src/Controller/GramcSessionController.php:            $sj->warningMessage(__METHOD__.':'.__LINE__.$message.' de '.$invitation->getInviting().' pour '.$invitation->getInvited());
src/Controller/GramcSessionController.php:        $em = $this->em;
src/Controller/GramcSessionController.php:        $ff = $this->ff;
src/Controller/GramcSessionController.php:        $sid = $this->sid;
src/Controller/GramcSessionController.php:        $sj = $this->sj;
src/Controller/GramcSessionController.php:        $mail_connected = $connected->getMail();
src/Controller/GramcSessionController.php:        $mail_invited = $invitation->getInvited()->getMail();
src/Controller/GramcSessionController.php:                    ->add('mail',
src/Controller/GramcSessionController.php:                ->add('OK', SubmitType::class, ['label' => 'OK'])
src/Controller/GramcSessionController.php:                ->getForm();
src/Controller/GramcSessionController.php:        $form->handleRequest($request);
src/Controller/GramcSessionController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/GramcSessionController.php:            $em->remove($invitation);
src/Controller/GramcSessionController.php:            $em->flush();
src/Controller/GramcSessionController.php:            $mail = $form->getData()['mail'];
src/Controller/GramcSessionController.php:            // On fusionne invité -> connecté puis on supprime le connecté
src/Controller/GramcSessionController.php:            $sid->fusionnerIndividus($invitation->getInvited(), $connected);
src/Controller/GramcSessionController.php:            $em->remove($invitation->getInvited());
src/Controller/GramcSessionController.php:            $em->flush();
src/Controller/GramcSessionController.php:                $connected->setMail($mail_invited);
src/Controller/GramcSessionController.php:                $em->persist($connected);
src/Controller/GramcSessionController.php:                $em->flush();
src/Controller/GramcSessionController.php:            // oups qu'est-ce que c'est que cette adresse ?
src/Controller/GramcSessionController.php:                $message = 'mail connected = '.$connected->getMail().' - mail invited = '.$invitation->getInvited()->getMail().' - réponse au formulaire = '.$mail;
src/Controller/GramcSessionController.php:                $sj->warningMessage(__METHOD__.':'.__LINE__.$message);
src/Controller/GramcSessionController.php:                $request->getSession()->getFlashbag()->add('flash erreur', 'Problème de mail, rapprochez-vous de '.$this->getParameter('mesoc'));
src/Controller/GramcSessionController.php:            return $this->redirectToRoute('profil');
src/Controller/GramcSessionController.php:        return $this->render('individu/repinvit.html.twig',
src/Controller/GramcSessionController.php:             'form' => $form->createView(),
src/Controller/GramcSessionController.php:        $IDPprod = $this->getParameter('IDPprod');
src/Controller/GramcSessionController.php:        $output = $request->getUri();
src/Controller/GramcSessionController.php:        $output = $request->getPathInfo();
src/Controller/GramcSessionController.php:        $request->getSession()->set('admin_red', true);
src/Controller/GramcSessionController.php:        $request->getSession()->set('admin_red', false);
src/Controller/IndividuController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/IndividuController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/IndividuController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $em->remove($individu);
src/Controller/IndividuController.php:        $em->flush();
src/Controller/IndividuController.php:        return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $sid = $this->sid;
src/Controller/IndividuController.php:        $sj = $this->sj;
src/Controller/IndividuController.php:        $ff = $this->ff;
src/Controller/IndividuController.php:        $session = $request->getSession();
src/Controller/IndividuController.php:            ->createNamedBuilder('autocomplete_form', FormType::class, [])
src/Controller/IndividuController.php:            ->add(
src/Controller/IndividuController.php:            ->getForm();
src/Controller/IndividuController.php:        if ($session->has('new_mail')) {
src/Controller/IndividuController.php:            $form->add(
src/Controller/IndividuController.php:                'required' => false, 'csrf_protection' => false, 'attr' => ['value' => $session->get('new_mail')],
src/Controller/IndividuController.php:            $session->remove('new_mail');
src/Controller/IndividuController.php:            $form->add(
src/Controller/IndividuController.php:        $CollaborateurVersion = $em->getRepository(CollaborateurVersion::class)->findBy(['collaborateur' => $individu]);
src/Controller/IndividuController.php:        $Expertise = $em->getRepository(Expertise::class)->findBy(['expert' => $individu]);
src/Controller/IndividuController.php:        $Journal = $em->getRepository(Journal::class)->findBy(['individu' => $individu]);
src/Controller/IndividuController.php:        $Rallonge = $em->getRepository(Rallonge::class)->findBy(['expert' => $individu]);
src/Controller/IndividuController.php:        $Sso = $em->getRepository(Sso::class)->findBy(['individu' => $individu]);
src/Controller/IndividuController.php:        $Thematique = $individu->getThematique();
src/Controller/IndividuController.php:            foreach ($individu->getThematique() as $item) {
src/Controller/IndividuController.php:                $em->persist($item);
src/Controller/IndividuController.php:                $item->getExpert()->removeElement($individu);
src/Controller/IndividuController.php:                $em->remove($item);
src/Controller/IndividuController.php:                $em->remove($individu);
src/Controller/IndividuController.php:                $em->flush();
src/Controller/IndividuController.php:                $request->getSession()->getFlashbag()->add('flash erreur', $e->getMessage());
src/Controller/IndividuController.php:                $sj->warningMessage('Utilisateur '.$individu.' ('.$individu->getIdIndividu().') ne peut être effacé ');
src/Controller/IndividuController.php:            $request->getSession()->getFlashbag()->add('flash info', $individu.' supprimé');
src/Controller/IndividuController.php:            $sj->infoMessage("Utilisateur $individu effacé");
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:        $form->handleRequest($request);
src/Controller/IndividuController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/IndividuController.php:            $mail = $form->getData()['mail'];
src/Controller/IndividuController.php:            $new_individu = $em->getRepository(Individu::class)->findOneBy(['mail' => $mail]);
src/Controller/IndividuController.php:                    $sid->fusionnerIndividus($individu, $new_individu);
src/Controller/IndividuController.php:                    $em->remove($individu);
src/Controller/IndividuController.php:                    $em->flush();
src/Controller/IndividuController.php:                    $request->getSession()->getFlashbag()->add('flash erreur', $e->getMessage());
src/Controller/IndividuController.php:                    $sj->warningMessage('Utilisateur '.$individu.' ('.$individu->getIdIndividu().') ne peut être effacé ');
src/Controller/IndividuController.php:                $request->getSession()->getFlashbag()->add('flash info', $individu.' supprimé');
src/Controller/IndividuController.php:                $sj->infoMessage('Utilisateur '.$individu.'('.$individu->getIdIndividu()
src/Controller/IndividuController.php:                .') fusionné vers '.$new_individu.' ('.$new_individu->getIdIndividu().')');
src/Controller/IndividuController.php:                return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:        return $this->render(
src/Controller/IndividuController.php:                'form' => $form->createView(),
src/Controller/IndividuController.php:                'Thematique' => $Thematique->toArray(),
src/Controller/IndividuController.php:        $form = $this->createDeleteForm($individu);
src/Controller/IndividuController.php:        $form->handleRequest($request);
src/Controller/IndividuController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/IndividuController.php:            $em = $this->em;
src/Controller/IndividuController.php:            $em->remove($individu);
src/Controller/IndividuController.php:            $em->flush($individu);
src/Controller/IndividuController.php:        return $this->redirectToRoute('individu_index');
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $individus = $em->getRepository(Individu::class)->findAll();
src/Controller/IndividuController.php:        return $this->render('individu/index.html.twig', [
src/Controller/IndividuController.php:        $form = $this->createForm('App\Form\IndividuType', $individu);
src/Controller/IndividuController.php:        $form->handleRequest($request);
src/Controller/IndividuController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/IndividuController.php:            $em = $this->em;
src/Controller/IndividuController.php:            $em->persist($individu);
src/Controller/IndividuController.php:            $em->flush($individu);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_show', ['id' => $individu->getId()]);
src/Controller/IndividuController.php:        return $this->render('individu/new.html.twig', [
src/Controller/IndividuController.php:            'form' => $form->createView(),
src/Controller/IndividuController.php:        $deleteForm = $this->createDeleteForm($individu);
src/Controller/IndividuController.php:        return $this->render('individu/show.html.twig', [
src/Controller/IndividuController.php:            'delete_form' => $deleteForm->createView(),
src/Controller/IndividuController.php:        $deleteForm = $this->createDeleteForm($individu);
src/Controller/IndividuController.php:        $editForm = $this->createForm('App\Form\IndividuType', $individu);
src/Controller/IndividuController.php:        $editForm->handleRequest($request);
src/Controller/IndividuController.php:        if ($editForm->isSubmitted() && $editForm->isValid()) {
src/Controller/IndividuController.php:            $this->em->flush();
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_edit', ['id' => $individu->getId()]);
src/Controller/IndividuController.php:        return $this->render('individu/edit.html.twig', [
src/Controller/IndividuController.php:            'edit_form' => $editForm->createView(),
src/Controller/IndividuController.php:            'delete_form' => $deleteForm->createView(),
src/Controller/IndividuController.php:        return $this->createFormBuilder()
src/Controller/IndividuController.php:            ->setAction($this->generateUrl('individu_delete', ['id' => $individu->getId()]))
src/Controller/IndividuController.php:            ->setMethod('DELETE')
src/Controller/IndividuController.php:            ->getForm()
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $editForm = $this->createForm('App\Form\IndividuType', $individu);
src/Controller/IndividuController.php:        $editForm->handleRequest($request);
src/Controller/IndividuController.php:        if ($editForm->isSubmitted() /* && $editForm->isValid() */) {
src/Controller/IndividuController.php:            $individu->setCreationStamp(new \DateTime());
src/Controller/IndividuController.php:            $em->persist($individu);
src/Controller/IndividuController.php:            $em->flush();
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:        return $this->render(
src/Controller/IndividuController.php:            'formInd' => $editForm->createView(),
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $repos = $em->getRepository(Individu::class);
src/Controller/IndividuController.php:        $formInd = $this->createForm('App\Form\IndividuType', $individu);
src/Controller/IndividuController.php:        $session = $request->getSession();
src/Controller/IndividuController.php:        $formInd->handleRequest($request);
src/Controller/IndividuController.php:        if ($formInd->isSubmitted() /* && $editForm->isValid() */) {
src/Controller/IndividuController.php:                $em->flush();
src/Controller/IndividuController.php:                $session->set('new_mail', $individu->getMail());
src/Controller/IndividuController.php:                return $this->redirectToRoute('remplacer_utilisateur', ['id' => $individu->getIdIndividu()]);
src/Controller/IndividuController.php:                return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:        $formSso = $this->ajoutEppn($request, $individu);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_modify', ['id' => $individu->getId()]);
src/Controller/IndividuController.php:        $ssos = $individu->getSso();
src/Controller/IndividuController.php:        $formEppn = $this->createFormBuilder($individu)
src/Controller/IndividuController.php:            ->add(
src/Controller/IndividuController.php:                'choices' => $individu->getSso(),
src/Controller/IndividuController.php:                'choice_label' => function ($s) { return $s->getEppn(); },
src/Controller/IndividuController.php:            ->add('submit', SubmitType::class, ['label' => 'modifier'])
src/Controller/IndividuController.php:            ->add('reset', ResetType::class, ['label' => 'Annuler'])
src/Controller/IndividuController.php:            ->getForm();
src/Controller/IndividuController.php:        $formEppn->handleRequest($request);
src/Controller/IndividuController.php:        if ($formEppn->isSubmitted() && $formEppn->isValid()) {
src/Controller/IndividuController.php:                if (!$ssos->contains($s)) {
src/Controller/IndividuController.php:                    $em->remove($s);
src/Controller/IndividuController.php:            $em->flush();
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_modify', ['id' => $individu->getId()]);
src/Controller/IndividuController.php:        return $this->render(
src/Controller/IndividuController.php:            'formInd' => $formInd->createView(),
src/Controller/IndividuController.php:            'formEppn' => $formEppn->createView(),
src/Controller/IndividuController.php:            'formSso' => $formSso->createView(),
src/Controller/IndividuController.php:        $token = $this->tok->getToken();
src/Controller/IndividuController.php:        $user = $token->getUser();
src/Controller/IndividuController.php:        $this->si->sendInvitation($user, $individu);
src/Controller/IndividuController.php:        $request->getSession()->getFlashbag()->add('flash info', "Invitation envoyée à $individu");
src/Controller/IndividuController.php:        return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $invitations = $em->getRepository(Invitation::class)->findAll();
src/Controller/IndividuController.php:        $invit_duree = $this->getParameter('invit_duree');
src/Controller/IndividuController.php:        return $this->render('individu/invitations.html.twig', ['invitations' => $invitations, 'duree' => $duree]);
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $em->remove($invitation);
src/Controller/IndividuController.php:        $em->flush();
src/Controller/IndividuController.php:        return $this->redirectToRoute('invitations');
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $sso->setIndividu($individu);
src/Controller/IndividuController.php:        $formSso = $this->createForm('App\Form\SsoType', $sso, ['widget_individu' => false]);
src/Controller/IndividuController.php:            ->add('submit', SubmitType::class, ['label' => 'nouvel EPPN'])
src/Controller/IndividuController.php:            ->add('reset', ResetType::class, ['label' => 'Annuler']);
src/Controller/IndividuController.php:        $formSso->handleRequest($request);
src/Controller/IndividuController.php:        if ($formSso->isSubmitted() && $formSso->isValid()) {
src/Controller/IndividuController.php:            $em->persist($sso);
src/Controller/IndividuController.php:                $em->flush($sso);
src/Controller/IndividuController.php:                $request->getSession()->getFlashbag()->add('flash erreur', 'Cet eppn existe déjà !');
src/Controller/IndividuController.php:        $individu->setAdmin(true);
src/Controller/IndividuController.php:        $individu->setObs(false);    // Pas la peine d'être Observateur si on est admin !
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $em->persist($individu);
src/Controller/IndividuController.php:        $em->flush($individu);
src/Controller/IndividuController.php:        if ($request->isXmlHttpRequest()) {
src/Controller/IndividuController.php:            return $this->render('individu/ligne.html.twig', ['individu' => $individu]);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:        $individu->setAdmin(false);
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $em->persist($individu);
src/Controller/IndividuController.php:        $em->flush($individu);
src/Controller/IndividuController.php:        if ($request->isXmlHttpRequest()) {
src/Controller/IndividuController.php:            return $this->render('individu/ligne.html.twig', ['individu' => $individu]);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:        $individu->setObs(true);
src/Controller/IndividuController.php:        $individu->setAdmin(false); // Si on devient Observateur on n'est plus admin !
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $em->persist($individu);
src/Controller/IndividuController.php:        $em->flush($individu);
src/Controller/IndividuController.php:        if ($request->isXmlHttpRequest()) {
src/Controller/IndividuController.php:            return $this->render('individu/ligne.html.twig', ['individu' => $individu]);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:        $individu->setObs(false);
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $em->persist($individu);
src/Controller/IndividuController.php:        $em->flush($individu);
src/Controller/IndividuController.php:        if ($request->isXmlHttpRequest()) {
src/Controller/IndividuController.php:            return $this->render('individu/ligne.html.twig', ['individu' => $individu]);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:        $individu->setSysadmin(true);
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $em->persist($individu);
src/Controller/IndividuController.php:        $em->flush($individu);
src/Controller/IndividuController.php:        if ($request->isXmlHttpRequest()) {
src/Controller/IndividuController.php:            return $this->render('individu/ligne.html.twig', ['individu' => $individu]);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:        $individu->setSysadmin(false);
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $em->persist($individu);
src/Controller/IndividuController.php:        $em->flush($individu);
src/Controller/IndividuController.php:        if ($request->isXmlHttpRequest()) {
src/Controller/IndividuController.php:            return $this->render('individu/ligne.html.twig', ['individu' => $individu]);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:     * Devenir President - PAS UTILISE.
src/Controller/IndividuController.php:        $individu->setPresident(true);
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $em->persist($individu);
src/Controller/IndividuController.php:        $em->flush($individu);
src/Controller/IndividuController.php:        if ($request->isXmlHttpRequest()) {
src/Controller/IndividuController.php:            return $this->render('individu/ligne.html.twig', ['individu' => $individu]);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:     * Cesser d'être President - PAS UTILISE.
src/Controller/IndividuController.php:        $individu->setPresident(false);
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $em->persist($individu);
src/Controller/IndividuController.php:        $em->flush($individu);
src/Controller/IndividuController.php:        if ($request->isXmlHttpRequest()) {
src/Controller/IndividuController.php:            return $this->render('individu/ligne.html.twig', ['individu' => $individu]);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:     * Devenir Expert - PAS UTILISE.
src/Controller/IndividuController.php:        $individu->setExpert(true);
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $em->persist($individu);
src/Controller/IndividuController.php:        $em->flush($individu);
src/Controller/IndividuController.php:        if ($request->isXmlHttpRequest()) {
src/Controller/IndividuController.php:            return $this->render('individu/ligne.html.twig', ['individu' => $individu]);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:     * Cesser d'être Expert - PAS UTILISE.
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $se = $this->se;
src/Controller/IndividuController.php:        $individu->setExpert(false);
src/Controller/IndividuController.php:        $em->persist($individu);
src/Controller/IndividuController.php:        // TODO - Appeler ICI noThematique les autres appels sont sans doute inutiles !
src/Controller/IndividuController.php:        $se->noThematique($individu);
src/Controller/IndividuController.php:        $em->flush();
src/Controller/IndividuController.php:        return $this->render('individu/ligne.html.twig', ['individu' => $individu]);
src/Controller/IndividuController.php:        $individu->setValideur(true);
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $em->persist($individu);
src/Controller/IndividuController.php:        $em->flush($individu);
src/Controller/IndividuController.php:        if ($request->isXmlHttpRequest()) {
src/Controller/IndividuController.php:            return $this->render('individu/ligne.html.twig', ['individu' => $individu]);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $se = $this->se;
src/Controller/IndividuController.php:        $individu->setValideur(false);
src/Controller/IndividuController.php:        $em->persist($individu);
src/Controller/IndividuController.php:        $em->flush();
src/Controller/IndividuController.php:        if ($request->isXmlHttpRequest()) {
src/Controller/IndividuController.php:            return $this->render('individu/ligne.html.twig', ['individu' => $individu]);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:        $individu->setDesactive(false);
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $em->persist($individu);
src/Controller/IndividuController.php:        $em->flush($individu);
src/Controller/IndividuController.php:        if ($request->isXmlHttpRequest()) {
src/Controller/IndividuController.php:            return $this->render('individu/ligne.html.twig', ['individu' => $individu]);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $individu->setDesactive(true);
src/Controller/IndividuController.php:        // $ssos = $individu->getSso();
src/Controller/IndividuController.php:        //    $em->remove($sso);
src/Controller/IndividuController.php:        $em->persist($individu);
src/Controller/IndividuController.php:        $em->flush($individu);
src/Controller/IndividuController.php:        if ($request->isXmlHttpRequest()) {
src/Controller/IndividuController.php:            return $this->render('individu/ligne.html.twig', ['individu' => $individu]);
src/Controller/IndividuController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/IndividuController.php:     * Affecter l'individu à une ou des thematiques - PAS UTILISE.
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $form = $this->createFormBuilder($individu)
src/Controller/IndividuController.php:            ->add(
src/Controller/IndividuController.php:            ->add('submit', SubmitType::class, ['label' => 'modifier'])
src/Controller/IndividuController.php:            ->add('reset', ResetType::class, ['label' => 'reset'])
src/Controller/IndividuController.php:            ->getForm();
src/Controller/IndividuController.php:        $form->handleRequest($request);
src/Controller/IndividuController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/IndividuController.php:            $all_thematiques = $em->getRepository(Thematique::class)->findAll();
src/Controller/IndividuController.php:            $my_thematiques = $individu->getThematique();
src/Controller/IndividuController.php:                if ($my_thematiques->contains($thematique)) {
src/Controller/IndividuController.php:                    $thematique->addExpert($individu);
src/Controller/IndividuController.php:                    $thematique->removeExpert($individu);
src/Controller/IndividuController.php:            $em->flush();
src/Controller/IndividuController.php:        return $this->render(
src/Controller/IndividuController.php:            'form' => $form->createView(),
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $ssos = $individu->getSso();
src/Controller/IndividuController.php:        $form = $this->createFormBuilder($individu)
src/Controller/IndividuController.php:            ->add(
src/Controller/IndividuController.php:            ->add('submit', SubmitType::class, ['label' => 'modifier'])
src/Controller/IndividuController.php:            ->add('reset', ResetType::class, ['label' => 'reset'])
src/Controller/IndividuController.php:            ->getForm();
src/Controller/IndividuController.php:        $form->handleRequest($request);
src/Controller/IndividuController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/IndividuController.php:            $all_thematiques = $em->getRepository(Thematique::class)->findAll();
src/Controller/IndividuController.php:            $my_thematiques = $individu->getThematique();
src/Controller/IndividuController.php:                if ($my_thematiques->contains($thematique)) {
src/Controller/IndividuController.php:                    $thematique->addExpert($individu);
src/Controller/IndividuController.php:                    $thematique->removeExpert($individu);
src/Controller/IndividuController.php:            $em->flush();
src/Controller/IndividuController.php:        return $this->render(
src/Controller/IndividuController.php:            'form' => $form->createView(),
src/Controller/IndividuController.php:        $sj = $this->sj;
src/Controller/IndividuController.php:        $ff = $this->ff;
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:            ->createNamedBuilder('autocomplete_form', FormType::class, [])
src/Controller/IndividuController.php:            ->add('mail', TextType::class, ['required' => true, 'csrf_protection' => false])
src/Controller/IndividuController.php:            ->getForm();
src/Controller/IndividuController.php:        $form->handleRequest($request);
src/Controller/IndividuController.php:        if ($form->isSubmitted()) { // TODO - nous ne pouvons pas ajouter $form->isValid() et nous ne savons pas pourquoi
src/Controller/IndividuController.php:            if (array_key_exists('mail', $form->getData())) {
src/Controller/IndividuController.php:                $data = $em->getRepository(Individu::class)->liste_mail_like($form->getData()['mail']);
src/Controller/IndividuController.php:            $response->headers->set('Content-Type', 'application/json');
src/Controller/IndividuController.php:        // TODO - IndividuForm n'est PAS un objet de type Form !!!! Grrrrr
src/Controller/IndividuController.php:        if ($this->getParameter('resp_peut_modif_collabs')) {
src/Controller/IndividuController.php:        $form = $this->createForm('App\Form\IndividuFormType', $collaborateur, ['csrf_protection' => false, 'text_fields' => $text_fields]);
src/Controller/IndividuController.php:        $form->handleRequest($request);
src/Controller/IndividuController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/IndividuController.php:            $individu = $em->getRepository(Individu::class)->findOneBy(['mail' => $collaborateur->getMail()]);
src/Controller/IndividuController.php:                if (null != $individu->getMail()) {
src/Controller/IndividuController.php:                    $collaborateur->setMail($individu->getMail());
src/Controller/IndividuController.php:                if (null != $individu->getPrenom()) {
src/Controller/IndividuController.php:                    $collaborateur->setPrenom($individu->getPrenom());
src/Controller/IndividuController.php:                if (null != $individu->getNom()) {
src/Controller/IndividuController.php:                    $collaborateur->setNom($individu->getNom());
src/Controller/IndividuController.php:                if (null != $individu->getStatut()) {
src/Controller/IndividuController.php:                    $collaborateur->setStatut($individu->getStatut());
src/Controller/IndividuController.php:                if (null != $individu->getLabo()) {
src/Controller/IndividuController.php:                    $collaborateur->setLaboratoire($individu->getLabo());
src/Controller/IndividuController.php:                if (null != $individu->getEtab()) {
src/Controller/IndividuController.php:                    $collaborateur->setEtablissement($individu->getEtab());
src/Controller/IndividuController.php:                if (null != $individu->getId()) {
src/Controller/IndividuController.php:                    $collaborateur->setId($individu->getId());
src/Controller/IndividuController.php:                if ($this->getParameter('resp_peut_modif_collabs')) {
src/Controller/IndividuController.php:                $form = $this->createForm('App\Form\IndividuFormType', $collaborateur, ['csrf_protection' => false, 'text_fields' => $text_fields]);
src/Controller/IndividuController.php:                return $this->render('version/collaborateurs_ligne.html.twig', ['form' => $form->createView()]);
src/Controller/IndividuController.php:        $ff = $this->ff;
src/Controller/IndividuController.php:        $em = $this->em;
src/Controller/IndividuController.php:        $form = $ff->createNamedBuilder('tri', GererUtilisateurType::class, [], [])->getform();
src/Controller/IndividuController.php:        // $form = Functions::getFormBuilder($ff, 'tri', GererUtilisateurType::class, [])->getForm();
src/Controller/IndividuController.php:        $form->handleRequest($request);
src/Controller/IndividuController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/IndividuController.php:            if (true == $form->getData()['all']) {
src/Controller/IndividuController.php:                $users = $em->getRepository(Individu::class)->findAll();
src/Controller/IndividuController.php:                $users = $em->getRepository(Individu::class)->getActiveUsers();
src/Controller/IndividuController.php:            $pattern = '/'.$form->getData()['filtre'].'/i';
src/Controller/IndividuController.php:                if (preg_match($pattern, $individu->getMail())) {
src/Controller/IndividuController.php:                } elseif (preg_match($pattern, $individu->getNom())) {
src/Controller/IndividuController.php:                } elseif (preg_match($pattern, $individu->getPrenom())) {
src/Controller/IndividuController.php:            $individus = $em->getRepository(Individu::class)->getActiveUsers();
src/Controller/IndividuController.php:        $total = $em->getRepository(Individu::class)->countAll();
src/Controller/IndividuController.php:            $individu_ssos = $individu->getSso()->toArray();
src/Controller/IndividuController.php:            if (count($individu_ssos) > 0 && false == $individu->getDesactive()) {
src/Controller/IndividuController.php:                        $str = $value->__toString();
src/Controller/IndividuController.php:        return $this->render(
src/Controller/IndividuController.php:            'form' => $form->createView(),
src/Controller/IndividuController.php:        return $sso->__toString();
src/Controller/JournalController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/JournalController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/JournalController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/JournalController.php:        $data = $this->index($request);
src/Controller/JournalController.php:        return $this->render(
src/Controller/JournalController.php:            'form' => $data['form']->createView(),
src/Controller/JournalController.php:        $data = $this->index($request);
src/Controller/JournalController.php:            'form' => $data['form']->createView(),
src/Controller/JournalController.php:        $form = $this->createForm('App\Form\JournalType', $journal);
src/Controller/JournalController.php:        $form->handleRequest($request);
src/Controller/JournalController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/JournalController.php:            $em = $this->em;
src/Controller/JournalController.php:            $em->persist($journal);
src/Controller/JournalController.php:            $em->flush($journal);
src/Controller/JournalController.php:            return $this->redirectToRoute('journal_show', ['id' => $journal->getId()]);
src/Controller/JournalController.php:        return $this->render('journal/new.html.twig', [
src/Controller/JournalController.php:            'form' => $form->createView(),
src/Controller/JournalController.php:        $deleteForm = $this->createDeleteForm($journal);
src/Controller/JournalController.php:        return $this->render('journal/show.html.twig', [
src/Controller/JournalController.php:            'delete_form' => $deleteForm->createView(),
src/Controller/JournalController.php:        $deleteForm = $this->createDeleteForm($journal);
src/Controller/JournalController.php:        $editForm = $this->createForm('App\Form\JournalType', $journal);
src/Controller/JournalController.php:        $editForm->handleRequest($request);
src/Controller/JournalController.php:        if ($editForm->isSubmitted() && $editForm->isValid()) {
src/Controller/JournalController.php:            $this->em->flush();
src/Controller/JournalController.php:            return $this->redirectToRoute('journal_edit', ['id' => $journal->getId()]);
src/Controller/JournalController.php:        return $this->render('journal/edit.html.twig', [
src/Controller/JournalController.php:            'edit_form' => $editForm->createView(),
src/Controller/JournalController.php:            'delete_form' => $deleteForm->createView(),
src/Controller/JournalController.php:        $form = $this->createDeleteForm($journal);
src/Controller/JournalController.php:        $form->handleRequest($request);
src/Controller/JournalController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/JournalController.php:            $em = $this->em;
src/Controller/JournalController.php:            $em->remove($journal);
src/Controller/JournalController.php:            $em->flush($journal);
src/Controller/JournalController.php:        return $this->redirectToRoute('journal_index');
src/Controller/JournalController.php:        return $this->createFormBuilder()
src/Controller/JournalController.php:            ->setAction($this->generateUrl('journal_delete', ['id' => $journal->getId()]))
src/Controller/JournalController.php:            ->setMethod('DELETE')
src/Controller/JournalController.php:            ->getForm()
src/Controller/JournalController.php:        $ff = $this->ff;
src/Controller/JournalController.php:        $em = $this->em;
src/Controller/JournalController.php:        // $form = Functions::getFormBuilder($ff, 'jnl_requetes', SelectJournalType::class, [] )->getForm();
src/Controller/JournalController.php:        $form = $ff->createNamedBuilder('jnl_requetes', SelectJournalType::class, null, [])->getForm();
src/Controller/JournalController.php:        $form->handleRequest($request);
src/Controller/JournalController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/JournalController.php:            $data = $form->getData();
src/Controller/JournalController.php:            $data['dateFin']->add(\DateInterval::createFromDateString('1 day')); // attention, cette valeur remplacée par la valeur dans Form/SelectJournalType
src/Controller/JournalController.php:        $journals = $em->getRepository(Journal::class)->findData($data['dateDebut'], $data['dateFin'], $data['niveau']);
src/Controller/LaboratoireController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/LaboratoireController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/LaboratoireController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/LaboratoireController.php:        $ac = $this->ac;
src/Controller/LaboratoireController.php:        $em = $this->em;
src/Controller/LaboratoireController.php:        $menu = ($ac->isGranted('ROLE_ADMIN') or $ac->isGranted('ROLE_VALIDEUR')) ? [['ok' => true, 'name' => 'ajouter_laboratoire', 'lien' => 'Ajouter un laboratoire', 'commentaire' => 'Ajouter un laboratoire']] : [];
src/Controller/LaboratoireController.php:        return $this->render(
src/Controller/LaboratoireController.php:            'laboratoires' => $em->getRepository(Laboratoire::class)->findBy([], ['numeroLabo' => 'ASC']),
src/Controller/LaboratoireController.php:        $form = $this->createForm('App\Form\LaboratoireType', $laboratoire, ['ajouter' => true]);
src/Controller/LaboratoireController.php:        $form->handleRequest($request);
src/Controller/LaboratoireController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/LaboratoireController.php:            $em = $this->em;
src/Controller/LaboratoireController.php:            $em->persist($laboratoire);
src/Controller/LaboratoireController.php:                return $this->redirectToRoute('modifier_laboratoire', ['id' => $laboratoire->getId()]);
src/Controller/LaboratoireController.php:        return $this->render(
src/Controller/LaboratoireController.php:            'form' => $form->createView(),
src/Controller/LaboratoireController.php:        $em = $this->em;
src/Controller/LaboratoireController.php:        $editForm = $this->createForm('App\Form\LaboratoireType', $laboratoire, ['modifier' => true]);
src/Controller/LaboratoireController.php:        $editForm->handleRequest($request);
src/Controller/LaboratoireController.php:        if ($editForm->isSubmitted() && $editForm->isValid()) {
src/Controller/LaboratoireController.php:                return $this->redirectToRoute('gerer_laboratoires');
src/Controller/LaboratoireController.php:        $formAdr = $this->ajoutAdresseIp($request, $laboratoire);
src/Controller/LaboratoireController.php:            return $this->redirectToRoute('modifier_laboratoire', ['id' => $laboratoire->getId()]);
src/Controller/LaboratoireController.php:        $formSadr = $this->supprAdressesIp($request, $laboratoire);
src/Controller/LaboratoireController.php:            return $this->redirectToRoute('modifier_laboratoire', ['id' => $laboratoire->getId()]);
src/Controller/LaboratoireController.php:        return $this->render(
src/Controller/LaboratoireController.php:            'form' => $editForm->createView(),
src/Controller/LaboratoireController.php:            'formAdr' => $formAdr->createView(),
src/Controller/LaboratoireController.php:            'formSadr' => $formSadr->createView(),
src/Controller/LaboratoireController.php:     * Ajout d'une nouvelle plage ip - Si le formulaire est traité on renvoie null, ce qui
src/Controller/LaboratoireController.php:        $em = $this->em;
src/Controller/LaboratoireController.php:        $adresseip->setLabo($laboratoire);
src/Controller/LaboratoireController.php:        $formAdr = $this->createForm('App\Form\AdresseipType', $adresseip, ['widget_laboratoire' => false]);
src/Controller/LaboratoireController.php:        $formAdr->handleRequest($request);
src/Controller/LaboratoireController.php:        if ($formAdr->isSubmitted() && $formAdr->isValid()) {
src/Controller/LaboratoireController.php:            $em->persist($adresseip);
src/Controller/LaboratoireController.php:                $em->flush($adresseip);
src/Controller/LaboratoireController.php:                $msg = 'Ajout impossible - Adresse dupliquée ?';
src/Controller/LaboratoireController.php:                $request->getSession()->getFlashbag()->add('flash erreur', $msg);
src/Controller/LaboratoireController.php:     * Suppression d'une ou plusieurs plages IP - Si le formulaire est traité on renvoie null, ce qui
src/Controller/LaboratoireController.php:        $em = $this->em;
src/Controller/LaboratoireController.php:        $adresses = $laboratoire->getAdresseip();
src/Controller/LaboratoireController.php:        $formSadr = $this->createFormBuilder($laboratoire)
src/Controller/LaboratoireController.php:            ->add(
src/Controller/LaboratoireController.php:                'choices' => $laboratoire->getAdresseip(),
src/Controller/LaboratoireController.php:                'choice_label' => function ($s) { return $s->getAdresse(); },
src/Controller/LaboratoireController.php:            ->add('submit', SubmitType::class, ['label' => 'Supprimer'])
src/Controller/LaboratoireController.php:            ->add('reset', ResetType::class, ['label' => 'Annuler'])
src/Controller/LaboratoireController.php:            ->getForm();
src/Controller/LaboratoireController.php:        $formSadr->handleRequest($request);
src/Controller/LaboratoireController.php:        if ($formSadr->isSubmitted() && $formSadr->isValid()) {
src/Controller/LaboratoireController.php:                if (!$adresses->contains($adr)) {
src/Controller/LaboratoireController.php:                    $em->remove($adr);
src/Controller/LaboratoireController.php:            $em->flush();
src/Controller/LaboratoireController.php:        $em = $this->em;
src/Controller/LaboratoireController.php:        $em->remove($laboratoire);
src/Controller/LaboratoireController.php:            $em->flush();
src/Controller/LaboratoireController.php:            $msg = 'Suppression impossbile - Il reste probablement des individus appartenant à ce laboratoire';
src/Controller/LaboratoireController.php:            $request->getSession()->getFlashbag()->add('flash erreur', $msg);
src/Controller/LaboratoireController.php:        return $this->redirectToRoute('gerer_laboratoires');
src/Controller/LoginController.php:     * Login "remote" - saml2 (shibboleth) ou openid (iam).
src/Controller/LoginController.php:        $this->sj->InfoMessage("remote login d'un utilisateur");
src/Controller/LoginController.php:        if ($request->getSession()->has('url')) {
src/Controller/LoginController.php:            return $this->redirect($request->getSession()->get('url'));
src/Controller/LoginController.php:            return $this->redirectToRoute('accueil');
src/Controller/LoginController.php:        $sj = $this->sj;
src/Controller/LoginController.php:        $ac = $this->ac;
src/Controller/LoginController.php:        $ts = $this->ts;
src/Controller/LoginController.php:        $session = $request->getSession();
src/Controller/LoginController.php:        if ($ac->isGranted('IS_IMPERSONATOR')) {
src/Controller/LoginController.php:            $sudo_url = $session->get('sudo_url');
src/Controller/LoginController.php:            $real_user = $ts->getToken()->getOriginalToken()->getUser();
src/Controller/LoginController.php:            $sj->infoMessage(__METHOD__.':'.__LINE__." déconnexion d'un utilisateur en SUDO vers ".$real_user);
src/Controller/LoginController.php:        elseif ($ac->isGranted('IS_AUTHENTICATED_FULLY')) {
src/Controller/LoginController.php:            $sj->infoMessage(__METHOD__.':'.__LINE__." déconnexion de l'utilisateur ".$ts->getToken()->getUser());
src/Controller/LoginController.php:            $ts->setToken(null);
src/Controller/LoginController.php:            $session->invalidate();
src/Controller/LoginController.php:            return $this->render('default/deconnexion.html.twig');
src/Controller/LoginController.php:            return new RedirectResponse($this->generateUrl('accueil'));
src/Controller/LoginController.php:        return $this->render('login/erreur_login.html.twig');
src/Controller/LoginController.php:        $sj = $this->sj;
src/Controller/LoginController.php:        $ff = $this->ff;
src/Controller/LoginController.php:        $mode_auth = $this->getParameter('mode_auth');
src/Controller/LoginController.php:            return $this->redirectToRoute('remlogin');
src/Controller/LoginController.php:                    ->add(
src/Controller/LoginController.php:                     'choices' => $this->getParameter('IDPprod'),
src/Controller/LoginController.php:                ->add('connect', SubmitType::class, ['label' => 'Connexion *'])
src/Controller/LoginController.php:                ->getForm();
src/Controller/LoginController.php:            $form->handleRequest($request);
src/Controller/LoginController.php:            if ($form->isSubmitted() && $form->isValid()) {
src/Controller/LoginController.php:                $url = $request->getSchemeAndHttpHost();
src/Controller/LoginController.php:                $url .= $this->generateUrl('remlogin');
src/Controller/LoginController.php:                if ('WAYF' != $form->getData()['data']) {
src/Controller/LoginController.php:                    $url = $url.'&providerId='.$form->getData()['data'];
src/Controller/LoginController.php:                $sj->debugMessage(__FILE__.':'.__LINE__.' URL remlogin = '.$url);
src/Controller/LoginController.php:                return $this->redirect($url);
src/Controller/LoginController.php:            return $this->render(
src/Controller/LoginController.php:                ['form' => $form->createView()]
src/Controller/LoginController.php:        $em = $this->em;
src/Controller/LoginController.php:        $ff = $this->ff;
src/Controller/LoginController.php:        if (false === $this->getParameter('kernel.debug')) {
src/Controller/LoginController.php:            $sj->errorMessage(__METHOD__.':'.__LINE__.' tentative de se connecter connection_debug - Mode DEBUG FALSE');
src/Controller/LoginController.php:            return $this->redirectToRoute('accueil');
src/Controller/LoginController.php:        $repository = $this->em->getRepository(Individu::class);
src/Controller/LoginController.php:        $experts    = $repository->findBy(['expert'   => true ]);
src/Controller/LoginController.php:        $valideurs  = $repository->findBy(['valideur' => true ]);
src/Controller/LoginController.php:        $admins     = $repository->findBy(['admin'    => true ]);
src/Controller/LoginController.php:        $obs        = $repository->findby(['obs'      => true ]);
src/Controller/LoginController.php:        $sysadmins  = $repository->findby(['sysadmin' => true ]);
src/Controller/LoginController.php:        // Pour le moment - Tous les utilisateurs
src/Controller/LoginController.php:        $users = $repository->findAll();
src/Controller/LoginController.php:        // TODO - Il doit y avoir plus élégant
src/Controller/LoginController.php:            $choices[$u->getPrenom().' '.$u->getnom()] = $u->getIdIndividu();
src/Controller/LoginController.php:        $form = $ff->createBuilder(FormType::class, null)
src/Controller/LoginController.php:            ->add(
src/Controller/LoginController.php:            ->add('connect', SubmitType::class, ['label' => 'Connexion'])
src/Controller/LoginController.php:            ->getForm();
src/Controller/LoginController.php:        $form->handleRequest($request);
src/Controller/LoginController.php:        // NOTE - Pas de validation du CSRF, ce sera fait par GramcAuthenticator
src/Controller/LoginController.php:        if ($form->isSubmitted() /* && $form->isValid() */) {
src/Controller/LoginController.php:            if ($request->getSession()->has('url')) {
src/Controller/LoginController.php:                // dd($request->getSession()->get('url'));
src/Controller/LoginController.php:                return $this->redirect($request->getSession()->get('url'));
src/Controller/LoginController.php:                return $this->redirectToRoute('accueil');
src/Controller/LoginController.php:        return $this->render('login/connexion_dbg.html.twig', ['form' => $form->createView()]);
src/Controller/LoginController.php:        $sj = $this->sj;
src/Controller/LoginController.php:        $ac = $this->ac;
src/Controller/LoginController.php:        if (!$ac->isGranted('IS_IMPERSONATOR')) {
src/Controller/LoginController.php:            $session = $request->getSession();
src/Controller/LoginController.php:            $sudo_url = $request->headers->get('referer');
src/Controller/LoginController.php:            $session->set('sudo_url', $sudo_url);
src/Controller/LoginController.php:            $sj->infoMessage("Controller : connexion de l'utilisateur ".$individu.' en SUDO ');
src/Controller/LoginController.php:            return new RedirectResponse($this->generateUrl('accueil', ['_switch_user' => $individu->getId()]));
src/Controller/LoginController.php:            $sj->warningMessage("Controller : connexion de l'utilisateur ".$individu.' déjà en SUDO !');
src/Controller/LoginController.php:            return $this->redirectToRoute('individu_gerer');
src/Controller/MailController.php:        $em = $this->em;
src/Controller/MailController.php:        $sn = $this->sn;
src/Controller/MailController.php:        $sj = $this->sj;
src/Controller/MailController.php:        $ff = $this->ff;
src/Controller/MailController.php:        $sm = $this->sm;
src/Controller/MailController.php:        if (false == $sm->mailToResponsablesFiche()['ok']) {
src/Controller/MailController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' Action impossible - '.$sm->mailToResponsablesFiche()['raison']);
src/Controller/MailController.php:        $sujet = \file_get_contents(__DIR__.'/../../templates/notification/mail_to_responsables_fiche-sujet.html.twig');
src/Controller/MailController.php:        $body = \file_get_contents(__DIR__.'/../../templates/notification/mail_to_responsables_fiche-contenu.html.twig');
src/Controller/MailController.php:        $responsables = $this->getResponsablesFiche($session);
src/Controller/MailController.php:        return $this->mailToResponsablesBody($request, $session, 0, $responsables, $sujet, $body, $template);
src/Controller/MailController.php:        $sj = $this->sj;
src/Controller/MailController.php:        $em = $this->em;
src/Controller/MailController.php:        $all_versions = $em->getRepository(Version::class)->findBy(['session' => $session, 'prjFicheVal' => false]);
src/Controller/MailController.php:            $projet = $version->getProjet();
src/Controller/MailController.php:                $sj->errorMessage(__METHOD__.':'.__LINE__.' version '.$version." n'a pas de projet !");
src/Controller/MailController.php:            if (Etat::ACTIF != $version->getEtatVersion() && Etat::EN_ATTENTE != $version->getEtatVersion()) {
src/Controller/MailController.php:            $responsable = $version->getResponsable();
src/Controller/MailController.php:                $responsables[$responsable->getIdIndividu()]['selform'] = $this->getSelForm($responsable)->createView();
src/Controller/MailController.php:                $responsables[$responsable->getIdIndividu()]['responsable'] = $responsable;
src/Controller/MailController.php:                $responsables[$responsable->getIdIndividu()]['projets'][$projet->getIdProjet()] = $projet;
src/Controller/MailController.php:                $sj->errorMessage(__METHOD__.':'.__LINE__.' version '.$version." n'a pas de responsable !");
src/Controller/MailController.php:        $sj = $this->sj;
src/Controller/MailController.php:        $sm = $this->sm;
src/Controller/MailController.php:        $grdt = $this->grdt;
src/Controller/MailController.php:        if (false == $sm->mailToResponsablesRallonge()['ok']) {
src/Controller/MailController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' Action impossible - '.$sm->mailToResponsablesRallonge()['raison']);
src/Controller/MailController.php:        $responsables = $this->getResponsablesActifs();
src/Controller/MailController.php:        $sujet = \file_get_contents(__DIR__.'/../../templates/notification/mail_to_responsables_rallonge-sujet.html.twig');
src/Controller/MailController.php:        $body = \file_get_contents(__DIR__.'/../../templates/notification/mail_to_responsables_rallonge-contenu.html.twig');
src/Controller/MailController.php:        return $this->mailToResponsablesBody($request, $session, 0, $responsables, $sujet, $body, $template);
src/Controller/MailController.php:        $sj = $this->sj;
src/Controller/MailController.php:        $sm = $this->sm;
src/Controller/MailController.php:        if (false == $sm->mailToResponsables()['ok']) {
src/Controller/MailController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' Action impossible - '.$sm->mailToResponsables()['raison']);
src/Controller/MailController.php:        $responsables = $this->getResponsables($session);
src/Controller/MailController.php:        $sujet = \file_get_contents(__DIR__.'/../../templates/notification/mail_to_responsables-sujet.html.twig');
src/Controller/MailController.php:        $body = \file_get_contents(__DIR__.'/../../templates/notification/mail_to_responsables-contenu.html.twig');
src/Controller/MailController.php:        return $this->mailToResponsablesBody($request, $session, 0, $responsables, $sujet, $body, $template);
src/Controller/MailController.php:        $em = $this->em;
src/Controller/MailController.php:        $sn = $this->sn;
src/Controller/MailController.php:        $sj = $this->sj;
src/Controller/MailController.php:        $ff = $this->ff;
src/Controller/MailController.php:                    ->add('texte', TextareaType::class, [
src/Controller/MailController.php:                    ->add('submit', SubmitType::class, ['label' => 'Envoyer le message'])
src/Controller/MailController.php:                    ->getForm();
src/Controller/MailController.php:        $form->handleRequest($request);
src/Controller/MailController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/MailController.php:            $body = $form->getData()['texte'];
src/Controller/MailController.php:                $individus[$item['responsable']->getIdIndividu()] = $item['responsable'];
src/Controller/MailController.php:                $selform = $this->getSelForm($item['responsable']);
src/Controller/MailController.php:                $selform->handleRequest($request);
src/Controller/MailController.php:                if (empty($selform->getData()['sel'])) {
src/Controller/MailController.php:                    // $sj->debugMessage( __METHOD__ . $version->getIdVersion().' selection NON');
src/Controller/MailController.php:                $sn->sendMessageFromString(
src/Controller/MailController.php:                $request->getSession()->getFlashbag()->add('flash info', "$nb_msg message(s) envoyé(s)");
src/Controller/MailController.php:                $request->getSession()->getFlashbag()->add('flash erreur', 'Pas de message à envoyer');
src/Controller/MailController.php:        return $this->render(
src/Controller/MailController.php:                'form' => $form->createView(),
src/Controller/MailController.php:     * c-à-d de projets ayant consommé plus de 80% du quota
src/Controller/MailController.php:        $sp = $this->sp;
src/Controller/MailController.php:        $sj = $this->sj;
src/Controller/MailController.php:        $em = $this->em;
src/Controller/MailController.php:        $all_projets = $em->getRepository(Projet::class)->findAll();
src/Controller/MailController.php:            if ($projet->isProjetTest()) {
src/Controller/MailController.php:            if (Etat::TERMINE == $projet->getEtatProjet() || Etat::ANNULE == $projet->getEtatProjet()) {
src/Controller/MailController.php:            $derniereVersion = $projet->derniereVersion();
src/Controller/MailController.php:            $versionActive = $projet->getVersionActive();
src/Controller/MailController.php:            if (null == $derniereVersion->getSession()) {
src/Controller/MailController.php:            $responsable = $derniereVersion->getResponsable();
src/Controller/MailController.php:            $c = $sp->getConsoRessource($projet, 'cpu');
src/Controller/MailController.php:            $ind = $responsable->getIdIndividu();
src/Controller/MailController.php:            $responsables[$ind]['selform'] = $this->getSelForm($responsable)->createView();
src/Controller/MailController.php:            $responsables[$ind]['projets'][$projet->getIdProjet()] = $projet;
src/Controller/MailController.php:            $attr = $projet->getVersionActive()->getAttrHeures();
src/Controller/MailController.php:        $nom = 'selection_'.$individu->getId();
src/Controller/MailController.php:        return $this->get('form.factory')->createNamedBuilder($nom, FormType::class, null, ['csrf_protection' => false])
src/Controller/MailController.php:                                            ->add('sel', CheckboxType::class, ['required' => false, 'label' => ' '])
src/Controller/MailController.php:                                            ->getForm();
src/Controller/MailController.php:        $em = $this->em;
src/Controller/MailController.php:        $sn = $this->sn;
src/Controller/MailController.php:        $ff = $this->ff;
src/Controller/MailController.php:        /*        $now = $em->getRepository(Param::class)->findOneBy(['cle' => 'now']);
src/Controller/MailController.php:                    $now->setCle('now');
src/Controller/MailController.php:                    //$em->persist( $now );
src/Controller/MailController.php:                if ($now->getVal() == null) {
src/Controller/MailController.php:                    $date = new \DateTime($now->getVal());
src/Controller/MailController.php:        $form = $ff->createBuilder(FormType::class, [])
src/Controller/MailController.php:                        ->add('addr', textType::class, ['label' => 'Destinataire'])
src/Controller/MailController.php:                        ->add('Envoyer', SubmitType::class)
src/Controller/MailController.php:                        ->getForm();
src/Controller/MailController.php:        $form->handleRequest($request);
src/Controller/MailController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/MailController.php:            $addr = $form->getData()['addr'];
src/Controller/MailController.php:            $sn->sendTestMessage($addr);
src/Controller/MailController.php:            $request->getSession()->getFlashbag()->add('flash info', "Le mail est parti, on vous laisse vérifier qu'il est bien arrivé !");
src/Controller/MailController.php:        return $this->render(
src/Controller/MailController.php:            'form' => $form->createView(),
src/Controller/ParamController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/ParamController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/ParamController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/ParamController.php:        $em = $this->em;
src/Controller/ParamController.php:        $params = $em->getRepository(Param::class)->findAll();
src/Controller/ParamController.php:        return $this->render('param/index.html.twig', [
src/Controller/ParamController.php:        $form = $this->createForm('App\Form\ParamType', $param);
src/Controller/ParamController.php:        $form->handleRequest($request);
src/Controller/ParamController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/ParamController.php:            $em = $this->em;
src/Controller/ParamController.php:            $em->persist($param);
src/Controller/ParamController.php:            $em->flush($param);
src/Controller/ParamController.php:            return $this->redirectToRoute('param_show', ['id' => $param->getId()]);
src/Controller/ParamController.php:        return $this->render('param/new.html.twig', [
src/Controller/ParamController.php:            'form' => $form->createView(),
src/Controller/ParamController.php:        $deleteForm = $this->createDeleteForm($param);
src/Controller/ParamController.php:        return $this->render('param/show.html.twig', [
src/Controller/ParamController.php:            'delete_form' => $deleteForm->createView(),
src/Controller/ParamController.php:        $deleteForm = $this->createDeleteForm($param);
src/Controller/ParamController.php:        $editForm = $this->createForm('App\Form\ParamType', $param);
src/Controller/ParamController.php:        $editForm->handleRequest($request);
src/Controller/ParamController.php:        if ($editForm->isSubmitted() && $editForm->isValid()) {
src/Controller/ParamController.php:            $this->em->flush();
src/Controller/ParamController.php:            return $this->redirectToRoute('param_edit', ['id' => $param->getId()]);
src/Controller/ParamController.php:        return $this->render('param/edit.html.twig', [
src/Controller/ParamController.php:            'edit_form' => $editForm->createView(),
src/Controller/ParamController.php:            'delete_form' => $deleteForm->createView(),
src/Controller/ParamController.php:        $em = $this->em;
src/Controller/ParamController.php:        $ff = $this->ff;
src/Controller/ParamController.php:        $now = $em->getRepository(Param::class)->findOneBy(['cle' => 'now']);
src/Controller/ParamController.php:            $now->setCle('now');
src/Controller/ParamController.php:            // $em->persist( $now );
src/Controller/ParamController.php:        if (null == $now->getVal()) {
src/Controller/ParamController.php:            $date = new \DateTime($now->getVal());
src/Controller/ParamController.php:        $editForm = $ff->createBuilder(FormType::class, $defaults)
src/Controller/ParamController.php:                        ->add('date', DateType::class, ['label' => ' '])
src/Controller/ParamController.php:                        ->add('submit', SubmitType::class, ['label' => 'Fixer la date'])
src/Controller/ParamController.php:                        ->add('supprimer', SubmitType::class, ['label' => 'Fin de la modification de la date'])
src/Controller/ParamController.php:                        ->getForm();
src/Controller/ParamController.php:        $editForm->handleRequest($request);
src/Controller/ParamController.php:        if ($editForm->isSubmitted() && $editForm->isValid()) {
src/Controller/ParamController.php:            $date = $editForm->getData()['date'];
src/Controller/ParamController.php:            $now->setCle('now');
src/Controller/ParamController.php:            $now->setVal($date->format('Y-m-d'));
src/Controller/ParamController.php:            $em->persist($now);
src/Controller/ParamController.php:            if ($editForm->get('supprimer')->isClicked()) {
src/Controller/ParamController.php:                $em->remove($now);
src/Controller/ParamController.php:            $em->flush();
src/Controller/ParamController.php:            return $this->redirectToRoute('admin_accueil');
src/Controller/ParamController.php:            return $this->render(
src/Controller/ParamController.php:                'edit_form' => $editForm->createView(),
src/Controller/ParamController.php:        $form = $this->createDeleteForm($param);
src/Controller/ParamController.php:        $form->handleRequest($request);
src/Controller/ParamController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/ParamController.php:            $em = $this->em;
src/Controller/ParamController.php:            $em->remove($param);
src/Controller/ParamController.php:            $em->flush($param);
src/Controller/ParamController.php:        return $this->redirectToRoute('param_index');
src/Controller/ParamController.php:        return $this->createFormBuilder()
src/Controller/ParamController.php:            ->setAction($this->generateUrl('param_delete', ['id' => $param->getId()]))
src/Controller/ParamController.php:            ->setMethod('DELETE')
src/Controller/ParamController.php:            ->getForm()
src/Controller/ProjetController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/ProjetController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/ProjetController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/ProjetController.php:// Pour le tri numérique sur les années, en commençant par la plus grande - cf. resumesAction
src/Controller/ProjetController.php:        $this->token = $tok->getToken();
src/Controller/ProjetController.php:        $em = $this->em;
src/Controller/ProjetController.php:        $projets = $em->getRepository(Projet::class)->findAll();
src/Controller/ProjetController.php:        return $this->render('projet/index.html.twig', [
src/Controller/ProjetController.php:        return $this->render('projet/rgpd.html.twig');
src/Controller/ProjetController.php:        if ($request->isMethod('POST')) {
src/Controller/ProjetController.php:            $confirmation = $request->request->get('confirmation');
src/Controller/ProjetController.php:                $workflow = $this->pw;
src/Controller/ProjetController.php:                if ($workflow->canExecute(Signal::CLK_FERM, $projet)) {
src/Controller/ProjetController.php:                    $workflow->execute(Signal::CLK_FERM, $projet);
src/Controller/ProjetController.php:            return $this->redirectToRoute('projet_tous'); // NON - on ne devrait jamais y arriver !
src/Controller/ProjetController.php:            return $this->render(
src/Controller/ProjetController.php:        $se = $this->se;
src/Controller/ProjetController.php:        $em = $this->em;
src/Controller/ProjetController.php:        $version = $projet->getVersionDerniere();
src/Controller/ProjetController.php:        if (Projet::PROJET_DYN == $version->getTypeVersion()) {
src/Controller/ProjetController.php:            $workflow = $this->pw4;
src/Controller/ProjetController.php:            $workflow = $this->pw;
src/Controller/ProjetController.php:        if ($request->isMethod('POST')) {
src/Controller/ProjetController.php:            $confirmation = $request->request->get('confirmation');
src/Controller/ProjetController.php:                if ($workflow->canExecute(Signal::CLK_ARR, $version->getProjet())) {
src/Controller/ProjetController.php:                    $rtn = $workflow->execute(Signal::CLK_ARR, $version->getProjet());
src/Controller/ProjetController.php:                        $request->getSession()->getFlashbag()->add('flash info', "Projet $projet revenu en édition");
src/Controller/ProjetController.php:                        $request->getSession()->getFlashbag()->add('flash erreur', "Le projet $projet n'a pas pu revenir en édition.");
src/Controller/ProjetController.php:                        $sj->errorMessage(__METHOD__.':'.__LINE__." Le projet $projet n'a pas pu revenir en édition.");
src/Controller/ProjetController.php:                    $expertises = $version->getExpertise()->toArray();
src/Controller/ProjetController.php:                    $em = $this->em;
src/Controller/ProjetController.php:                        $em->remove($e);
src/Controller/ProjetController.php:                    $em->flush();
src/Controller/ProjetController.php:            return $this->redirectToRoute('projet_dynamique');
src/Controller/ProjetController.php:            return $this->render(
src/Controller/ProjetController.php:        $se = $this->se;
src/Controller/ProjetController.php:        $em = $this->em;
src/Controller/ProjetController.php:        $version = $projet->getVersionDerniere();
src/Controller/ProjetController.php:        if (Projet::PROJET_DYN == $version->getTypeVersion()) {
src/Controller/ProjetController.php:            $workflow = $this->pw4;
src/Controller/ProjetController.php:            $workflow = $this->pw;
src/Controller/ProjetController.php:        if ($request->isMethod('POST')) {
src/Controller/ProjetController.php:            $confirmation = $request->request->get('confirmation');
src/Controller/ProjetController.php:                if ($workflow->canExecute(Signal::CLK_VAL_DEM, $version->getProjet())) {
src/Controller/ProjetController.php:                    $se->newExpertiseIfPossible($version);
src/Controller/ProjetController.php:                    $rtn = $workflow->execute(Signal::CLK_VAL_DEM, $projet);
src/Controller/ProjetController.php:                        $request->getSession()->getFlashbag()->add('flash info', "Projet $projet envoyé en validation");
src/Controller/ProjetController.php:                        $request->getSession()->getFlashbag()->add('flash erreur', "Le projet $projet n'a pas pu être envoyé en validation.");
src/Controller/ProjetController.php:                        $sj->errorMessage(__METHOD__.':'.__LINE__." Le projet $projet n'a pas pu être envoyé en validation.");
src/Controller/ProjetController.php:            return $this->redirectToRoute('projet_dynamique');
src/Controller/ProjetController.php:            return $this->render(
src/Controller/ProjetController.php:        $sp = $this->sp;
src/Controller/ProjetController.php:        $sj = $this->sj;
src/Controller/ProjetController.php:        $paa = $sp->projetsParAnnee($annee);
src/Controller/ProjetController.php:        //     - tableau associatif indexé par la métathématique
src/Controller/ProjetController.php:        //     - Pour chaque méta thématique liste des projets correspondants
src/Controller/ProjetController.php:            if (Etat::EDITION_DEMANDE == $v->getEtatVersion()) {
src/Controller/ProjetController.php:            $thematique = $v->getPrjThematique();
src/Controller/ProjetController.php:            $prj['id'] = $v->getProjet()->getIdProjet();
src/Controller/ProjetController.php:            $prj['titre'] = $v->getPrjTitre();
src/Controller/ProjetController.php:            $prj['resume'] = $v->getPrjResume();
src/Controller/ProjetController.php:            $prj['laboratoire'] = $v->getLabo();
src/Controller/ProjetController.php:            $a = $v->getProjet()->getIdProjet();
src/Controller/ProjetController.php:            $publis = array_slice($v->getProjet()->getPubli()->toArray(), -2, 2);
src/Controller/ProjetController.php:            // $publis = array_slice($publis, -2, 2); // On garde seulement les deux dernières
src/Controller/ProjetController.php:            $prj['porteur'] = $v->getResponsable()->getPrenom().' '.$v->getResponsable()->getNom();
src/Controller/ProjetController.php:        return $this->render(
src/Controller/ProjetController.php:        $sp = $this->sp;
src/Controller/ProjetController.php:        $sj = $this->sj;
src/Controller/ProjetController.php:        if (!$sp->projetACL($version->getProjet())) {
src/Controller/ProjetController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' problème avec ACL');
src/Controller/ProjetController.php:        $filename = $sp->getRapport($version->getProjet(), $annee);
src/Controller/ProjetController.php:            $sj->errorMessage(__METHOD__.':'.__LINE__." fichier du rapport d'activité \"".$filename."\" n'existe pas");
src/Controller/ProjetController.php:        $sv = $this->sv;
src/Controller/ProjetController.php:        return Functions::pdf($sv->getSigne($version));
src/Controller/ProjetController.php:        $sv = $this->sv;
src/Controller/ProjetController.php:        return Functions::pdf($sv->getDocument($version));
src/Controller/ProjetController.php:        $em = $this->em;
src/Controller/ProjetController.php:        // $projets = $em->getRepository(Projet::class)->findAll();
src/Controller/ProjetController.php:        $sj = $this->sj;
src/Controller/ProjetController.php:        $sp = $this->sp;
src/Controller/ProjetController.php:        $sroc = $this->sroc;
src/Controller/ProjetController.php:        $ss = $this->ss;
src/Controller/ProjetController.php:        $selectAnneeData = $ss->selectAnnee($request); // formulaire
src/Controller/ProjetController.php:        [$projets_data,$total,$repart] = $sp->projetsDynParAnnee($annee);
src/Controller/ProjetController.php:        $collaborateurVersionRepository = $em->getRepository(CollaborateurVersion::class);
src/Controller/ProjetController.php:        $versionRepository = $em->getRepository(Version::class);
src/Controller/ProjetController.php:        $projetRepository = $em->getRepository(Projet::class);
src/Controller/ProjetController.php:            // $info     = $versionRepository->info($projet); // les stats du projet
src/Controller/ProjetController.php:            $version = $projet->getVersionActive();
src/Controller/ProjetController.php:                $version = $projet->getVersionDerniere();
src/Controller/ProjetController.php:                    $sj->errorMessage(__METHOD__.':'.__LINE__."projet $projet - Pas de version !");
src/Controller/ProjetController.php:            $metaetat = strtolower($sp->getMetaEtat($projet));
src/Controller/ProjetController.php:            $count = intval($projet->getVersionDerniere()->getNbVersion());
src/Controller/ProjetController.php:            foreach ($version->getDac() as $d) {
src/Controller/ProjetController.php:                $dacs[$sroc->getNomComplet($d->getRessource())] = $d;
src/Controller/ProjetController.php:                    'renouvelable' => Etat::RENOUVELABLE == $projet->getEtatProjet(),
src/Controller/ProjetController.php:                    'etat_version' => (null != $version) ? Etat::getLibelle($version->getEtatVersion()) : 'SANS_VERSION',
src/Controller/ProjetController.php:                    'responsable' => $collaborateurVersionRepository->getResponsable($projet),
src/Controller/ProjetController.php:        $etat_projet['total'] = $projetRepository->countAll();
src/Controller/ProjetController.php:        return $this->render(
src/Controller/ProjetController.php:            'form' => $selectAnneeData['form']->createView(), // formulaire de hoix de l'année
src/Controller/ProjetController.php:        $em = $this->em;
src/Controller/ProjetController.php:        $projets = $em->getRepository(Projet::class)->findAll();
src/Controller/ProjetController.php:        return $this->render('projet/gerer.html.twig', [
src/Controller/ProjetController.php:        $sm = $this->sm;
src/Controller/ProjetController.php:        $sj = $this->sj;
src/Controller/ProjetController.php:        $ss = $this->ss;
src/Controller/ProjetController.php:        $token = $this->tok->getToken();
src/Controller/ProjetController.php:        if (false == $sm->nouveauProjet($type)['ok']) {
src/Controller/ProjetController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' impossible de créer un nouveau projet parce que '.$sm->nouveauProjet($type)['raison']);
src/Controller/ProjetController.php:        $projetRepository = $this->em->getRepository(Projet::class);
src/Controller/ProjetController.php:        $id_individu = $token->getUser()->getIdIndividu();
src/Controller/ProjetController.php:        $renouvelables = $projetRepository->getProjetsCollab($id_individu, true, true, true);
src/Controller/ProjetController.php:            return $this->redirectToRoute('nouveau_projet', ['type' => $type]);
src/Controller/ProjetController.php:        return $this->render(
src/Controller/ProjetController.php:        $grdt = $this->grdt;
src/Controller/ProjetController.php:        $sm = $this->sm;
src/Controller/ProjetController.php:        $ss = $this->ss;
src/Controller/ProjetController.php:        $sp = $this->sp;
src/Controller/ProjetController.php:        $sv = $this->sv;
src/Controller/ProjetController.php:        $sj = $this->sj;
src/Controller/ProjetController.php:        $sr = $this->sr;
src/Controller/ProjetController.php:        $sroc = $this->sroc;
src/Controller/ProjetController.php:        $su = $this->su;
src/Controller/ProjetController.php:        $grdt = $this->grdt;
src/Controller/ProjetController.php:        $token = $this->tok->getToken();
src/Controller/ProjetController.php:        $em = $this->em;
src/Controller/ProjetController.php:        $request->getSession()->remove('SessionCourante'); // remove cache
src/Controller/ProjetController.php:        // NOTE - Pour ce controleur, on identifie les types par un chiffre (voir Entity/Projet.php)
src/Controller/ProjetController.php:        $m = $sm->nouveauProjet("$type");
src/Controller/ProjetController.php:            $raison = null === $m ? "ERREUR AVEC LE TYPE $type - voir le paramètre prj_type" : $m['raison'];
src/Controller/ProjetController.php:            $sj->throwException(__METHOD__.':'.__LINE__." impossible de créer un nouveau projet parce que $raison");
src/Controller/ProjetController.php:        $projet = $sp->creerProjet(Projet::PROJET_DYN);
src/Controller/ProjetController.php:        $version = $projet->getVersionDerniere();
src/Controller/ProjetController.php:        return $this->redirectToRoute('modifier_version', ['id' => $version->getIdVersion()]);
src/Controller/ProjetController.php:        $sm = $this->sm;
src/Controller/ProjetController.php:        $ss = $this->ss;
src/Controller/ProjetController.php:        $sp = $this->sp;
src/Controller/ProjetController.php:        $su = $this->su;
src/Controller/ProjetController.php:        $sr = $this->sr;
src/Controller/ProjetController.php:        $token = $this->token;
src/Controller/ProjetController.php:        $sid = $this->sid;
src/Controller/ProjetController.php:        $em = $this->em;
src/Controller/ProjetController.php:        $individu = $token->getUser();
src/Controller/ProjetController.php:        $id_individu = $individu->getIdIndividu();
src/Controller/ProjetController.php:        $projetRepository = $em->getRepository(Projet::class);
src/Controller/ProjetController.php:        $cv_repo = $em->getRepository(CollaborateurVersion::class);
src/Controller/ProjetController.php:        $user_repo = $em->getRepository(User::class);
src/Controller/ProjetController.php:        $list_projets_collab = $projetRepository->getProjetsCollab($id_individu, false, true);
src/Controller/ProjetController.php:        $list_projets_resp = $projetRepository->getProjetsCollab($id_individu, true, false);
src/Controller/ProjetController.php:        $projets_term = $projetRepository->get_projets_etat($id_individu, 'TERMINE');
src/Controller/ProjetController.php:            $individu = $token->getUser();
src/Controller/ProjetController.php:            if (!$sid->validerProfil($individu)) {
src/Controller/ProjetController.php:                return $this->redirectToRoute('profil');
src/Controller/ProjetController.php:        // TODO - Faire en sorte pour que les erreurs soient proprement affichées dans l'API
src/Controller/ProjetController.php:        // TODO - Hou le vilain copier-coller !
src/Controller/ProjetController.php:            $versionActive = $sp->versionActive($projet);
src/Controller/ProjetController.php:                $rallonges = $versionActive->getRallonge();
src/Controller/ProjetController.php:                $cpt_rall = count($rallonges->toArray());
src/Controller/ProjetController.php:                $cv = $cv_repo->findOneBy(['version' => $versionActive, 'collaborateur' => $individu]);
src/Controller/ProjetController.php:                $loginnames = $su->collaborateurVersion2LoginNames($cv);
src/Controller/ProjetController.php:            $u     = $user_repo->findOneBy(['loginname' => $login]);
src/Controller/ProjetController.php:                $passwd    = $u->getPassword();
src/Controller/ProjetController.php:                $pwd_expir = $u->getPassexpir();
src/Controller/ProjetController.php:                $loginnames = $su->collaborateurVersion2LoginNames();
src/Controller/ProjetController.php:                'meta_etat' => $sp->getMetaEtat($projet),
src/Controller/ProjetController.php:            $versionActive = $sp->versionActive($projet);
src/Controller/ProjetController.php:                $rallonges = $versionActive->getRallonge();
src/Controller/ProjetController.php:                $cpt_rall = count($rallonges->toArray());
src/Controller/ProjetController.php:                // TODO - Remonter au niveau du ProjetRepository (fonctions get_projet_etats et getProjetsCollab)
src/Controller/ProjetController.php:                if ($cv->getDeleted() == true) continue;
src/Controller/ProjetController.php:                $login = $cv->getLoginname()==null ? 'nologin' : $cv->getLoginname();
src/Controller/ProjetController.php:                $u     = $user_repo->findOneBy(['loginname' => $login]);
src/Controller/ProjetController.php:                    $passwd = $u->getPassword();
src/Controller/ProjetController.php:                    $pwd_expir = $u->getPassexpir();
src/Controller/ProjetController.php:                $cv = $cv_repo->findOneBy(['version' => $versionActive, 'collaborateur' => $individu]);
src/Controller/ProjetController.php:                $loginnames = $su->collaborateurVersion2LoginNames($cv);
src/Controller/ProjetController.php:            $u     = $user_repo->findOneBy(['loginname' => $login]);
src/Controller/ProjetController.php:                $passwd    = $u->getPassword();
src/Controller/ProjetController.php:                $pwd_expir = $u->getPassexpir();
src/Controller/ProjetController.php:                $loginnames = $su->collaborateurVersion2LoginNames();
src/Controller/ProjetController.php:                // 'conso'     => $sp->getConsoCalculP($projet),
src/Controller/ProjetController.php:                'meta_etat' => $sp->getMetaEtat($projet),
src/Controller/ProjetController.php:        $menu[] = $this->sm->nouveauProjet(Projet::PROJET_DYN, ServiceMenus::HPRIO);
src/Controller/ProjetController.php:        return $this->render(
src/Controller/ProjetController.php:        $em = $this->em;
src/Controller/ProjetController.php:        $sp = $this->sp;
src/Controller/ProjetController.php:        $sj = $this->sj;
src/Controller/ProjetController.php:        $su = $this->su;
src/Controller/ProjetController.php:        $coll_vers_repo = $em->getRepository(CollaborateurVersion::class);
src/Controller/ProjetController.php:        $token = $this->token;
src/Controller/ProjetController.php:            $version = $projet->getVersionDerniere();
src/Controller/ProjetController.php:                $sj->throwException(__METHOD__.':'.__LINE__.' Projet '.$projet.': la dernière version est nulle !');
src/Controller/ProjetController.php:            $projet = $version->getProjet();
src/Controller/ProjetController.php:        if (!$sp->projetACL($projet)) {
src/Controller/ProjetController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' problème avec ACL');
src/Controller/ProjetController.php:        $type = $projet->getTypeProjet();
src/Controller/ProjetController.php:                return $this->__consulter4($projet, $version, $request);
src/Controller/ProjetController.php:                $sj->errorMessage(__METHOD__." Type de projet inconnu: $type");
src/Controller/ProjetController.php:        $em = $this->em;
src/Controller/ProjetController.php:        $sm = $this->sm;
src/Controller/ProjetController.php:        $sp = $this->sp;
src/Controller/ProjetController.php:        $ac = $this->ac;
src/Controller/ProjetController.php:        $sv = $this->sv;
src/Controller/ProjetController.php:        $sj = $this->sj;
src/Controller/ProjetController.php:        $ff = $this->ff;
src/Controller/ProjetController.php:        $ss = $this->ss;
src/Controller/ProjetController.php:        $token = $this->token;
src/Controller/ProjetController.php:        $moi = $token->getUser();
src/Controller/ProjetController.php:        ->add(
src/Controller/ProjetController.php:                'choices' => $projet->getVersion(),
src/Controller/ProjetController.php:                    return $version->getNbVersion();
src/Controller/ProjetController.php:        ->add('submit', SubmitType::class, ['label' => 'Changer'])
src/Controller/ProjetController.php:        ->getForm();
src/Controller/ProjetController.php:        $version_form->handleRequest($request);
src/Controller/ProjetController.php:        if ($version_form->isSubmitted() && $version_form->isValid()) {
src/Controller/ProjetController.php:            $version = $version_form->getData()['version'];
src/Controller/ProjetController.php:        $menu[] = $sm->nouvelleRallonge($projet);
src/Controller/ProjetController.php:        $menu[] = $sm->renouvelerVersion($version);
src/Controller/ProjetController.php:        $menu[] = $sm->modifierVersion($version);
src/Controller/ProjetController.php:        $menu[] = $sm->envoyerEnExpertise($version);
src/Controller/ProjetController.php:        $menu[] = $sm->changerResponsable($version);
src/Controller/ProjetController.php:        $menu[] = $sm->gererPublications($projet);
src/Controller/ProjetController.php:        $menu[] = $sm->modifierCollaborateurs($version);
src/Controller/ProjetController.php:        $menu[] = $sm->telechargerFiche($version);
src/Controller/ProjetController.php:        $menu[] = $sm->televerserFiche($version);
src/Controller/ProjetController.php:        $etat_version = $version->getEtatVersion();
src/Controller/ProjetController.php:        if ($this->getParameter('rapport_dactivite')) {
src/Controller/ProjetController.php:            if ((Etat::ACTIF == $etat_version || Etat::TERMINE == $etat_version) && !$sp->hasRapport($projet, $version->getAnneeSession())) {
src/Controller/ProjetController.php:                $menu[] = $sm->telechargerModeleRapportDactivite($version, ServiceMenus::BPRIO);
src/Controller/ProjetController.php:            $sv->imageProperties('img_expose_1', 'Figure 1', $version),
src/Controller/ProjetController.php:            $sv->imageProperties('img_expose_2', 'Figure 2', $version),
src/Controller/ProjetController.php:            $sv->imageProperties('img_expose_3', 'Figure 3', $version),
src/Controller/ProjetController.php:        $document = $sv->getdocument($version);
src/Controller/ProjetController.php:            $sv->imageProperties('img_justif_renou_1', 'Figure 1', $version),
src/Controller/ProjetController.php:            $sv->imageProperties('img_justif_renou_2', 'Figure 2', $version),
src/Controller/ProjetController.php:            $sv->imageProperties('img_justif_renou_3', 'Figure 3', $version),
src/Controller/ProjetController.php:        $cv = $em->getRepository(CollaborateurVersion::class)
src/Controller/ProjetController.php:             ->findOneBy(['version' => $version, 'collaborateur' => $moi]);
src/Controller/ProjetController.php:        return $this->render(
src/Controller/ProjetController.php:                'version_form' => $version_form->createView(),
src/Controller/ProjetController.php:        return $this->render('projet/show.html.twig', [
src/Controller/ProjetController.php:            // 'delete_form' => $deleteForm->createView(),
src/Controller/ProjetController.php:        $deleteForm = $this->createDeleteForm($projet);
src/Controller/ProjetController.php:        $editForm = $this->createForm('App\Form\ProjetType', $projet);
src/Controller/ProjetController.php:        $editForm->handleRequest($request);
src/Controller/ProjetController.php:        if ($editForm->isSubmitted() && $editForm->isValid()) {
src/Controller/ProjetController.php:            $this->em->flush();
src/Controller/ProjetController.php:            return $this->redirectToRoute('projet_edit', ['id' => $projet->getId()]);
src/Controller/ProjetController.php:        return $this->render('projet/edit.html.twig', [
src/Controller/ProjetController.php:            'edit_form' => $editForm->createView(),
src/Controller/ProjetController.php:            'delete_form' => $deleteForm->createView(),
src/Controller/ProjetDfctController.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/ProjetDfctController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/ProjetDfctController.php:        $dessin_heures = $this->gcl;
src/Controller/ProjetDfctController.php:        $sm = $this->sm;
src/Controller/ProjetDfctController.php:        $sd = $this->sd;
src/Controller/ProjetDfctController.php:        $em = $this->em;
src/Controller/ProjetDfctController.php:        $dfct = $this->dfct;
src/Controller/ProjetDfctController.php:        $emises = $dfct->getNbEmises($projet, $annee);
src/Controller/ProjetDfctController.php:        $version = $dfct->getVersion($projet, $annee);
src/Controller/ProjetDfctController.php:        $menu[] = $sm->projetsAnnee();
src/Controller/ProjetDfctController.php:        $jourdelan = new \DateTime($annee.'-01-01');
src/Controller/ProjetDfctController.php:        $ssylvestre = new \DateTime($annee.'-12-31');
src/Controller/ProjetDfctController.php:        $debut_periode = $version->getFctStamp();
src/Controller/ProjetDfctController.php:            $d = $annee.'-01-01';
src/Controller/ProjetDfctController.php:        $fin_periode->sub(new \DateInterval('P1D'));
src/Controller/ProjetDfctController.php:        $form = $this->createFormBuilder()
src/Controller/ProjetDfctController.php:            ->add(
src/Controller/ProjetDfctController.php:            ->add('submit', SubmitType::class, ['label' => 'OK'])
src/Controller/ProjetDfctController.php:            ->getForm();
src/Controller/ProjetDfctController.php:        $form->handleRequest($request);
src/Controller/ProjetDfctController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/ProjetDfctController.php:            $fin_periode = $form->getData()['fctstamp'];
src/Controller/ProjetDfctController.php:        $conso_periode = $dfct->getConsoPeriode($projet, $debut_periode, $fin_periode);
src/Controller/ProjetDfctController.php:        // if ($conso_periode == -1) $conso_periode = 'N/A';
src/Controller/ProjetDfctController.php:        $id_projet = $projet->getIdProjet();
src/Controller/ProjetDfctController.php:        $compta_repo = $em->getRepository(Compta::class);
src/Controller/ProjetDfctController.php:        $db_conso = $compta_repo->conso($id_projet, $annee);
src/Controller/ProjetDfctController.php:        // $struct_data   = $dessin_heures->createStructuredData($debut_periode, $fin_periode, $db_conso);
src/Controller/ProjetDfctController.php:        // $dessin_heures->resetConso($struct_data);
src/Controller/ProjetDfctController.php:        // $image_conso_p = $dessin_heures->createImage($struct_data)[0];
src/Controller/ProjetDfctController.php:        // $struct_data   = $dessin_heures->createStructuredData($jourdelan, $ssylvestre, $db_conso);
src/Controller/ProjetDfctController.php:        // $dessin_heures->resetConso($struct_data);
src/Controller/ProjetDfctController.php:        // $image_conso_a = $dessin_heures->createImage($struct_data)[0];
src/Controller/ProjetDfctController.php:        return $this->render(
src/Controller/ProjetDfctController.php:                             'form' => $form->createView(),
src/Controller/ProjetDfctController.php:        $dfct = $this->dfct;
src/Controller/ProjetDfctController.php:        $sj = $this->sj;
src/Controller/ProjetDfctController.php:        $filename = $dfct->getPath($projet, $annee, $nb);
src/Controller/ProjetDfctController.php:            $sj->errorMessage(__METHOD__.':'.__LINE__." fichier de données de facturation $nb, projet $projet, année $annee n'existe pas");
src/Controller/ProjetDfctController.php:        $em = $this->em;
src/Controller/ProjetDfctController.php:        $annee = $fin_periode->format('Y');
src/Controller/ProjetDfctController.php:        $dfct = $this->dfct;
src/Controller/ProjetDfctController.php:        $emises = $dfct->getNbEmises($projet, $annee);
src/Controller/ProjetDfctController.php:        $version = $dfct->getVersion($projet, $annee);
src/Controller/ProjetDfctController.php:        $jourdelan = new \DateTime($annee.'-01-01');
src/Controller/ProjetDfctController.php:        $ssylvestre = new \DateTime($annee.'-12-31');
src/Controller/ProjetDfctController.php:        $debut_periode = $version->GetFctStamp();
src/Controller/ProjetDfctController.php:            $debut_periode->add(new \DateInterval('P1D'));
src/Controller/ProjetDfctController.php:            return $this->redirectToRoute('dfct_liste', ['id' => $projet->getId(), 'annee' => $annee]);
src/Controller/ProjetDfctController.php:        $conso = $dfct->getConsoPeriode($projet, $debut_periode, $fin_periode);
src/Controller/ProjetDfctController.php:        $id_projet = $projet->getIdProjet();
src/Controller/ProjetDfctController.php:        $compta_repo = $em->getRepository(Compta::class);
src/Controller/ProjetDfctController.php:        $db_conso = $compta_repo->conso($id_projet, $annee);
src/Controller/ProjetDfctController.php:        $dessin_heures = $this->gcl;
src/Controller/ProjetDfctController.php:        $struct_data = $dessin_heures->createStructuredData($debut_periode, $fin_periode, $db_conso);
src/Controller/ProjetDfctController.php:            $dessin_heures->resetConso($struct_data);
src/Controller/ProjetDfctController.php:            $image_conso_p = $dessin_heures->createImage($struct_data)[0];
src/Controller/ProjetDfctController.php:        $struct_data = $dessin_heures->createStructuredData($jourdelan, $ssylvestre, $db_conso);
src/Controller/ProjetDfctController.php:            $dessin_heures->resetConso($struct_data);
src/Controller/ProjetDfctController.php:            $image_conso_a = $dessin_heures->createImage($struct_data)[0];
src/Controller/ProjetDfctController.php:        $html4pdf = $this->render(
src/Controller/ProjetDfctController.php:        $pdf = $this->pdf->getOutputFromHtml($html4pdf->getContent());
src/Controller/ProjetDfctController.php:        $stamp->add(new \DateInterval('P1D'));
src/Controller/ProjetDfctController.php:        $version->setFctStamp($stamp);
src/Controller/ProjetDfctController.php:        $em->persist($version);
src/Controller/ProjetDfctController.php:        $em->flush();
src/Controller/ProjetDfctController.php:        $dfct->savePdf($projet, $annee, $pdf);
src/Controller/ProjetDfctController.php:        return $this->redirectToRoute('dfct_liste', ['id' => $projet->getId(), 'annee' => $annee]);
src/Controller/PublicationController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/PublicationController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/PublicationController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/PublicationController.php:        $sj = $this->sj;
src/Controller/PublicationController.php:        $em = $this->em;
src/Controller/PublicationController.php:        $sj->debugMessage('autocompleteAction '.print_r($_POST, true));
src/Controller/PublicationController.php:        $form = $this->ff
src/Controller/PublicationController.php:                    ->createNamedBuilder('autocomplete_form', FormType::class, [])
src/Controller/PublicationController.php:                    ->add('refbib', TextType::class, ['required' => true, 'csrf_protection' => false])
src/Controller/PublicationController.php:                    ->getForm();
src/Controller/PublicationController.php:        $form->handleRequest($request);
src/Controller/PublicationController.php:        if ($form->isSubmitted()) { // nous ne pouvons pas ajouter $form->isValid() et nous ne savons pas pourquoi
src/Controller/PublicationController.php:            if (array_key_exists('refbib', $form->getData())) {
src/Controller/PublicationController.php:                $data = $em->getRepository(Publication::class)->liste_refbib_like($form->getData()['refbib']);
src/Controller/PublicationController.php:            $response->headers->set('Content-Type', 'application/json');
src/Controller/PublicationController.php:        $form = $this->createForm(PublicationType::class, $publication, ['csrf_protection' => false]);
src/Controller/PublicationController.php:        $form->handleRequest($request);
src/Controller/PublicationController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/PublicationController.php:            $publication = $em->getRepository(Publication::class)->findOneBy(['refbib' => $publication->getRefbib()]);
src/Controller/PublicationController.php:            // $form = $this->createForm(PublicationType::class, $publication, ['csrf_protection' => true]);
src/Controller/PublicationController.php:            // return $this->render('publication/form.html.twig', [ 'form' => $form->createView() ]);
src/Controller/PublicationController.php:        $form = $this->createForm(PublicationType::class, $publication, ['csrf_protection' => true]);
src/Controller/PublicationController.php:        $em = $this->em;
src/Controller/PublicationController.php:        $publications = $em->getRepository(Publication::class)->findAll();
src/Controller/PublicationController.php:        return $this->render('publication/index.html.twig', [
src/Controller/PublicationController.php:        $sj = $this->sj;
src/Controller/PublicationController.php:        $em = $this->em;
src/Controller/PublicationController.php:        $form = $this->createForm('App\Form\PublicationType', $publication);
src/Controller/PublicationController.php:        $form->handleRequest($request);
src/Controller/PublicationController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/PublicationController.php:            if (null != $publication->getIdPubli()) {
src/Controller/PublicationController.php:                $sj->noticeMessage('PublicationController gererAction : La publication '.$publication->getIdPubli().' est partagée par plusieurs projets');
src/Controller/PublicationController.php:                $old = $em->getRepository(Publication::class)->find($publication->getIdPubli());
src/Controller/PublicationController.php:                if ($old->getRefbib() != $publication->getRefbib()) {
src/Controller/PublicationController.php:                    $sj->warningMessage('Changement de REFBIB de la publication '.$publication->getIdPubli());
src/Controller/PublicationController.php:                    $old->setRefbib($publication->getRefbib());
src/Controller/PublicationController.php:                if ($old->getDoi() != $publication->getDoi()) {
src/Controller/PublicationController.php:                    $sj->warningMessage('Changement de DOI de la publication '.$publication->getIdPubli());
src/Controller/PublicationController.php:                    $old->setDoi($publication->getDoi());
src/Controller/PublicationController.php:                if ($old->getOpenUrl() != $publication->getOpenUrl()) {
src/Controller/PublicationController.php:                    $sj->warningMessage('Changement de OpenUrl de la publication '.$publication->getIdPubli());
src/Controller/PublicationController.php:                    $old->setOpenUrl($publication->getOpenUrl());
src/Controller/PublicationController.php:                if ($old->getAnnee() != $publication->getAnnee()) {
src/Controller/PublicationController.php:                    $sj->warningMessage("Changement d'année de la publication ".$publication->getIdPubli());
src/Controller/PublicationController.php:                    $old->setAnnee($publication->getAnnee());
src/Controller/PublicationController.php:            $projet->addPubli($publication);
src/Controller/PublicationController.php:            $publication->addProjet($projet);
src/Controller/PublicationController.php:        $form = $this->createForm('App\Form\PublicationType', new Publication()); // on efface le formulaire
src/Controller/PublicationController.php:        return $this->render(
src/Controller/PublicationController.php:            'publications' => $projet->getPubli(),
src/Controller/PublicationController.php:            'form' => $form->createView(),
src/Controller/PublicationController.php:        return $this->render(
src/Controller/PublicationController.php:            'publications' => $projet->getPubli(),
src/Controller/PublicationController.php:        $ss = $this->ss;
src/Controller/PublicationController.php:        $data = $ss->selectAnnee($request); // formulaire
src/Controller/PublicationController.php:        $em = $this->em;
src/Controller/PublicationController.php:        $publications = $em->getRepository(Publication::class)->findBy(['annee' => $annee]);
src/Controller/PublicationController.php:        return $this->render(
src/Controller/PublicationController.php:            'form' => $data['form']->createView(), // formulaire
src/Controller/PublicationController.php:        $em = $this->em;
src/Controller/PublicationController.php:        $publications = $em->getRepository(Publication::class)->findBy(['annee' => $annee]);
src/Controller/PublicationController.php:            $line[] = '"'.str_replace(["\n", "\r\n", "\t", '"'], [' ', ' ', ' ', ' '], $publi->getRefbib()).'"';
src/Controller/PublicationController.php:            $line[] = $publi->getAnnee();
src/Controller/PublicationController.php:            $line[] = $publi->getDoi();
src/Controller/PublicationController.php:            $line[] = $publi->getOpenUrl();
src/Controller/PublicationController.php:            $line[] = join(' ', $publi->getProjet()->toArray());
src/Controller/PublicationController.php:        $form = $this->createForm('App\Form\PublicationType', $publication);
src/Controller/PublicationController.php:        $form->handleRequest($request);
src/Controller/PublicationController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/PublicationController.php:            $em = $this->em;
src/Controller/PublicationController.php:            $em->persist($publication);
src/Controller/PublicationController.php:            $em->flush();
src/Controller/PublicationController.php:            return $this->redirectToRoute('publication_show', ['id' => $publication->getId()]);
src/Controller/PublicationController.php:        return $this->render('publication/new.html.twig', [
src/Controller/PublicationController.php:            'form' => $form->createView(),
src/Controller/PublicationController.php:        $deleteForm = $this->createDeleteForm($publication);
src/Controller/PublicationController.php:        return $this->render('publication/show.html.twig', [
src/Controller/PublicationController.php:            'delete_form' => $deleteForm->createView(),
src/Controller/PublicationController.php:        $deleteForm = $this->createDeleteForm($publication);
src/Controller/PublicationController.php:        $editForm = $this->createForm('App\Form\PublicationType', $publication);
src/Controller/PublicationController.php:        $editForm->handleRequest($request);
src/Controller/PublicationController.php:        if ($editForm->isSubmitted() && $editForm->isValid()) {
src/Controller/PublicationController.php:            $this->em->flush();
src/Controller/PublicationController.php:            return $this->redirectToRoute('publication_edit', ['id' => $publication->getId()]);
src/Controller/PublicationController.php:        return $this->render('publication/edit.html.twig', [
src/Controller/PublicationController.php:            'edit_form' => $editForm->createView(),
src/Controller/PublicationController.php:            'delete_form' => $deleteForm->createView(),
src/Controller/PublicationController.php:        $sj = $this->sj;
src/Controller/PublicationController.php:        $em = $this->em;
src/Controller/PublicationController.php:        $editForm = $this->createForm('App\Form\PublicationType', $publication);
src/Controller/PublicationController.php:        $editForm->handleRequest($request);
src/Controller/PublicationController.php:        $deleteForm = $this->createFormBuilder()
src/Controller/PublicationController.php:            ->setAction($this->generateUrl('supprimer_publication', ['id' => $publication->getId(), 'projet' => $projet->getIdProjet()]))
src/Controller/PublicationController.php:            ->setMethod('DELETE')
src/Controller/PublicationController.php:            ->getForm()
src/Controller/PublicationController.php:        if ($editForm->isSubmitted() && $editForm->isValid()) {
src/Controller/PublicationController.php:            if (count($publication->getProjet()) > 1) {
src/Controller/PublicationController.php:                $sj->warningMessage('Modification de la publication  '.$publication->getIdPubli().' partagée par plusieurs projets');
src/Controller/PublicationController.php:            return $this->redirectToRoute('gerer_publications', ['id' => $projet->getIdProjet()]);
src/Controller/PublicationController.php:        return $this->render('publication/modify.html.twig', [
src/Controller/PublicationController.php:            'form' => $editForm->createView(),
src/Controller/PublicationController.php:            'delete_form' => $deleteForm->createView(),
src/Controller/PublicationController.php:        $form = $this->createDeleteForm($publication);
src/Controller/PublicationController.php:        $form->handleRequest($request);
src/Controller/PublicationController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/PublicationController.php:            $em = $this->em;
src/Controller/PublicationController.php:            $em->remove($publication);
src/Controller/PublicationController.php:            $em->flush();
src/Controller/PublicationController.php:        return $this->redirectToRoute('publication_index');
src/Controller/PublicationController.php:        $ac = $this->ac;
src/Controller/PublicationController.php:        $token = $this->tok->getToken();
src/Controller/PublicationController.php:        $sj = $this->sj;
src/Controller/PublicationController.php:        $em = $this->em;
src/Controller/PublicationController.php:        if (!$projet->isCollaborateur($token->getUser()) && !$ac->isGranted('ROLE_ADMIN')) {
src/Controller/PublicationController.php:            $sj->throwException();
src/Controller/PublicationController.php:        $projet->removePubli($publication);
src/Controller/PublicationController.php:        $publication->removeProjet($projet);
src/Controller/PublicationController.php:        if (null == $publication->getProjet()) {
src/Controller/PublicationController.php:            $em = $this->em;
src/Controller/PublicationController.php:            $em->remove($publication);
src/Controller/PublicationController.php:            $em->flush();
src/Controller/PublicationController.php:        return $this->redirectToRoute('gerer_publications', ['id' => $projet->getIdProjet()]);
src/Controller/PublicationController.php:        return $this->createFormBuilder()
src/Controller/PublicationController.php:            ->setAction($this->generateUrl('publication_delete', ['id' => $publication->getId()]))
src/Controller/PublicationController.php:            ->setMethod('DELETE')
src/Controller/PublicationController.php:            ->getForm()
src/Controller/RallongeController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/RallongeController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/RallongeController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/RallongeController.php:        $em = $this->em;
src/Controller/RallongeController.php:        $sj = $this->sj;
src/Controller/RallongeController.php:        $sp = $this->sp;
src/Controller/RallongeController.php:        $sroc = $this->sroc;
src/Controller/RallongeController.php:        $rallonges = $sp->rallongesDynParAnnee();
src/Controller/RallongeController.php:            foreach ($r->getDar() as $d) {
src/Controller/RallongeController.php:                $dars[$sroc->getNomComplet($d->getRessource())] = $d;
src/Controller/RallongeController.php:        return $this->render(
src/Controller/RallongeController.php:        $version = $rallonge->getVersion();
src/Controller/RallongeController.php:            $projet = $version->getProjet();
src/Controller/RallongeController.php:            $this->sj->throwException(__METHOD__.':'.__LINE__.' rallonge '.$rallonge." n'est pas associée à une version !");
src/Controller/RallongeController.php:        $sm = $this->sm;
src/Controller/RallongeController.php:        $ss = $this->ss;
src/Controller/RallongeController.php:        $sp = $this->sp;
src/Controller/RallongeController.php:        $sj = $this->sj;
src/Controller/RallongeController.php:        $srg = $this->srg;
src/Controller/RallongeController.php:        $em = $this->em;
src/Controller/RallongeController.php:        if (false == $sm->nouvelleRallonge($projet)['ok']) {
src/Controller/RallongeController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' impossible de créer une nouvelle rallonge pour le projet'.$projet.
src/Controller/RallongeController.php:                ' parce que : '.$sm->nouvelleRallonge($projet)['raison']);
src/Controller/RallongeController.php:        $version = $sp->versionActive($projet);
src/Controller/RallongeController.php:        $rallonge = $srg->creerRallonge($version);
src/Controller/RallongeController.php:        $request->getSession()->getFlashbag()->add('flash info', 'Rallonge créée, responsable notifié');
src/Controller/RallongeController.php:        return $this->redirectToRoute('consulter_rallonge', ['id' => $rallonge]);
src/Controller/RallongeController.php:        $sm = $this->sm;
src/Controller/RallongeController.php:        $sp = $this->sp;
src/Controller/RallongeController.php:        $sj = $this->sj;
src/Controller/RallongeController.php:        [$version, $projet] = $this->getVerProjSess($rallonge);
src/Controller/RallongeController.php:        if (!$sp->projetACL($projet) || null == $projet) {
src/Controller/RallongeController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' problème avec ACL');
src/Controller/RallongeController.php:        $menu[] = $sm->modifierRallonge($rallonge);
src/Controller/RallongeController.php:        $menu[] = $sm->envoyerEnExpertiseRallonge($rallonge);
src/Controller/RallongeController.php:        return $this->render(
src/Controller/RallongeController.php:        $sm = $this->sm;
src/Controller/RallongeController.php:        $sj = $this->sj;
src/Controller/RallongeController.php:        $sval = $this->vl;
src/Controller/RallongeController.php:        $srg = $this->srg;
src/Controller/RallongeController.php:        $em = $this->em;
src/Controller/RallongeController.php:        if (false == $sm->modifierRallonge($rallonge)['ok']) {
src/Controller/RallongeController.php:            $sj->throwException(__METHOD__.' impossible de modifier la rallonge '.$rallonge->getIdRallonge().
src/Controller/RallongeController.php:                ' parce que : '.$sm->modifierRallonge($rallonge)['raison']);
src/Controller/RallongeController.php:        $ressource_form = $srg->getRessourceForm($rallonge);
src/Controller/RallongeController.php:        $ressource_form->handleRequest($request);
src/Controller/RallongeController.php:        $data = $ressource_form->getData();
src/Controller/RallongeController.php:        // NOTE - On met à zéro les demandes qui sont invalides
src/Controller/RallongeController.php:        $validated = $srg->validateRessourceForms($ressource_forms);
src/Controller/RallongeController.php:            $request->getSession()->getFlashbag()->add('flash erreur', $message);
src/Controller/RallongeController.php:        $editForm = $this->createFormBuilder($rallonge)
src/Controller/RallongeController.php:            ->add('prjJustifRallonge', TextAreaType::class, ['required' => false])
src/Controller/RallongeController.php:            ->add('enregistrer', SubmitType::class, ['label' => 'Enregistrer'])
src/Controller/RallongeController.php:            ->add('fermer', SubmitType::class, ['label' => 'Fermer'])
src/Controller/RallongeController.php:            ->add('annuler', SubmitType::class, ['label' => 'Annuler'])
src/Controller/RallongeController.php:            ->getForm();
src/Controller/RallongeController.php:        [$version, $projet] = $this->getVerProjSess($rallonge);
src/Controller/RallongeController.php:        $editForm->handleRequest($request);
src/Controller/RallongeController.php:        if ($editForm->isSubmitted()) {
src/Controller/RallongeController.php:            if ($editForm->get('annuler')->isClicked()) {
src/Controller/RallongeController.php:                return $this->redirectToRoute('consulter_rallonge', ['id' => $rallonge->getIdRallonge()]);
src/Controller/RallongeController.php:            $em->flush();
src/Controller/RallongeController.php:            $request->getSession()->getFlashbag()->add('flash info', 'Rallonge enregistrée');
src/Controller/RallongeController.php:            if ($editForm->get('fermer')->isClicked()) {
src/Controller/RallongeController.php:                return $this->redirectToRoute('consulter_rallonge', ['id' => $rallonge->getIdRallonge()]);
src/Controller/RallongeController.php:        return $this->render(
src/Controller/RallongeController.php:            'edit_form' => $editForm->createView(),
src/Controller/RallongeController.php:            'ressource_form' => $ressource_form->createView(),
src/Controller/RallongeController.php:     * TODO - VIRER CETTE FONCTION.
src/Controller/RallongeController.php:        $sm = $this->sm;
src/Controller/RallongeController.php:        $sj = $this->sj;
src/Controller/RallongeController.php:        $sval = $this->vl;
src/Controller/RallongeController.php:        if (false == $sm->envoyerEnExpertiseRallonge($rallonge)['ok']) {
src/Controller/RallongeController.php:            $sj->throwException(__METHOD__." impossible d'envoyer la rallonge ".$rallonge->getIdRallonge().
src/Controller/RallongeController.php:                " à l'expert parce que : ".$sm->envoyerEnExpertiseRallonge($rallonge)['raison']);
src/Controller/RallongeController.php:        [$version, $projet] = $this->getVerProjSess($rallonge);
src/Controller/RallongeController.php:        return $this->render(
src/Controller/RallongeController.php:        $sm = $this->sm;
src/Controller/RallongeController.php:        $sj = $this->sj;
src/Controller/RallongeController.php:        $se = $this->se;
src/Controller/RallongeController.php:        $sval = $this->vl;
src/Controller/RallongeController.php:        if (false == $sm->envoyerEnExpertiseRallonge($rallonge)['ok']) {
src/Controller/RallongeController.php:            $sj->throwException(__METHOD__.' impossible de modifier la rallonge '.$rallonge->getIdRallonge().
src/Controller/RallongeController.php:                ' parce que : '.$sm->envoyerEnExpertiseRallonge($rallonge)['raison']);
src/Controller/RallongeController.php:        $workflow = $this->rw;
src/Controller/RallongeController.php:            $sj->warningMessage(__METHOD__.':'.__LINE__." L'envoi à l'expert de la rallonge ".$rallonge.' refusé à cause des erreurs !');
src/Controller/RallongeController.php:            return $this->redirectToRoute('avant_envoyer_rallonge', ['id' => $rallonge->getId()]);
src/Controller/RallongeController.php:        } elseif (!$workflow->canExecute(Signal::CLK_VAL_DEM, $rallonge)) {
src/Controller/RallongeController.php:            $sj->warningMessage(__METHOD__.':'.__LINE__." L'envoi à l'expert de la rallonge ".$rallonge.
src/Controller/RallongeController.php:                " refusé par le workflow, la rallonge est dans l'état ".Etat::getLibelle($rallonge->getEtatRallonge()));
src/Controller/RallongeController.php:            return $this->redirectToRoute('avant_envoyer_rallonge', ['id' => $rallonge->getId()]);
src/Controller/RallongeController.php:        $se->newExpertiseIfPossible($rallonge);
src/Controller/RallongeController.php:        $rtn = $workflow->execute(Signal::CLK_VAL_DEM, $rallonge);
src/Controller/RallongeController.php:            $request->getSession()->getFlashbag()->add('flash info', 'Votre rallonge nous a été envoyée. Vous allez recevoir un courriel de confirmation.');
src/Controller/RallongeController.php:            $sj->errorMessage(__METHOD__.':'.__LINE__.' La rallonge '.$rallonge->getIdRallonge()." n'a pas pu etre envoyée en validation.");
src/Controller/RallongeController.php:            $request->getSession()->getFlashbag()->add('flash erreur', "Votre rallonge n'a pas pu être envoyée en validation. Merci de vous rapprocher du support");
src/Controller/RallongeController.php:        [$version, $projet] = $this->getVerProjSess($rallonge);
src/Controller/RallongeController.php:        return $this->render(
src/Controller/RessourceController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/RessourceController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/RessourceController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/RessourceController.php:        $ac = $this->ac;
src/Controller/RessourceController.php:        $em = $this->em;
src/Controller/RessourceController.php:        $menu = $ac->isGranted('ROLE_ADMIN') ? [['ok' => true, 'name' => 'ajouter_ressource', 'lien' => 'Ajouter une ressource', 'commentaire' => 'Ajouter une ressource']] : [];
src/Controller/RessourceController.php:        return $this->render(
src/Controller/RessourceController.php:            'ressources' => $em->getRepository(ressource::class)->findBy([], ['nom' => 'ASC']),
src/Controller/RessourceController.php:        $sd = $this->sd;
src/Controller/RessourceController.php:        $em = $this->em;
src/Controller/RessourceController.php:        $form = $this->createForm('App\Form\RessourceType', $ressource, ['ajouter' => true]);
src/Controller/RessourceController.php:        $form->handleRequest($request);
src/Controller/RessourceController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/RessourceController.php:            $em = $this->em;
src/Controller/RessourceController.php:            $em->persist($ressource);
src/Controller/RessourceController.php:            $em->flush($ressource);
src/Controller/RessourceController.php:            $projets = $em->getRepository(Projet::class)->findNonTermines();
src/Controller/RessourceController.php:                if (null != $p->getVersionDerniere()) {
src/Controller/RessourceController.php:                    $versions[] = $p->getVersionDerniere();
src/Controller/RessourceController.php:                if (null != $p->getVersionActive()) {
src/Controller/RessourceController.php:                    $versions[] = $p->getVersionActive();
src/Controller/RessourceController.php:                    $sd->getDac($v, $ressource);
src/Controller/RessourceController.php:            return $this->redirectToRoute('gerer_ressources');
src/Controller/RessourceController.php:        return $this->render(
src/Controller/RessourceController.php:            'form' => $form->createView(),
src/Controller/RessourceController.php:        $editForm = $this->createForm('App\Form\RessourceType', $ressource, ['modifier' => true]);
src/Controller/RessourceController.php:        $editForm->handleRequest($request);
src/Controller/RessourceController.php:        if ($editForm->isSubmitted() && $editForm->isValid()) {
src/Controller/RessourceController.php:            $this->em->flush();
src/Controller/RessourceController.php:            return $this->redirectToRoute('gerer_ressources');
src/Controller/RessourceController.php:        return $this->render(
src/Controller/RessourceController.php:            'edit_form' => $editForm->createView(),
src/Controller/RessourceController.php:        $em = $this->em;
src/Controller/RessourceController.php:        $sj = $this->sj;
src/Controller/RessourceController.php:            $em->remove($ressource);
src/Controller/RessourceController.php:            $em->flush($ressource);
src/Controller/RessourceController.php:            $request->getSession()->getFlashbag()->add('flash erreur', 'Pas possible de supprimer cette ressource actuellement');
src/Controller/RessourceController.php:            $sj->errorMessage(__METHOD__.':'.__LINE__.' : '.$e->getMessage());
src/Controller/RessourceController.php:        return $this->redirectToRoute('gerer_ressources');
src/Controller/ServeurController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/ServeurController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/ServeurController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/ServeurController.php:        $ac = $this->ac;
src/Controller/ServeurController.php:        $em = $this->em;
src/Controller/ServeurController.php:        $menu = $ac->isGranted('ROLE_ADMIN') ? [['ok' => true, 'name' => 'ajouter_serveur', 'lien' => 'Ajouter un serveur', 'commentaire' => 'Ajouter un serveur']] : [];
src/Controller/ServeurController.php:        return $this->render(
src/Controller/ServeurController.php:            'serveurs' => $em->getRepository(serveur::class)->findBy([], ['nom' => 'ASC']),
src/Controller/ServeurController.php:        $su = $this->su;
src/Controller/ServeurController.php:        $em = $this->em;
src/Controller/ServeurController.php:        $form = $this->createForm('App\Form\ServeurType', $serveur, ['ajouter' => true]);
src/Controller/ServeurController.php:        $form->handleRequest($request);
src/Controller/ServeurController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/ServeurController.php:            $em = $this->em;
src/Controller/ServeurController.php:            $em->persist($serveur);
src/Controller/ServeurController.php:                $em->flush($serveur);
src/Controller/ServeurController.php:                $request->getSession()->getFlashbag()->add('flash erreur', "Le serveur n'a pas été créé (nom du serveur ou de l'utilisateur API ?");
src/Controller/ServeurController.php:                $projets = $em->getRepository(Projet::class)->findNonTermines();
src/Controller/ServeurController.php:                    if (null != $p->getVersionDerniere()) {
src/Controller/ServeurController.php:                        $versions[] = $p->getVersionDerniere();
src/Controller/ServeurController.php:                    if (null != $p->getVersionActive()) {
src/Controller/ServeurController.php:                        $versions[] = $p->getVersionActive();
src/Controller/ServeurController.php:                        foreach ($v->getCollaborateurVersion() as $cv) {
src/Controller/ServeurController.php:                            $su->getUser($cv->getCollaborateur(), $p, $serveur);
src/Controller/ServeurController.php:            return $this->redirectToRoute('gerer_serveurs');
src/Controller/ServeurController.php:        return $this->render(
src/Controller/ServeurController.php:            'form' => $form->createView(),
src/Controller/ServeurController.php:        $em = $this->em;
src/Controller/ServeurController.php:        $editForm = $this->createForm('App\Form\ServeurType', $serveur, ['modifier' => true]);
src/Controller/ServeurController.php:        $editForm->handleRequest($request);
src/Controller/ServeurController.php:        if ($editForm->isSubmitted() && $editForm->isValid()) {
src/Controller/ServeurController.php:                $em->flush();
src/Controller/ServeurController.php:                $request->getSession()->getFlashbag()->add('flash erreur', "Le serveur n'a pas été modifié (nom api ?)");
src/Controller/ServeurController.php:            return $this->redirectToRoute('gerer_serveurs');
src/Controller/ServeurController.php:        return $this->render(
src/Controller/ServeurController.php:            'edit_form' => $editForm->createView(),
src/Controller/ServeurController.php:        $em = $this->em;
src/Controller/ServeurController.php:        $sj = $this->sj;
src/Controller/ServeurController.php:        $request->getSession()->getFlashbag()->add('flash erreur', 'Fonctionnalité non implémentée');
src/Controller/ServeurController.php:        return $this->redirectToRoute('gerer_serveurs');
src/Controller/ServeurController.php:            $em->remove($serveur);
src/Controller/ServeurController.php:            $em->flush($serveur);
src/Controller/ServeurController.php:            $request->getSession()->getFlashbag()->add('flash erreur', 'Pas possible de supprimer ce serveur actuellement');
src/Controller/ServeurController.php:            $sj->errorMessage(__METHOD__.':'.__LINE__.' : '.$e->getMessage());
src/Controller/ServeurController.php:        return $this->redirectToRoute('gerer_serveurs');
src/Controller/StatistiquesController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/StatistiquesController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/StatistiquesController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/StatistiquesController.php:// ATTENTION - La fonction dd(xxx) ne MARCHE PAS à cause de la génération des camemberts !
src/Controller/StatistiquesController.php:        return $this->render('default/base_test.html.twig');
src/Controller/StatistiquesController.php:        return $this->render('default/index.html.twig', [
src/Controller/StatistiquesController.php:            'base_dir' => realpath($this->getParameter('kernel.root_dir').'/..').DIRECTORY_SEPARATOR,
src/Controller/StatistiquesController.php:        $sm = $this->sm;
src/Controller/StatistiquesController.php:        $ss = $this->ss;
src/Controller/StatistiquesController.php:        $sp = $this->sp;
src/Controller/StatistiquesController.php:        $em = $this->em;
src/Controller/StatistiquesController.php:        $prj_rep = $em->getRepository(Projet::class);
src/Controller/StatistiquesController.php:        $ver_rep = $em->getRepository(Version::class);
src/Controller/StatistiquesController.php:        return $this->render('default/oups.html.twig');
src/Controller/StatistiquesController.php:        if ($request->getSession()->has('statistiques_annee')) {
src/Controller/StatistiquesController.php:            $annee = $request->getSession()->get('statistiques_annee');
src/Controller/StatistiquesController.php:        $data = $ss->selectAnnee($request, $annee);
src/Controller/StatistiquesController.php:        $request->getSession()->set('statistiques_annee', $annee);
src/Controller/StatistiquesController.php:        if ($request->getSession()->has('statistiques_sess_lbl')) {
src/Controller/StatistiquesController.php:            $sess_lbl = $request->getSession()->get('statistiques_sess_lbl');
src/Controller/StatistiquesController.php:        $datas = $ss->selectSessLbl($request, $sess_lbl);
src/Controller/StatistiquesController.php:        $request->getSession()->set('statistiques_sess_lbl', $sess_lbl);
src/Controller/StatistiquesController.php:        $menu[] = $sm->statistiquesLaboratoire();
src/Controller/StatistiquesController.php:        $menu[] = $sm->statistiquesEtablissement($annee);
src/Controller/StatistiquesController.php:        $menu[] = $sm->statistiquesThematique($annee);
src/Controller/StatistiquesController.php:        $menu[] = $sm->statistiquesCollaborateur($annee);
src/Controller/StatistiquesController.php:        $menu[] = $sm->statistiquesRepartition();
src/Controller/StatistiquesController.php:        [$projets, $total] = $this->sp->projetsParAnnee($annee, false, false, $sess_lbl);
src/Controller/StatistiquesController.php:        return $this->render(
src/Controller/StatistiquesController.php:                'form' => $data['form']->createView(),
src/Controller/StatistiquesController.php:        $sm = $this->sm;
src/Controller/StatistiquesController.php:        $ss = $this->ss;
src/Controller/StatistiquesController.php:        $sp = $this->sp;
src/Controller/StatistiquesController.php:        $em = $this->em;
src/Controller/StatistiquesController.php:        $prj_rep = $em->getRepository(Projet::class);
src/Controller/StatistiquesController.php:        $ver_rep = $em->getRepository(Version::class);
src/Controller/StatistiquesController.php:        // return $this->render('default/oups.html.twig');
src/Controller/StatistiquesController.php:        if ($request->getSession()->has('statistiques_annee')) {
src/Controller/StatistiquesController.php:            $annee = $request->getSession()->get('statistiques_annee');
src/Controller/StatistiquesController.php:        $data = $ss->selectAnnee($request, $annee);
src/Controller/StatistiquesController.php:        $request->getSession()->set('statistiques_annee', $annee);
src/Controller/StatistiquesController.php:        // $menu[] = $sm->statistiquesLaboratoire();
src/Controller/StatistiquesController.php:        // $menu[] = $sm->statistiquesEtablissement($annee);
src/Controller/StatistiquesController.php:        // $menu[] = $sm->statistiquesThematique($annee);
src/Controller/StatistiquesController.php:        // $menu[] = $sm->statistiquesCollaborateur($annee);
src/Controller/StatistiquesController.php:        // $menu[] = $sm->statistiquesRepartition();
src/Controller/StatistiquesController.php:        [$projets, $total, $repartition] = $this->sp->projetsDynParAnnee($annee);
src/Controller/StatistiquesController.php:        return $this->render(
src/Controller/StatistiquesController.php:                'form' => $data['form']->createView(),
src/Controller/StatistiquesController.php:        $sm = $this->sm;
src/Controller/StatistiquesController.php:        $ss = $this->ss;
src/Controller/StatistiquesController.php:        $sp = $this->sp;
src/Controller/StatistiquesController.php:        $em = $this->em;
src/Controller/StatistiquesController.php:        $fvstats = $em->getRepository(FormationVersion::class)->findStats();
src/Controller/StatistiquesController.php:        return $this->render('statistiques/formation.html.twig', ['fvstats' => $fvstats]);
src/Controller/StatistiquesController.php:        $sm = $this->sm;
src/Controller/StatistiquesController.php:        $ss = $this->ss;
src/Controller/StatistiquesController.php:        $sj = $this->sj;
src/Controller/StatistiquesController.php:        $em = $this->em;
src/Controller/StatistiquesController.php:        if ($request->getSession()->has('statistiques_annee')) {
src/Controller/StatistiquesController.php:            $annee = $request->getSession()->get('statistiques_annee');
src/Controller/StatistiquesController.php:            return $this->redirectToRoute('statistiques');
src/Controller/StatistiquesController.php:        if ($request->getSession()->has('statistiques_sess_lbl')) {
src/Controller/StatistiquesController.php:            $sess_lbl = $request->getSession()->get('statistiques_sess_lbl');
src/Controller/StatistiquesController.php:            return $this->redirectToRoute('statistiques');
src/Controller/StatistiquesController.php:            $versions = $em->getRepository(Version::class)->findVersionsAnnee($annee);
src/Controller/StatistiquesController.php:            $id_version = strval(intval($annee) - 2000).$sess_lbl;
src/Controller/StatistiquesController.php:            $versions = $em->getRepository(Version::class)->findSessionVersions($id_version);
src/Controller/StatistiquesController.php:            $collaborateurVersions = $version->getCollaborateurVersion();
src/Controller/StatistiquesController.php:                if (null == $collaborateurVersion->getCollaborateur()) {
src/Controller/StatistiquesController.php:                    $sj->errorMessage(__METHOD__.':'.__LINE__.' Collaborateur null dans un collaborateurVersion de la version '.$version);
src/Controller/StatistiquesController.php:                if (true == $collaborateurVersion->getLogin()) {
src/Controller/StatistiquesController.php:            $idProjet = $version->getProjet()->getIdProjet();
src/Controller/StatistiquesController.php:            $histo_comptes = $this->line("Répartition des projets par nombre de projets pour l'année ".$annee, $count_comptes);
src/Controller/StatistiquesController.php:            $histo_coll = $this->line("Répartition des projets par nombre de collaborateurs pour l'année ".$annee, $count_collaborateurs);
src/Controller/StatistiquesController.php:        return $this->render(
src/Controller/StatistiquesController.php:            // 'histogram_collaborateurs' => $this->histogram("Collaborateurs par projet pour l'année " + $annee, $collaborateurs),
src/Controller/StatistiquesController.php:            // 'histogram_comptes' => $this->histogram("Comptes par projet pour l'année " + $annee, $comptes),
src/Controller/StatistiquesController.php:        $sm = $this->sm;
src/Controller/StatistiquesController.php:        $ss = $this->ss;
src/Controller/StatistiquesController.php:        $em = $this->em;
src/Controller/StatistiquesController.php:        if ($request->getSession()->has('statistiques_annee')) {
src/Controller/StatistiquesController.php:            $annee = $request->getSession()->get('statistiques_annee');
src/Controller/StatistiquesController.php:            return $this->redirectToRoute('statistiques');
src/Controller/StatistiquesController.php:        if ($request->getSession()->has('statistiques_sess_lbl')) {
src/Controller/StatistiquesController.php:            $sess_lbl = $request->getSession()->get('statistiques_sess_lbl');
src/Controller/StatistiquesController.php:            return $this->redirectToRoute('statistiques');
src/Controller/StatistiquesController.php:        $versions = $em->getRepository(Version::class)->findVersionsAnnee($annee);
src/Controller/StatistiquesController.php:        foreach ($em->getRepository(Statut::class)->findAll() as $statut) {
src/Controller/StatistiquesController.php:            $statuts[$statut->getIdStatut()] = ['statut' => $statut, 'individus' => [], 'count' => 0];
src/Controller/StatistiquesController.php:        foreach ($em->getRepository(Laboratoire::class)->findAll() as $laboratoire) {
src/Controller/StatistiquesController.php:            $laboratoires[$laboratoire->getIdLabo()] = ['laboratoire' => $laboratoire, 'individus' => [], 'count' => 0];
src/Controller/StatistiquesController.php:        foreach ($em->getRepository(Etablissement::class)->findAll() as $etablissement) {
src/Controller/StatistiquesController.php:            $etablissements[$etablissement->getIdEtab()] = ['etablissement' => $etablissement, 'individus' => [], 'count' => 0];
src/Controller/StatistiquesController.php:            foreach ($version->getCollaborateurVersion() as $collaborateurVersion) {
src/Controller/StatistiquesController.php:                $individu = $collaborateurVersion->getCollaborateur();
src/Controller/StatistiquesController.php:                $statut = $collaborateurVersion->getStatut();
src/Controller/StatistiquesController.php:                $laboratoire = $collaborateurVersion->getLabo();
src/Controller/StatistiquesController.php:                $etablissement = $collaborateurVersion->getEtab();
src/Controller/StatistiquesController.php:                // TODO - Arranger ce truc - cf. ticket #223
src/Controller/StatistiquesController.php:                $statuts[$statut->getId()]['individus'][$individu->getIdIndividu()] = $individu;
src/Controller/StatistiquesController.php:                $laboratoires[$laboratoire->getId()]['individus'][$individu->getIdIndividu()] = $individu;
src/Controller/StatistiquesController.php:                $etablissements[$etablissement->getId()]['individus'][$individu->getIdIndividu()] = $individu;
src/Controller/StatistiquesController.php:                $individus[$individu->getIdIndividu()][$collaborateurVersion->getId()] =
src/Controller/StatistiquesController.php:                        if ($version1->typeSession() == $version2->typeSession()) {
src/Controller/StatistiquesController.php:                        if ($version1->typeSession() == $version2->typeSession()) {
src/Controller/StatistiquesController.php:                        if ($version1->typeSession() == $version2->typeSession()) {
src/Controller/StatistiquesController.php:                $acros[] = $statut['statut']->__toString();
src/Controller/StatistiquesController.php:        $image_statuts = $this->camembert($image_data, $acros, 'Nombre de collaborateurs par statut');
src/Controller/StatistiquesController.php:                $acros[] = $laboratoire['laboratoire']->getAcroLabo();
src/Controller/StatistiquesController.php:        $image_laboratoires = $this->camembert($image_data, $acros, 'Nombre de collaborateurs par laboratoire');
src/Controller/StatistiquesController.php:                $acros[] = $etablissement['etablissement']->__toString();
src/Controller/StatistiquesController.php:        $image_etablissements = $this->camembert($image_data, $acros, 'Nombre de collaborateurs par établissement');
src/Controller/StatistiquesController.php:        return $this->render(
src/Controller/StatistiquesController.php:        $sm = $this->sm;
src/Controller/StatistiquesController.php:        $ss = $this->ss;
src/Controller/StatistiquesController.php:        if ($request->getSession()->has('statistiques_annee')) {
src/Controller/StatistiquesController.php:            $annee = $request->getSession()->get('statistiques_annee');
src/Controller/StatistiquesController.php:            return $this->redirectToRoute('statistiques');
src/Controller/StatistiquesController.php:        if ($request->getSession()->has('statistiques_sess_lbl')) {
src/Controller/StatistiquesController.php:            $sess_lbl = $request->getSession()->get('statistiques_sess_lbl');
src/Controller/StatistiquesController.php:            return $this->redirectToRoute('statistiques');
src/Controller/StatistiquesController.php:        $stats = $this->statistiques($annee, $sess_lbl, $critere, $titre);
src/Controller/StatistiquesController.php:        return $this->render(
src/Controller/StatistiquesController.php:        return $this->parCritere($request, 'getAcroLaboratoire', 'laboratoire');
src/Controller/StatistiquesController.php:        return $this->parCritere($request, 'getAcroEtablissement', 'établissement');
src/Controller/StatistiquesController.php:        return $this->parCritere($request, 'getAcroThematique', 'thématique');
src/Controller/StatistiquesController.php:        $em = $this->em;
src/Controller/StatistiquesController.php:        if ($request->getSession()->has('statistiques_annee')) {
src/Controller/StatistiquesController.php:            $annee = $request->getSession()->get('statistiques_annee');
src/Controller/StatistiquesController.php:        if ($request->getSession()->has('statistiques_sess_lbl')) {
src/Controller/StatistiquesController.php:            $sess_lbl = $request->getSession()->get('statistiques_sess_lbl');
src/Controller/StatistiquesController.php:        $sortie = "Année $annee - ";
src/Controller/StatistiquesController.php:            $sortie .= "Session $sess_lbl - ";
src/Controller/StatistiquesController.php:        $stats = $this->statistiques($annee, $sess_lbl, $critere, $titre);
src/Controller/StatistiquesController.php:        return $this->parCritereCSV($request, $annee, 'getAcroThematique', 'thématique');
src/Controller/StatistiquesController.php:        return $this->parCritereCSV($request, $annee, 'getAcroLaboratoire', 'laboratoire');
src/Controller/StatistiquesController.php:        return $this->parCritereCSV($request, $annee, 'getAcroEtablissement', 'établissement');
src/Controller/StatistiquesController.php:     * NOTE - Si $sess_lbl vaut A ou B on ne renvoie PAS les projets fil de l'eau
src/Controller/StatistiquesController.php:        $sp = $this->sp;
src/Controller/StatistiquesController.php:        $stats = $sp->projetsParCritere($annee, $sess_lbl, $critere);
src/Controller/StatistiquesController.php:        $image_projets = $this->camembert($image_data, $acros, 'Nombre de projets par '.$titre);
src/Controller/StatistiquesController.php:        $image_dem = $this->camembert($image_data, $acros, "Nombre d'heures demandées par ".$titre);
src/Controller/StatistiquesController.php:        $image_attr = $this->camembert($image_data, $acros, "Nombre d'heures attribuées par ".$titre);
src/Controller/StatistiquesController.php:        $image_conso = $this->camembert($image_data, $acros, 'Consommation par '.$titre);
src/Controller/StatistiquesController.php:        $graph->SetMargin(60, 60, 50, 50);
src/Controller/StatistiquesController.php:        // $graph->SetMargin(160,160,150,150);
src/Controller/StatistiquesController.php:        $graph->SetMarginColor('silver');
src/Controller/StatistiquesController.php:        $graph->SetFrame(true, 'silver');
src/Controller/StatistiquesController.php:        // $graph->legend->SetFrameWeight(1);
src/Controller/StatistiquesController.php:        $graph->legend->SetFrameWeight(1);
src/Controller/StatistiquesController.php:        //      $graph->SetShadow();
src/Controller/StatistiquesController.php:        $graph->title->Set($titre);
src/Controller/StatistiquesController.php:        $graph->legend->Pos($xlegend, $ylegend);
src/Controller/StatistiquesController.php:        $p1->SetLegends($acros);
src/Controller/StatistiquesController.php:        $p1->SetCenter($xcenter, $ycenter);
src/Controller/StatistiquesController.php:        $graph->Add($p1);
src/Controller/StatistiquesController.php:        $p1->SetTheme('earth');
src/Controller/StatistiquesController.php:        // $p1->SetSliceColors(color);
src/Controller/StatistiquesController.php:        $graph->Stroke();
src/Controller/StatistiquesController.php:        $graph->setScale('textlin');
src/Controller/StatistiquesController.php:        $graph->SetMargin(60, 60, 50, 50);
src/Controller/StatistiquesController.php:        $graph->SetMarginColor('silver');
src/Controller/StatistiquesController.php:        $graph->SetFrame(true, 'silver');
src/Controller/StatistiquesController.php:        $graph->legend->SetFrameWeight(1);
src/Controller/StatistiquesController.php:        $graph->add($histo);
src/Controller/StatistiquesController.php:        // ~ $graphe->xaxis->scale->SetAutoMin($legende[0]);
src/Controller/StatistiquesController.php:        $graph->xaxis->SetTickLabels($legende);
src/Controller/StatistiquesController.php:        $graph->title->set($titre);
src/Controller/StatistiquesController.php:        $graph->Stroke();
src/Controller/StatistiquesController.php:        $graph->SetScale('textlin');
src/Controller/StatistiquesController.php:        $graph->SetMargin(60, 60, 50, 50);
src/Controller/StatistiquesController.php:        $graph->SetMarginColor('silver');
src/Controller/StatistiquesController.php:        $graph->SetFrame(true, 'silver');
src/Controller/StatistiquesController.php:        $graph->title->Set($titre);
src/Controller/StatistiquesController.php:        $graph->xgrid->Show();
src/Controller/StatistiquesController.php:        $graph->xaxis->SetTickLabels($x);
src/Controller/StatistiquesController.php:        // $constante_limite->SetColor('#FF0000');
src/Controller/StatistiquesController.php:        // $constante_limite->SetLegend('Quotas');
src/Controller/StatistiquesController.php:        // $graph->Add($constante_limite);
src/Controller/StatistiquesController.php:        $courbe->SetLegend('Projets');
src/Controller/StatistiquesController.php:        $courbe->SetColor('#2E64FE');
src/Controller/StatistiquesController.php:        // $aff_limite->SetColor('#FFFFFF');
src/Controller/StatistiquesController.php:        $graph->Add($courbe);
src/Controller/StatistiquesController.php:        // $graph->Add($constante_limite);
src/Controller/StatistiquesController.php:        // $graph->Add($aff_limite);
src/Controller/StatistiquesController.php:        $graph->legend->SetFrameWeight(1);
src/Controller/StatistiquesController.php:        $graph->legend->SetLayout(1); // LEGEND_HOR
src/Controller/StatistiquesController.php:        $graph->legend->SetPos(0.5, 0.98, 'center', 'bottom');
src/Controller/StatistiquesController.php:        $graph->Stroke();
src/Controller/StatistiquesController.php:        // $body = $twig->render( '<img src="data:image/png;base64, {{ EncodedImage }}" />' ,  [ 'EncodedImage' => $image,      ] );
src/Controller/StatutController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/StatutController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/StatutController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/StatutController.php:        $em = $this->em;
src/Controller/StatutController.php:        $statuts = $em->getRepository(Statut::class)->findAll();
src/Controller/StatutController.php:        return $this->render('statut/index.html.twig', [
src/Controller/StatutController.php:        $form = $this->createForm('App\Form\StatutType', $statut);
src/Controller/StatutController.php:        $form->handleRequest($request);
src/Controller/StatutController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/StatutController.php:            $em = $this->em;
src/Controller/StatutController.php:            $em->persist($statut);
src/Controller/StatutController.php:            $em->flush($statut);
src/Controller/StatutController.php:            return $this->redirectToRoute('statut_show', ['id' => $statut->getId()]);
src/Controller/StatutController.php:        return $this->render('statut/new.html.twig', [
src/Controller/StatutController.php:            'form' => $form->createView(),
src/Controller/StatutController.php:        $deleteForm = $this->createDeleteForm($statut);
src/Controller/StatutController.php:        return $this->render('statut/show.html.twig', [
src/Controller/StatutController.php:            'delete_form' => $deleteForm->createView(),
src/Controller/StatutController.php:        $deleteForm = $this->createDeleteForm($statut);
src/Controller/StatutController.php:        $editForm = $this->createForm('App\Form\StatutType', $statut);
src/Controller/StatutController.php:        $editForm->handleRequest($request);
src/Controller/StatutController.php:        if ($editForm->isSubmitted() && $editForm->isValid()) {
src/Controller/StatutController.php:            $this->em->flush();
src/Controller/StatutController.php:            return $this->redirectToRoute('statut_edit', ['id' => $statut->getId()]);
src/Controller/StatutController.php:        return $this->render('statut/edit.html.twig', [
src/Controller/StatutController.php:            'edit_form' => $editForm->createView(),
src/Controller/StatutController.php:            'delete_form' => $deleteForm->createView(),
src/Controller/StatutController.php:        $form = $this->createDeleteForm($statut);
src/Controller/StatutController.php:        $form->handleRequest($request);
src/Controller/StatutController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/StatutController.php:            $em = $this->em;
src/Controller/StatutController.php:            $em->remove($statut);
src/Controller/StatutController.php:            $em->flush($statut);
src/Controller/StatutController.php:        return $this->redirectToRoute('statut_index');
src/Controller/StatutController.php:        return $this->createFormBuilder()
src/Controller/StatutController.php:            ->setAction($this->generateUrl('statut_delete', ['id' => $statut->getId()]))
src/Controller/StatutController.php:            ->setMethod('DELETE')
src/Controller/StatutController.php:            ->getForm()
src/Controller/ThematiqueController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/ThematiqueController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/ThematiqueController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/ThematiqueController.php:        $em = $this->em;
src/Controller/ThematiqueController.php:        $thematiques = $em->getRepository(Thematique::class)->findAll();
src/Controller/ThematiqueController.php:        return $this->render('thematique/index.html.twig', [
src/Controller/ThematiqueController.php:        $ac = $this->ac;
src/Controller/ThematiqueController.php:        $em = $this->em;
src/Controller/ThematiqueController.php:        $menu = $ac->isGranted('ROLE_ADMIN') ? [['ok' => true, 'name' => 'ajouter_thematique', 'lien' => 'Ajouter une thématique', 'commentaire' => 'Ajouter une thématique']] : [];
src/Controller/ThematiqueController.php:        return $this->render(
src/Controller/ThematiqueController.php:            'thematiques' => $em->getRepository(Thematique::class)->findBy([], ['libelleThematique' => 'ASC']),
src/Controller/ThematiqueController.php:        $em = $this->em;
src/Controller/ThematiqueController.php:        $form = $this->createForm(
src/Controller/ThematiqueController.php:            'experts' => $em->getRepository(Individu::class)->findBy(['expert' => true]),
src/Controller/ThematiqueController.php:        $form->handleRequest($request);
src/Controller/ThematiqueController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/ThematiqueController.php:            $em = $this->em;
src/Controller/ThematiqueController.php:            $em->persist($thematique);
src/Controller/ThematiqueController.php:            $em->flush($thematique);
src/Controller/ThematiqueController.php:            return $this->redirectToRoute('gerer_thematiques');
src/Controller/ThematiqueController.php:        return $this->render(
src/Controller/ThematiqueController.php:            'edit_form' => $form->createView(),
src/Controller/ThematiqueController.php:        $em = $this->em;
src/Controller/ThematiqueController.php:        $em->remove($thematique);
src/Controller/ThematiqueController.php:            $em->flush();
src/Controller/ThematiqueController.php:            $request->getSession()->getFlashbag()->add('flash erreur', $e->getMessage());
src/Controller/ThematiqueController.php:        return $this->redirectToRoute('gerer_thematiques');
src/Controller/ThematiqueController.php:        $em = $this->em;
src/Controller/ThematiqueController.php:        $editForm = $this->createForm(
src/Controller/ThematiqueController.php:            'experts' => $em->getRepository(Individu::class)->findBy(['expert' => true]),
src/Controller/ThematiqueController.php:        $editForm->handleRequest($request);
src/Controller/ThematiqueController.php:        if ($editForm->isSubmitted() && $editForm->isValid()) {
src/Controller/ThematiqueController.php:            $this->em->flush();
src/Controller/ThematiqueController.php:            return $this->redirectToRoute('gerer_thematiques');
src/Controller/ThematiqueController.php:        return $this->render(
src/Controller/ThematiqueController.php:            'edit_form' => $editForm->createView(),
src/Controller/ThematiqueController.php:        $deleteForm = $this->createDeleteForm($thematique);
src/Controller/ThematiqueController.php:        return $this->render('thematique/show.html.twig', [
src/Controller/ThematiqueController.php:            'delete_form' => $deleteForm->createView(),
src/Controller/ThematiqueController.php:        $deleteForm = $this->createDeleteForm($thematique);
src/Controller/ThematiqueController.php:        $editForm = $this->createForm('App\Form\ThematiqueType', $thematique);
src/Controller/ThematiqueController.php:        $editForm->handleRequest($request);
src/Controller/ThematiqueController.php:        if ($editForm->isSubmitted() && $editForm->isValid()) {
src/Controller/ThematiqueController.php:            $this->em->flush();
src/Controller/ThematiqueController.php:            return $this->redirectToRoute('thematique_edit', ['id' => $thematique->getId()]);
src/Controller/ThematiqueController.php:        return $this->render('thematique/edit.html.twig', [
src/Controller/ThematiqueController.php:            'edit_form' => $editForm->createView(),
src/Controller/ThematiqueController.php:            'delete_form' => $deleteForm->createView(),
src/Controller/ThematiqueController.php:        $form = $this->createDeleteForm($thematique);
src/Controller/ThematiqueController.php:        $form->handleRequest($request);
src/Controller/ThematiqueController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/ThematiqueController.php:            $em = $this->em;
src/Controller/ThematiqueController.php:            $em->remove($thematique);
src/Controller/ThematiqueController.php:            $em->flush($thematique);
src/Controller/ThematiqueController.php:        return $this->redirectToRoute('thematique_index');
src/Controller/ThematiqueController.php:        return $this->createFormBuilder()
src/Controller/ThematiqueController.php:            ->setAction($this->generateUrl('thematique_delete', ['id' => $thematique->getId()]))
src/Controller/ThematiqueController.php:            ->setMethod('DELETE')
src/Controller/ThematiqueController.php:            ->getForm()
src/Controller/UserController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/UserController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/UserController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/UserController.php:     * NOTE - Le demandeur ne peut PAS CHANGER AUTRE CHOSE
src/Controller/UserController.php:        $em = $this->em;
src/Controller/UserController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' ERREUR INTERNE: User null');
src/Controller/UserController.php:        $individu = $user->getIndividu();
src/Controller/UserController.php:        $clessh = $em->getRepository(Clessh::class)->findBy(['individu' => $individu, 'rvk' => false]);
src/Controller/UserController.php:        $old_clessh = $user->getClessh();
src/Controller/UserController.php:        $form = $this->createForm(UserType::class, $user, ['clessh' => $clessh]);
src/Controller/UserController.php:        $form->handleRequest($request);
src/Controller/UserController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/UserController.php:            if (false == $form->getData()->getCgu()) {
src/Controller/UserController.php:                $request->getSession()->getFlashbag()->add('flash erreur', 'Vous devez accepter les CGU');
src/Controller/UserController.php:                $new_clessh = $form->getData()->getClessh();
src/Controller/UserController.php:                    if (null != $new_clessh && $old_clessh->getId() != $new_clessh->getId()) {
src/Controller/UserController.php:                        $user->setDeply(false);
src/Controller/UserController.php:                $em->flush();
src/Controller/UserController.php:                return $this->redirectToRoute('projet_accueil');
src/Controller/UserController.php:        // TODO - Traitement d'erreur si serveur est null
src/Controller/UserController.php:        $serveur_nom = $user->getServeur()->getNom();
src/Controller/UserController.php:        $serveur_cgu = $user->getServeur()->getCguUrl();
src/Controller/UserController.php:        return $this->render('user/modif.html.twig', [
src/Controller/UserController.php:            'form' => $form->createView(),
src/Controller/VersionController.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/VersionController.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Controller/VersionController.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        $versions = $em->getRepository(Version::class)->findAll();
src/Controller/VersionController.php:        return $this->render('version/index.html.twig', [
src/Controller/VersionController.php:        $form = $this->createForm('App\Form\VersionType', $version);
src/Controller/VersionController.php:        $form->handleRequest($request);
src/Controller/VersionController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/VersionController.php:            $em = $this->em;
src/Controller/VersionController.php:            $em->persist($version);
src/Controller/VersionController.php:            $em->flush($version);
src/Controller/VersionController.php:            return $this->redirectToRoute('version_show', ['id' => $version->getId()]);
src/Controller/VersionController.php:        return $this->render('version/new.html.twig', [
src/Controller/VersionController.php:            'form' => $form->createView(),
src/Controller/VersionController.php:        $sm = $this->sm;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        if (false === $sm->modifierVersion($version)['ok']) {
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' impossible de supprimer la version '.$version->getIdVersion().
src/Controller/VersionController.php:                ' parce que : '.$sm->modifierVersion($version)['raison']);
src/Controller/VersionController.php:        return $this->render(
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        $sm = $this->sm;
src/Controller/VersionController.php:        $sv = $this->sv;
src/Controller/VersionController.php:        $sp = $this->sp;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        if (false === $sm->modifierVersion($version)['ok']) {
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' impossible de supprimer la version '.$version->getIdVersion().
src/Controller/VersionController.php:                ' parce que : '.$sm->modifierVersion($version)['raison']);
src/Controller/VersionController.php:        $sp->supprimerVersion($version);
src/Controller/VersionController.php:        return $this->redirectToRoute('projet_accueil');
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        $sm = $this->sm;
src/Controller/VersionController.php:        $sv = $this->sv;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        $ac = $this->ac;
src/Controller/VersionController.php:        // ACL - Les mêmes que pour supprimer version !
src/Controller/VersionController.php:        if (false === $sm->modifierVersion($version)['ok']) {
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' impossible de supprimer des images de cette version '.$version->getIdVersion().
src/Controller/VersionController.php:                ' parce que : '.$sm->modifierVersion($version)['raison']);
src/Controller/VersionController.php:        $etat = $version->getEtatVersion();
src/Controller/VersionController.php:        if (null === $version->getProjet()) {
src/Controller/VersionController.php:            $idVersion = $version->getIdVersion();
src/Controller/VersionController.php:            $idProjet = $version->getProjet()->getIdProjet();
src/Controller/VersionController.php:        if (Etat::EDITION_DEMANDE === $etat || $ac->isGranted('ROLE_ADMIN')) {
src/Controller/VersionController.php:            $sv->effacerFichier($version, $filename);
src/Controller/VersionController.php:        $sv = $this->sv;
src/Controller/VersionController.php:        $sp = $this->sp;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        $spdf = $this->pdf;
src/Controller/VersionController.php:        $projet = $version->getProjet();
src/Controller/VersionController.php:        if (!$sp->projetACL($projet)) {
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' problème avec ACL');
src/Controller/VersionController.php:            $sv->imageProperties('img_expose_1', 'Figure 1', $version),
src/Controller/VersionController.php:            $sv->imageProperties('img_expose_2', 'Figure 2', $version),
src/Controller/VersionController.php:            $sv->imageProperties('img_expose_3', 'Figure 3', $version),
src/Controller/VersionController.php:            $sv->imageProperties('img_justif_renou_1', 'Figure 1', $version),
src/Controller/VersionController.php:            $sv->imageProperties('img_justif_renou_2', 'Figure 2', $version),
src/Controller/VersionController.php:            $sv->imageProperties('img_justif_renou_3', 'Figure 3', $version),
src/Controller/VersionController.php:        $html4pdf = $this->render(
src/Controller/VersionController.php:        // NOTE - Pour déboguer la version pdf, décommentez
src/Controller/VersionController.php:        $pdf = $spdf->setOption('enable-local-file-access', true);
src/Controller/VersionController.php:        $pdf = $spdf->getOutputFromHtml($html4pdf->getContent());
src/Controller/VersionController.php:        $sm = $this->sm;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        $spdf = $this->pdf;
src/Controller/VersionController.php:        $projet = $version->getProjet();
src/Controller/VersionController.php:        if (false === $sm->telechargerFiche($version)['ok']) {
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' impossible de télécharger la fiche du projet '.$projet.
src/Controller/VersionController.php:                ' parce que : '.$sm->telechargerFiche($version)['raison']);
src/Controller/VersionController.php:        $html4pdf = $this->render(
src/Controller/VersionController.php:        // $html4pdf->prepare($request);
src/Controller/VersionController.php:        // $pdf = App::getPDF($html4pdf->getContent());
src/Controller/VersionController.php:        $pdf = $spdf->getOutputFromHtml($html4pdf->getContent());
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        $sm = $this->sm;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        if (false === $sm->televerserFiche($version)['ok']) {
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' impossible de téléverser la fiche de la version '.$version.
src/Controller/VersionController.php:                ' parce que : '.$sm->televerserFiche($version)['raison']);
src/Controller/VersionController.php:        $rtn = $this->televerser($request, $version, 'fiche.pdf');
src/Controller/VersionController.php:            return $this->render(
src/Controller/VersionController.php:                    'form' => $rtn->createView(),
src/Controller/VersionController.php:                $this->modifyFiche($version);
src/Controller/VersionController.php:                $request->getSession()->getFlashbag()->add('flash info', 'La fiche projet a été correctement téléversée');
src/Controller/VersionController.php:                return $this->redirectToRoute('consulter_projet', ['id' => $version->getProjet()->getIdProjet()]);
src/Controller/VersionController.php:                $request->getSession()->getFlashbag()->add('flash erreur', strip_tags($resultat['message']));
src/Controller/VersionController.php:                return $this->redirectToRoute('version_televerser_fiche', ['id' => $version->getIdVersion()]);
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        $sm = $this->sm;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        $rtn = $this->televerser($request, $version, 'fiche.pdf');
src/Controller/VersionController.php:            return $this->render(
src/Controller/VersionController.php:                    'form' => $rtn->createView(),
src/Controller/VersionController.php:                $this->modifyFiche($version);
src/Controller/VersionController.php:                $request->getSession()->getFlashbag()->add('flash info', 'La fiche projet a été correctement téléversée');
src/Controller/VersionController.php:                return $this->redirectToRoute('consulter_projet', ['id' => $version->getProjet()->getIdProjet()]);
src/Controller/VersionController.php:                $request->getSession()->getFlashbag()->add('flash erreur', strip_tags($resultat['message']));
src/Controller/VersionController.php:                return $this->redirectToRoute('version_televerser_fiche', ['id' => $version->getIdVersion()]);
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        $version->setPrjFicheVal(true);
src/Controller/VersionController.php:        $em->persist($version);
src/Controller/VersionController.php:        $em->flush();
src/Controller/VersionController.php:        $sm = $this->sm;
src/Controller/VersionController.php:        $sn = $this->sn;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        $sv = $this->sv;
src/Controller/VersionController.php:        $ff = $this->ff;
src/Controller/VersionController.php:        $token = $this->tok->getToken();
src/Controller/VersionController.php:        $moi = $token->getUser();
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' version null');
src/Controller/VersionController.php:        if (false === $sm->changerResponsable($version)['ok']) {
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.
src/Controller/VersionController.php:                    ' impossible de changer de responsable parce que '.$sm->changerResponsable($version)['raison']);
src/Controller/VersionController.php:        $moi = $token->getUser();
src/Controller/VersionController.php:        $collaborateurs = $version->getCollaborateurs(false, true, $moi); // pas moi, seulement les éligibles
src/Controller/VersionController.php:            ->add(
src/Controller/VersionController.php:            ->add('submit', SubmitType::class, ['label' => 'Nouveau responsable'])
src/Controller/VersionController.php:            ->getForm();
src/Controller/VersionController.php:        $change_form->handleRequest($request);
src/Controller/VersionController.php:        $projet = $version->getProjet();
src/Controller/VersionController.php:            $idProjet = $projet->getIdProjet();
src/Controller/VersionController.php:            $sj->errorMessage(__METHOD__.':'.__LINE__.' projet null pour version '.$version->getIdVersion());
src/Controller/VersionController.php:        if ($change_form->isSubmitted() && $change_form->isValid()) {
src/Controller/VersionController.php:            $ancien_responsable = $version->getResponsable();
src/Controller/VersionController.php:            $nouveau_responsable = $change_form->getData()['responsable'];
src/Controller/VersionController.php:                return $this->redirectToRoute('consulter_version', ['id' => $idProjet, 'version' => $version->getId()]);
src/Controller/VersionController.php:                $sv->changerResponsable($version, $nouveau_responsable);
src/Controller/VersionController.php:                $sn->sendMessage(
src/Controller/VersionController.php:                    'notification/changement_resp_pour_ancien-sujet.html.twig',
src/Controller/VersionController.php:                    'notification/changement_resp_pour_ancien-contenu.html.twig',
src/Controller/VersionController.php:                $sn->sendMessage(
src/Controller/VersionController.php:                    'notification/changement_resp_pour_nouveau-sujet.html.twig',
src/Controller/VersionController.php:                    'notification/changement_resp_pour_nouveau-contenu.html.twig',
src/Controller/VersionController.php:                $sn->sendMessage(
src/Controller/VersionController.php:                    'notification/changement_resp_pour_admin-sujet.html.twig',
src/Controller/VersionController.php:                    'notification/changement_resp_pour_admin-contenu.html.twig',
src/Controller/VersionController.php:                    $sn->mailUsers(['A'], null)
src/Controller/VersionController.php:            return $this->redirectToRoute(
src/Controller/VersionController.php:                    'version' => $version->getIdVersion(),
src/Controller/VersionController.php:        return $this->render(
src/Controller/VersionController.php:                'change_form' => $change_form->createView(),
src/Controller/VersionController.php:        $sm = $this->sm;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        $sval = $this->vl;
src/Controller/VersionController.php:        $sv = $this->sv;
src/Controller/VersionController.php:        $sr = $this->sr;
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        if (false === $sm->modifierCollaborateurs($version)['ok']) {
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' impossible de modifier la liste des collaborateurs de la version '.$version.
src/Controller/VersionController.php:                ' parce que : '.$sm->modifierCollaborateurs($version)['raison']);
src/Controller/VersionController.php:        if ($this->getParameter('resp_peut_modif_collabs')) {
src/Controller/VersionController.php:        $collaborateur_form = $this->ff
src/Controller/VersionController.php:                                   ->createNamedBuilder('form_projet', FormType::class, [
src/Controller/VersionController.php:                                       'individus' => $sv->prepareCollaborateurs($version, $sj, $sval),
src/Controller/VersionController.php:                                   ->add('individus', CollectionType::class, [
src/Controller/VersionController.php:                                       'attr' => ['class' => 'profil-horiz'],
src/Controller/VersionController.php:                                       'entry_options' => ['text_fields' => $text_fields, 'srv_noms' => $sr->getnoms()],
src/Controller/VersionController.php:                                   ->add('submit', SubmitType::class, [
src/Controller/VersionController.php:                                   ->add('annuler', SubmitType::class, [
src/Controller/VersionController.php:                                   ->getForm();
src/Controller/VersionController.php:        $collaborateur_form->handleRequest($request);
src/Controller/VersionController.php:        $projet = $version->getProjet();
src/Controller/VersionController.php:            $idProjet = $projet->getIdProjet();
src/Controller/VersionController.php:            $sj->errorMessage(__METHOD__.':'.__LINE__.' : projet null pour version '.$version->getIdVersion());
src/Controller/VersionController.php:        if ($collaborateur_form->isSubmitted() && $collaborateur_form->isValid()) {
src/Controller/VersionController.php:            if ($collaborateur_form->get('submit')->isClicked()) {
src/Controller/VersionController.php:                $individu_forms = $collaborateur_form->getData()['individus'];
src/Controller/VersionController.php:                $validated = $sv->validateIndividuForms($individu_forms);
src/Controller/VersionController.php:                    $request->getSession()->getFlashbag()->add('flash erreur', $message);
src/Controller/VersionController.php:                    return $this->redirectToRoute('modifier_collaborateurs', ['id' => $version]);
src/Controller/VersionController.php:                $sv->handleIndividuForms($individu_forms, $version);
src/Controller/VersionController.php:            return $this->redirectToRoute('consulter_version', ['id' => $version->getProjet()]);
src/Controller/VersionController.php:        // return new Response( dump( $collaborateur_form->createView() ) );
src/Controller/VersionController.php:        return $this->render(
src/Controller/VersionController.php:             'collaborateur_form' => $collaborateur_form->createView(),
src/Controller/VersionController.php:        $sm = $this->sm;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        $ff = $this->ff;
src/Controller/VersionController.php:        $se = $this->se;
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        if (Projet::PROJET_DYN === $version->getTypeVersion()) {
src/Controller/VersionController.php:            $projetWorkflow = $this->pw4;
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__." $version n'est PAS de type 4 (type ".$version->getTypeVersion().')');
src/Controller/VersionController.php:        if (false === $sm->envoyerEnExpertise($version)['ok']) {
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.
src/Controller/VersionController.php:                " impossible d'envoyer le projet parce que ".$sm->envoyerEnExpertise($version)['raison']);
src/Controller/VersionController.php:        $projet = $version->getProjet();
src/Controller/VersionController.php:        // NOTE - devrait être CGA plutôt que CGU...
src/Controller/VersionController.php:                ->add(
src/Controller/VersionController.php:            ->add('envoyer', SubmitType::class, ['label' => 'Envoyer le projet'])
src/Controller/VersionController.php:            ->add('annuler', SubmitType::class, ['label' => 'Annuler'])
src/Controller/VersionController.php:            ->getForm();
src/Controller/VersionController.php:        $form->handleRequest($request);
src/Controller/VersionController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/VersionController.php:            $CGU = $form->getData()['CGU'];
src/Controller/VersionController.php:            if ($form->get('annuler')->isClicked()) {
src/Controller/VersionController.php:                $request->getSession()->getFlashbag()->add('flash erreur', 'Votre projet ne nous a pas été envoyé');
src/Controller/VersionController.php:                return $this->redirectToRoute('consulter_projet', ['id' => $projet->getIdProjet()]);
src/Controller/VersionController.php:            if (false === $CGU && $form->get('envoyer')->isClicked()) {
src/Controller/VersionController.php:                $request->getSession()->getFlashbag()->add('flash erreur', "Vous ne pouvez pas envoyer votre projet si vous n'acceptez pas les CGU");
src/Controller/VersionController.php:            } elseif (true === $CGU && $form->get('envoyer')->isClicked()) {
src/Controller/VersionController.php:                $version->setCGU(true);
src/Controller/VersionController.php:                $se->newExpertiseIfPossible($version);
src/Controller/VersionController.php:                $rtn = $projetWorkflow->execute(Signal::CLK_VAL_DEM, $projet);
src/Controller/VersionController.php:                    $request->getSession()->getFlashbag()->add('flash info', 'Votre projet nous a été envoyé. Vous allez recevoir un courriel de confirmation.');
src/Controller/VersionController.php:                    $sj->errorMessage(__METHOD__.':'.__LINE__.' Le projet '.$projet->getIdProjet()." n'a pas pu etre envoyé à l'expert correctement.");
src/Controller/VersionController.php:                    $request->getSession()->getFlashbag()->add('flash erreur', "Votre projet n'a pas pu être envoyé en validation. Merci de vous rapprocher du support");
src/Controller/VersionController.php:                return $this->redirectToRoute('projet_accueil');
src/Controller/VersionController.php:                $request->getSession()->getFlashbag()->add('flash erreur', "Votre projet n'a pas pu être envoyé en expertise. Merci de vous rapprocher du support");
src/Controller/VersionController.php:                $sj->throwException(__METHOD__.':'.__LINE__." Problème avec le formulaire d'envoi à l'expert du projet ".$version->getIdVersion());
src/Controller/VersionController.php:        return $this->render(
src/Controller/VersionController.php:              'form' => $form->createView(),
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        $sd = $this->sd;
src/Controller/VersionController.php:        $ss = $this->ss;
src/Controller/VersionController.php:        $sp = $this->sp;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:           ->ff
src/Controller/VersionController.php:           ->createNamedBuilder('upload', FormType::class, [], ['csrf_protection' => false])
src/Controller/VersionController.php:           ->add('version', TextType::class, ['label' => '', 'required' => true, 'attr' => ['placeholder' => '01M23999']])
src/Controller/VersionController.php:           ->add(
src/Controller/VersionController.php:           ->add('televerser', SubmitType::class)
src/Controller/VersionController.php:           ->add('attribution', SubmitType::class, ['label' => "Changer l'attribution"])
src/Controller/VersionController.php:           ->getForm();
src/Controller/VersionController.php:        $form->handleRequest($request);
src/Controller/VersionController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/VersionController.php:            $data = $form->getData();
src/Controller/VersionController.php:                $version = $em->getRepository(Version::class)->find($data['version']);
src/Controller/VersionController.php:                    $request->getSession()->getFlashbag()->add('flash erreur', 'Pas de version '.$data['version']);
src/Controller/VersionController.php:                    return $this->redirectToRoute('televersement_generique');
src/Controller/VersionController.php:                $request->getSession()->getFlashbag()->add('flash erreur', 'Erreur interne');
src/Controller/VersionController.php:                return $this->redirectToRoute('televersement_generique');
src/Controller/VersionController.php:            if ($form->get('televerser')->isClicked()) {
src/Controller/VersionController.php:                    return $this->redirectToRoute('version_televerser_fiche_admin', ['id' => $version->getIdVersion()]);
src/Controller/VersionController.php:                    $request->getSession()->getFlashbag()->add('flash erreur', "PAS DE RAPPORT D'ACTIVITE dans cette version de gramc-meso");
src/Controller/VersionController.php:                    return $this->redirectToRoute('televersement_generique');
src/Controller/VersionController.php:                    $request->getSession()->getFlashbag()->add('flash erreur', 'Erreur interne');
src/Controller/VersionController.php:                    return $this->redirectToRoute('televersement_generique');
src/Controller/VersionController.php:            if ($form->get('attribution')->isClicked()) {
src/Controller/VersionController.php:                return $this->redirectToRoute('version_attribution_admin', ['id' => $version->getIdVersion()]);
src/Controller/VersionController.php:        return $this->render(
src/Controller/VersionController.php:            'form' => $form->createView(),
src/Controller/VersionController.php:        $sv = $this->sv;
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        $ressource_form = $sv->getRessourceForm($version, true);
src/Controller/VersionController.php:        $ressource_form->handleRequest($request);
src/Controller/VersionController.php:        $data = $ressource_form->getData();
src/Controller/VersionController.php:        $editForm = $this->createFormBuilder($version)
src/Controller/VersionController.php:            ->add('enregistrer', SubmitType::class, ['label' => 'Enregistrer'])
src/Controller/VersionController.php:            ->add('fermer', SubmitType::class, ['label' => 'Fermer'])
src/Controller/VersionController.php:            ->add('annuler', SubmitType::class, ['label' => 'Annuler'])
src/Controller/VersionController.php:            ->getForm();
src/Controller/VersionController.php:        $editForm->handleRequest($request);
src/Controller/VersionController.php:        if ($editForm->isSubmitted()) {
src/Controller/VersionController.php:            if ($editForm->get('annuler')->isClicked()) {
src/Controller/VersionController.php:                return $this->redirectToRoute('televersement_generique');
src/Controller/VersionController.php:                $validated = $sv->validateRessourceForms($ressource_forms);
src/Controller/VersionController.php:                    $request->getSession()->getFlashbag()->add('flash erreur', $message);
src/Controller/VersionController.php:                    $em->flush();
src/Controller/VersionController.php:                    $request->getSession()->getFlashbag()->add('flash info', 'Attributions enregistrées');
src/Controller/VersionController.php:                    if ($editForm->get('fermer')->isClicked()) {
src/Controller/VersionController.php:                        return $this->redirectToRoute('televersement_generique');
src/Controller/VersionController.php:        return $this->render(
src/Controller/VersionController.php:            'edit_form' => $editForm->createView(),
src/Controller/VersionController.php:            'ressource_form' => $ressource_form->createView(),
src/Controller/VersionController.php:        $sm = $this->sm;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        // ACL - Mêmes ACL que modification de version !
src/Controller/VersionController.php:        if (false === $sm->modifierVersion($version)['ok']) {
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' impossible de modifier la version '.$version->getIdVersion().
src/Controller/VersionController.php:        ' parce que : '.$sm->modifierVersion($version)['raison']);
src/Controller/VersionController.php:        $rtn = $this->televerser($request, $version, $filename);
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' Erreur interne - televerser a renvoyé un Form');
src/Controller/VersionController.php:        $sv = $this->sv;
src/Controller/VersionController.php:        $sf = $this->sf;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__." Erreur interne - $filename pas un nom autorisé");
src/Controller/VersionController.php:                $dir = $sv->imageDir($version);
src/Controller/VersionController.php:                $dir = $sv->rapportDir($version);
src/Controller/VersionController.php:                $dir = $sv->getSigneDir($version);
src/Controller/VersionController.php:                $sj->throwException(__METHOD__.':'.__LINE__." Erreur interne - $filename - calcul de dir pas possible");
src/Controller/VersionController.php:        $type = substr($filename, -3);   // 'pdf' ou ... n'importe quoi !
src/Controller/VersionController.php:            $d = basename($dir); // /a/b/c/d/2022 -> 2022
src/Controller/VersionController.php:            $filename = $d.$version->getProjet()->getIdProjet().'.pdf';
src/Controller/VersionController.php:            $rtn = $sv->televerserFichier($request, $version, $dir, $filename, $type);
src/Controller/VersionController.php:                $this->modifyRapport($version->getProjet(), $version->anneeRapport(), $filename);
src/Controller/VersionController.php:            $filename = $sv->getSignePath($version);
src/Controller/VersionController.php:            $rtn = $sv->televerserFichier($request, $version, $dir, $filename, $type);
src/Controller/VersionController.php:            $rtn = $sv->televerserFichier($request, $version, $dir, $filename, $type);
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        $sv = $this->sv;
src/Controller/VersionController.php:        $rapportActivite = $em->getRepository(RapportActivite::class)->findOneBy(
src/Controller/VersionController.php:        $size = filesize($sv->rapportDir1($projet, $annee).'/'.$filename);
src/Controller/VersionController.php:        $rapportActivite->setTaille($size);
src/Controller/VersionController.php:        $em->persist($rapportActivite);
src/Controller/VersionController.php:        $em->flush();
src/Controller/VersionController.php:     * TODO - Un héritage ou un interface ici car tous les VersionSpecController ont le même code !
src/Controller/VersionController.php:        $sm = $this->sm;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        $sv = $this->sv;
src/Controller/VersionController.php:        $vl = $this->vl;
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        if (false === $sm->modifierVersion($version)['ok']) {
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' impossible de modifier la version '.$version->getIdVersion().
src/Controller/VersionController.php:                ' parce que : '.$sm->modifierVersion($version)['raison']);
src/Controller/VersionController.php:        if ([] != $sv->validateVersion($version)) {
src/Controller/VersionController.php:            return $this->render(
src/Controller/VersionController.php:            return $this->redirectToRoute('envoyer_en_expertise', ['id' => $version->getIdVersion()]);
src/Controller/VersionController.php:        $sm = $this->sm;
src/Controller/VersionController.php:        $sv = $this->sv;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        $twig = $this->tw;
src/Controller/VersionController.php:        if (false === $sm->modifierVersion($version)['ok']) {
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' impossible de modifier la version '.$version->getIdVersion().
src/Controller/VersionController.php:        ' parce que : '.$sm->modifierVersion($version)['raison']);
src/Controller/VersionController.php:        $formation_form = $sv->getFormationForm($version);
src/Controller/VersionController.php:        $formation_form->handleRequest($request);
src/Controller/VersionController.php:        $data = $formation_form->getData();
src/Controller/VersionController.php:        // NOTE - $validated peut éventuellement modifier $formation_forms afin de le rendre valide
src/Controller/VersionController.php:        $validated = $sv->validateFormationForms($formation_forms);
src/Controller/VersionController.php:        $sv->handleFormationForms($data['formation'], $version);
src/Controller/VersionController.php:        $ressource_form = $sv->getRessourceForm($version);
src/Controller/VersionController.php:        $ressource_form->handleRequest($request);
src/Controller/VersionController.php:        $data = $ressource_form->getData();
src/Controller/VersionController.php:        // NOTE - On met à zéro les demandes qui sont invalides
src/Controller/VersionController.php:        $validated = $sv->validateRessourceForms($ressource_forms);
src/Controller/VersionController.php:            $request->getSession()->getFlashbag()->add('flash erreur', $message);
src/Controller/VersionController.php:        $collaborateur_form = $sv->getCollaborateurForm($version);
src/Controller/VersionController.php:        $collaborateur_form->handleRequest($request);
src/Controller/VersionController.php:        $data = $collaborateur_form->getData();
src/Controller/VersionController.php:        $validated = $sv->validateIndividuForms($individu_forms);
src/Controller/VersionController.php:            $request->getSession()->getFlashbag()->add('flash erreur', $message);
src/Controller/VersionController.php:                $sj->debugMessage('modifierAction traitement des collaborateurs');
src/Controller/VersionController.php:                $sv->handleIndividuForms($data['individus'], $version);
src/Controller/VersionController.php:                $collaborateur_form = $sv->getCollaborateurForm($version);
src/Controller/VersionController.php:        $type = $version->getProjet()->getTypeProjet();
src/Controller/VersionController.php:                return $this->__modifier4($request, $version, $collaborateur_form, $formation_form, $ressource_form);
src/Controller/VersionController.php:                $sj->throwException(__METHOD__.':'.__LINE__.' mauvais type de projet '.Functions::show($type));
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        $sv = $this->sv;
src/Controller/VersionController.php:        $ss = $this->ss;
src/Controller/VersionController.php:        $sval = $this->vl;
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        $form_builder = $this->createFormBuilder($version);
src/Controller/VersionController.php:        $this->__modifier4PartieI($version, $form_builder);
src/Controller/VersionController.php:        $this->__modifier4PartieII($version, $form_builder);
src/Controller/VersionController.php:        $this->__modifier4PartieIII($version, $form_builder);
src/Controller/VersionController.php:            ->add('fermer', SubmitType::class)
src/Controller/VersionController.php:            ->add('enregistrer', SubmitType::class)
src/Controller/VersionController.php:            ->add('annuler', SubmitType::class);
src/Controller/VersionController.php:        $form = $form_builder->getForm();
src/Controller/VersionController.php:        $form->handleRequest($request);
src/Controller/VersionController.php:        if ($form->isSubmitted() && $form->isValid()) {
src/Controller/VersionController.php:            if ($form->get('annuler')->isClicked()) {
src/Controller/VersionController.php:                // $sj->errorMessage(__METHOD__ . ' seconde annuler clicked !');
src/Controller/VersionController.php:                return $this->redirectToRoute('projet_accueil');
src/Controller/VersionController.php:            $return = Functions::sauvegarder($version, $em, $this->lg);
src/Controller/VersionController.php:            if ($request->isXmlHttpRequest()) {
src/Controller/VersionController.php:                $sj->debugMessage(__METHOD__.' isXmlHttpRequest clicked');
src/Controller/VersionController.php:                    return new Response(json_encode('OK - Votre projet est correctement enregistré'));
src/Controller/VersionController.php:                    return new Response(json_encode("ERREUR - Votre projet n'a PAS été enregistré !"));
src/Controller/VersionController.php:            return $this->redirectToRoute('consulter_projet', ['id' => $version->getProjet()->getIdProjet()]);
src/Controller/VersionController.php:        $img_expose = [$sv->imageProperties('img_expose_1', 'Figure 1', $version),
src/Controller/VersionController.php:                       $sv->imageProperties('img_expose_2', 'Figure 2', $version),
src/Controller/VersionController.php:                       $sv->imageProperties('img_expose_3', 'Figure 3', $version)];
src/Controller/VersionController.php:        $img_justif_renou = [$sv->imageProperties('img_justif_renou_1', 'Figure 1', $version),
src/Controller/VersionController.php:                             $sv->imageProperties('img_justif_renou_2', 'Figure 2', $version),
src/Controller/VersionController.php:                             $sv->imageProperties('img_justif_renou_3', 'Figure 3', $version)];
src/Controller/VersionController.php:        return $this->render(
src/Controller/VersionController.php:                'form' => $form->createView(),
src/Controller/VersionController.php:                'collaborateur_form' => $collaborateur_form->createView(),
src/Controller/VersionController.php:                'formation_form' => $formation_form->createView(),
src/Controller/VersionController.php:                'ressource_form' => $ressource_form->createView(),
src/Controller/VersionController.php:                'todo' => $sv->validateVersion($version),
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        ->add('prjTitre', TextType::class, ['required' => false])
src/Controller/VersionController.php:        ->add(
src/Controller/VersionController.php:            'placeholder' => '-- Indiquez la thématique',
src/Controller/VersionController.php:            ->add('prjFinancement', TextType::class, ['required' => false])
src/Controller/VersionController.php:            ->add('prjGenciCentre', TextType::class, ['required' => false])
src/Controller/VersionController.php:            ->add('prjGenciMachines', TextType::class, ['required' => false])
src/Controller/VersionController.php:            ->add('prjGenciHeures', TextType::class, ['required' => false])
src/Controller/VersionController.php:            ->add('prjGenciDari', TextType::class, ['required' => false]);
src/Controller/VersionController.php:        if (count($version->getProjet()->getVersion()) > 1) {
src/Controller/VersionController.php:            $form = $form->add('prjJustifRenouv', TextAreaType::class, ['required' => false]);
src/Controller/VersionController.php:        ->add('prjExpose', TextAreaType::class, ['required' => false]);
src/Controller/VersionController.php:        ->add('codeNom', TextType::class, ['required' => false])
src/Controller/VersionController.php:        ->add('codeLicence', TextAreaType::class, ['required' => false]);
src/Controller/VersionController.php:        $type = $version->getProjet()->getTypeProjet();
src/Controller/VersionController.php:                return $this->__renouveler4($request, $version);
src/Controller/VersionController.php:                $sj = $this->sj;
src/Controller/VersionController.php:                $sj->throwException(__METHOD__.':'.__LINE__.' mauvais type de projet '.Functions::show($type));
src/Controller/VersionController.php:        $sm = $this->sm;
src/Controller/VersionController.php:        $sv = $this->sv;
src/Controller/VersionController.php:        $sj = $this->sj;
src/Controller/VersionController.php:        $sdac = $this->sdac;
src/Controller/VersionController.php:        $sroc = $this->sroc;
src/Controller/VersionController.php:        $dyn_duree = $this->dyn_duree;
src/Controller/VersionController.php:        $dyn_duree_post = $this->dyn_duree_post;
src/Controller/VersionController.php:        $projet_workflow = $this->pw4;
src/Controller/VersionController.php:        $sd = $this->sd;
src/Controller/VersionController.php:        $em = $this->em;
src/Controller/VersionController.php:        if (false === $sm->renouvelerVersion($version)['ok']) {
src/Controller/VersionController.php:            $sj->throwException(__METHOD__.':'.__LINE__.' Impossible de renouveler la version '.$version->getIdVersion());
src/Controller/VersionController.php:        $projet = $version->getProjet();
src/Controller/VersionController.php:        $version = $sv->creerVersion($projet);
src/Controller/VersionController.php:        $version->setPrjGenciCentre('');
src/Controller/VersionController.php:        $version->setPrjGenciDari('');
src/Controller/VersionController.php:        $version->setPrjGenciHeures(0);
src/Controller/VersionController.php:        $version->setPrjGenciMachines('');
src/Controller/VersionController.php:        $version->setStartDate($sd);
src/Controller/VersionController.php:        $version->setPrjJustifRenouv(null);
src/Controller/VersionController.php:        $version->setCgu(0);
src/Controller/VersionController.php:        $version->setLimitDate($sd->getNew()->add(new \DateInterval($dyn_duree)));
src/Controller/VersionController.php:        $version->setEtatVersion(Etat::EDITION_DEMANDE);
src/Controller/VersionController.php:        Functions::sauvegarder($version, $em, $this->lg);
src/Controller/VersionController.php:        return $this->redirect($this->generateUrl('modifier_version', ['id' => $version->getIdVersion()]));
src/Entity/Adresseip.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Adresseip.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Adresseip.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Adresseip.php:        return $this->getAdresse();
src/Entity/Adresseip.php:        return $this->id;
src/Entity/Adresseip.php:        $this->adresse = $adresse;
src/Entity/Adresseip.php:     * @Assert\Cidr(message="Valeur non conforme - Essayer 1.2.3.4/32", version="4", netmaskMin=16, netmaskMax=32,netmaskRangeViolationMessage="Le masque doit être un entier compris entre {{ min }} et {{ max }}")
src/Entity/Adresseip.php:        return $this->adresse;
src/Entity/Adresseip.php:        $this->labo = $labo;
src/Entity/Adresseip.php:        return $this->labo;
src/Entity/Clessh.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Clessh.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Clessh.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Clessh.php:        $this->user = new ArrayCollection();
src/Entity/Clessh.php:        return $this->getNom();
src/Entity/Clessh.php:        return $this->id;
src/Entity/Clessh.php:        $this->individu = $individu;
src/Entity/Clessh.php:        return $this->individu;
src/Entity/Clessh.php:        if (!$this->user->contains($user)) {
src/Entity/Clessh.php:            $this->user[] = $user;
src/Entity/Clessh.php:        $this->user->removeElement($user);
src/Entity/Clessh.php:        return $this->user;
src/Entity/Clessh.php:        $this->nom = $nom;
src/Entity/Clessh.php:        return $this->nom;
src/Entity/Clessh.php:        $this->pub = $pub;
src/Entity/Clessh.php:        return $this->pub;
src/Entity/Clessh.php:        $this->emp = $emp;
src/Entity/Clessh.php:        return $this->emp;
src/Entity/Clessh.php:        $this->rvk = $rvk;
src/Entity/Clessh.php:        return $this->rvk;
src/Entity/Clessh.php:        return $this->rvk;
src/Entity/CollaborateurVersion.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/CollaborateurVersion.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/CollaborateurVersion.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/CollaborateurVersion.php:        if (true === $this->getResponsable()) {
src/Entity/CollaborateurVersion.php:        $output .= 'version='.$this->getVersion().':';
src/Entity/CollaborateurVersion.php:        $output .= 'id='.$this->getId().':';
src/Entity/CollaborateurVersion.php:        $output .= 'statut='.$this->getStatut().':';
src/Entity/CollaborateurVersion.php:        $output .= 'labo='.$this->getLabo().':';
src/Entity/CollaborateurVersion.php:        $output .= 'etab='.$this->getEtab().':';
src/Entity/CollaborateurVersion.php:        $output .= 'collab='.$this->getCollaborateur().'}';
src/Entity/CollaborateurVersion.php:        $this->responsable = false;
src/Entity/CollaborateurVersion.php:            $this->statut = $individu->getStatut();
src/Entity/CollaborateurVersion.php:            $this->labo = $individu->getLabo();
src/Entity/CollaborateurVersion.php:            $this->etab = $individu->getEtab();
src/Entity/CollaborateurVersion.php:            $this->collaborateur = $individu;
src/Entity/CollaborateurVersion.php:            $this->version = $version;
src/Entity/CollaborateurVersion.php:        $individu = $this->getCollaborateur();
src/Entity/CollaborateurVersion.php:        $this->statut = $individu->getStatut();
src/Entity/CollaborateurVersion.php:        $this->labo = $individu->getLabo();
src/Entity/CollaborateurVersion.php:        $this->etab = $individu->getEtab();
src/Entity/CollaborateurVersion.php:        $this->responsable = $responsable;
src/Entity/CollaborateurVersion.php:        return $this->responsable;
src/Entity/CollaborateurVersion.php:        $this->deleted = $deleted;
src/Entity/CollaborateurVersion.php:        return $this->deleted;
src/Entity/CollaborateurVersion.php:        return $this->id;
src/Entity/CollaborateurVersion.php:        $this->statut = $statut;
src/Entity/CollaborateurVersion.php:        return $this->statut;
src/Entity/CollaborateurVersion.php:        $this->version = $version;
src/Entity/CollaborateurVersion.php:        return $this->version;
src/Entity/CollaborateurVersion.php:        $this->labo = $labo;
src/Entity/CollaborateurVersion.php:        return $this->labo;
src/Entity/CollaborateurVersion.php:        $this->etab = $etab;
src/Entity/CollaborateurVersion.php:        return $this->etab;
src/Entity/CollaborateurVersion.php:        $this->collaborateur = $collaborateur;
src/Entity/CollaborateurVersion.php:        return $this->collaborateur;
src/Entity/CollaborateurVersion.php:        return $this->responsable;
src/Entity/CollaborateurVersion.php:        return $this->deleted;
src/Entity/Dac.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Dac.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Dac.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Dac.php:        return $this->idDac;
src/Entity/Dac.php:        return $this->idDac;
src/Entity/Dac.php:            $this->ressource = $ressource;
src/Entity/Dac.php:            $this->version = $version;
src/Entity/Dac.php:        $this->ressource = $ressource;
src/Entity/Dac.php:        return $this->ressource;
src/Entity/Dac.php:        return $this->demande;
src/Entity/Dac.php:        $this->demande = $demande;
src/Entity/Dac.php:        return $this->attribution;
src/Entity/Dac.php:        $this->attribution = $attribution;
src/Entity/Dac.php:        return $this->consommation;
src/Entity/Dac.php:        $this->consommation = $consommation;
src/Entity/Dac.php:        $this->todof = $todof;
src/Entity/Dac.php:        return $this->todof;
src/Entity/Dac.php:        return $this->todof;
src/Entity/Dac.php:        return $this->version;
src/Entity/Dac.php:        $this->version = $version;
src/Entity/Dar.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Dar.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Dar.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Dar.php:        return $this->idDar;
src/Entity/Dar.php:        return $this->idDar;
src/Entity/Dar.php:            $this->ressource = $ressource;
src/Entity/Dar.php:            $this->rallonge = $rallonge;
src/Entity/Dar.php:        $this->rallonge = $rallonge;
src/Entity/Dar.php:        return $this->rallonge;
src/Entity/Dar.php:        $this->ressource = $ressource;
src/Entity/Dar.php:        return $this->ressource;
src/Entity/Dar.php:        return $this->demande;
src/Entity/Dar.php:        $this->demande = $demande;
src/Entity/Dar.php:        return $this->attribution;
src/Entity/Dar.php:        $this->attribution = $attribution;
src/Entity/Dar.php:        $this->todof = $todof;
src/Entity/Dar.php:        return $this->todof;
src/Entity/Dar.php:        return $this->todof;
src/Entity/Etablissement.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Etablissement.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Etablissement.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Etablissement.php:        return $this->getLibelleEtab();
src/Entity/Etablissement.php:        return $this->getIdEtab();
src/Entity/Etablissement.php:        $this->collaborateurVersion = new ArrayCollection();
src/Entity/Etablissement.php:        $this->individu = new ArrayCollection();
src/Entity/Etablissement.php:        $this->libelleEtab = $libelleEtab;
src/Entity/Etablissement.php:        return $this->libelleEtab;
src/Entity/Etablissement.php:        return $this->idEtab;
src/Entity/Etablissement.php:        if (!$this->collaborateurVersion->contains($collaborateurVersion)) {
src/Entity/Etablissement.php:            $this->collaborateurVersion[] = $collaborateurVersion;
src/Entity/Etablissement.php:        $this->collaborateurVersion->removeElement($collaborateurVersion);
src/Entity/Etablissement.php:        return $this->collaborateurVersion;
src/Entity/Etablissement.php:        if (!$this->individu->contains($individu)) {
src/Entity/Etablissement.php:            $this->individu[] = $individu;
src/Entity/Etablissement.php:        $this->individu->removeElement($individu);
src/Entity/Etablissement.php:        return $this->individu;
src/Entity/Expertise.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Expertise.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Expertise.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Expertise.php: * NOTE - Cette classe peut servir à valider une VERSION de projet aussi bien qu'une RALLONGE de version (=extension)
src/Entity/Expertise.php:        return 'Expertise '.$this->getId()." par l'expert ".$this->getExpert();
src/Entity/Expertise.php:        $this->validation = $validation;
src/Entity/Expertise.php:        return $this->validation;
src/Entity/Expertise.php:        $this->commentaireInterne = $commentaireInterne;
src/Entity/Expertise.php:        return $this->commentaireInterne;
src/Entity/Expertise.php:        $this->commentaireExterne = $commentaireExterne;
src/Entity/Expertise.php:        return $this->commentaireExterne;
src/Entity/Expertise.php:        $this->definitif = $definitif;
src/Entity/Expertise.php:        return $this->definitif;
src/Entity/Expertise.php:        return $this->id;
src/Entity/Expertise.php:        $this->version = $idVersion;
src/Entity/Expertise.php:        return $this->version;
src/Entity/Expertise.php:        $this->rallonge = $idRallonge;
src/Entity/Expertise.php:        return $this->rallonge;
src/Entity/Expertise.php:        $this->expert = $expert;
src/Entity/Expertise.php:        return $this->expert;
src/Entity/Expertise.php:        return $this->definitif;
src/Entity/Formation.php:        $this->startDate = new \DateTime();
src/Entity/Formation.php:        $this->endDate = new \DateTime();
src/Entity/Formation.php:        $this->formationVersion = new ArrayCollection();
src/Entity/Formation.php:        return $this->id;
src/Entity/Formation.php:        if (!$this->formationVersion->contains($formationVersion)) {
src/Entity/Formation.php:            $this->formationVersion[] = $formationVersion;
src/Entity/Formation.php:        $this->rallonge->removeElement($formationVersion);
src/Entity/Formation.php:        return $this->formationVersion;
src/Entity/Formation.php:        return $this->numeroForm;
src/Entity/Formation.php:        $this->numeroForm = $numeroForm;
src/Entity/Formation.php:        return $this->acroForm;
src/Entity/Formation.php:        $this->acroForm = $acroForm;
src/Entity/Formation.php:        return $this->nomForm;
src/Entity/Formation.php:        $this->nomForm = $nomForm;
src/Entity/Formation.php:        return $this->startDate;
src/Entity/Formation.php:        $this->startDate = $startDate;
src/Entity/Formation.php:        return $this->endDate;
src/Entity/Formation.php:        $this->endDate = $endDate;
src/Entity/FormationVersion.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/FormationVersion.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/FormationVersion.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/FormationVersion.php:        $output .= 'version='.$this->getVersion();
src/Entity/FormationVersion.php:        $output .= 'id='.$this->getId().':';
src/Entity/FormationVersion.php:        $output .= 'formation='.$this->getFormation();
src/Entity/FormationVersion.php:            $this->formation = $formation;
src/Entity/FormationVersion.php:            $this->version = $version;
src/Entity/FormationVersion.php:        $this->nombre = $nombre;
src/Entity/FormationVersion.php:        return $this->nombre;
src/Entity/FormationVersion.php:        return $this->id;
src/Entity/FormationVersion.php:        $this->version = $version;
src/Entity/FormationVersion.php:        return $this->version;
src/Entity/FormationVersion.php:        $this->formation = $formation;
src/Entity/FormationVersion.php:        return $this->formation;
src/Entity/Individu.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Individu.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Individu.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Individu.php: * Le "compte gramc-meso"...
src/Entity/Individu.php:        self::POSTDOC => 'Post-doctorant',
src/Entity/Individu.php:        $this->thematique = new ArrayCollection();
src/Entity/Individu.php:        $this->expertise = new ArrayCollection();
src/Entity/Individu.php:        $this->journal = new ArrayCollection();
src/Entity/Individu.php:        $this->sso = new ArrayCollection();
src/Entity/Individu.php:        $this->collaborateurVersion = new ArrayCollection();
src/Entity/Individu.php:        $this->clessh = new ArrayCollection();
src/Entity/Individu.php:        $this->user = new ArrayCollection();
src/Entity/Individu.php:        $this->creationStamp = new \DateTime();
src/Entity/Individu.php:        if (null !== $this->getPrenom() || null != $this->getNom()) {
src/Entity/Individu.php:            return $this->getPrenom().' '.$this->getNom();
src/Entity/Individu.php:        } elseif (null !== $this->getMail()) {
src/Entity/Individu.php:            return $this->getMail();
src/Entity/Individu.php:        if ($this->idIndividu !== $user->getId()) {
src/Entity/Individu.php:        return $this->idIndividu;
src/Entity/Individu.php:        return $this->getId();
src/Entity/Individu.php:        return $this->getMail();
src/Entity/Individu.php:     *     - ROLE_DEMANDEUR = Peut demander des ressoureces - Le minimum
src/Entity/Individu.php:     *     - ROLE_OBS       = Peut observer beaucoup de choses, mais ne peut agir
src/Entity/Individu.php:     *     - ROLE_ADMIN     = Un OBS qui peut AUSSI paramétrer l'application et intervenir dans les projets ou le workflow
src/Entity/Individu.php:     *     - ROLE_VALIDEUR  = Un OBS qui peut AUSSI paramétrer certaines choses (laboratoires) et valider des projets dynamiques
src/Entity/Individu.php:     *     - ROLE_SYSADMIN  = Administrateur système, est observateur et reçoit certains mails
src/Entity/Individu.php:     *     - ROLE_ALLOWED_TO_SWITCH = Peut changer d'identité (actuellement kifkif admin)
src/Entity/Individu.php:     *     - ROLE_EXPERT    = Peut être affecté à un projet pour expertise (NON UTILISE)
src/Entity/Individu.php:     *     - ROLE_PRESIDENT = Peut affecter les experts à des projets (NON UTILISE)
src/Entity/Individu.php:        if (true === $this->getAdmin()) {
src/Entity/Individu.php:        if (true === $this->getPresident()) {
src/Entity/Individu.php:        } elseif (true === $this->getExpert()) {
src/Entity/Individu.php:        if (true === $this->getValideur()) {
src/Entity/Individu.php:        if (true === $this->getObs()) {
src/Entity/Individu.php:        if (true === $this->getSysadmin()) {
src/Entity/Individu.php:        $this->creationStamp = $creationStamp;
src/Entity/Individu.php:        return $this->creationStamp;
src/Entity/Individu.php:        $this->nom = $nom;
src/Entity/Individu.php:        return $this->nom;
src/Entity/Individu.php:        $this->prenom = $prenom;
src/Entity/Individu.php:        return $this->prenom;
src/Entity/Individu.php:        // voir https://stackoverflow.com/questions/1284535/php-transliteration
src/Entity/Individu.php:        // $mail_ascii = transliterator_transliterate('Any-Latin;Latin-ASCII;', $mail);
src/Entity/Individu.php:        // $this->mail = $mail_ascii;
src/Entity/Individu.php:        $this->mail = $mail;
src/Entity/Individu.php:        return $this->mail;
src/Entity/Individu.php:        $this->admin = $admin;
src/Entity/Individu.php:        return $this->admin;
src/Entity/Individu.php:        $this->sysadmin = $sysadmin;
src/Entity/Individu.php:        return $this->sysadmin;
src/Entity/Individu.php:        $this->obs = $obs;
src/Entity/Individu.php:        return $this->obs;
src/Entity/Individu.php:        $this->expert = $expert;
src/Entity/Individu.php:        return $this->expert;
src/Entity/Individu.php:        $this->valideur = $valideur;
src/Entity/Individu.php:        return $this->valideur;
src/Entity/Individu.php:        $this->president = $president;
src/Entity/Individu.php:        return $this->president;
src/Entity/Individu.php:        $this->desactive = $desactive;
src/Entity/Individu.php:        return $this->desactive;
src/Entity/Individu.php:        return $this->idIndividu;
src/Entity/Individu.php:        $this->statut = $statut;
src/Entity/Individu.php:        return $this->statut;
src/Entity/Individu.php:        $this->labo = $labo;
src/Entity/Individu.php:        return $this->labo;
src/Entity/Individu.php:        $this->etab = $etab;
src/Entity/Individu.php:        return $this->etab;
src/Entity/Individu.php:        if (!$this->thematique->contains($thematique)) {
src/Entity/Individu.php:            $this->thematique[] = $thematique;
src/Entity/Individu.php:        $this->thematique->removeElement($thematique);
src/Entity/Individu.php:        return $this->thematique;
src/Entity/Individu.php:        if (!$this->sso->contains($sso)) {
src/Entity/Individu.php:            $this->sso[] = $sso;
src/Entity/Individu.php:        $this->sso->removeElement($sso);
src/Entity/Individu.php:        return $this->sso;
src/Entity/Individu.php:        if (!$this->clessh->contains($clessh)) {
src/Entity/Individu.php:            $this->clessh[] = $clessh;
src/Entity/Individu.php:        $this->clessh->removeElement($clessh);
src/Entity/Individu.php:        return $this->clessh;
src/Entity/Individu.php:        if (!$this->collaborateurVersion->contains($collaborateurVersion)) {
src/Entity/Individu.php:            $this->collaborateurVersion[] = $collaborateurVersion;
src/Entity/Individu.php:        $this->collaborateurVersion->removeElement($collaborateurVersion);
src/Entity/Individu.php:        return $this->collaborateurVersion;
src/Entity/Individu.php:        if (!$this->user->contains($user)) {
src/Entity/Individu.php:            $this->user[] = $user;
src/Entity/Individu.php:        $this->user->removeElement($user);
src/Entity/Individu.php:        return $this->user;
src/Entity/Individu.php:        if (!$this->expertise->contains($expertise)) {
src/Entity/Individu.php:            $this->expertise[] = $expertise;
src/Entity/Individu.php:        $this->expertise->removeElement($expertise);
src/Entity/Individu.php:        return $this->expertise;
src/Entity/Individu.php:        if (!$this->journal->contains($journal)) {
src/Entity/Individu.php:            $this->journal[] = $journal;
src/Entity/Individu.php:        $this->journal->removeElement($journal);
src/Entity/Individu.php:        return $this->journal;
src/Entity/Individu.php:        return implode(',', $this->getSso()->toArray());
src/Entity/Individu.php:    // TODO - Revoir cette fonction !!!!
src/Entity/Individu.php:    // NE SERT A RIEN - VIREE !
src/Entity/Individu.php:            $server =  Request::createFromGlobals()->server;
src/Entity/Individu.php:            if ($server->has('REMOTE_USER') || $server->has('REDIRECT_REMOTE_USER'))
src/Entity/Individu.php:                if ($server->has('REMOTE_USER'))
src/Entity/Individu.php:                    $eppn =  $server->get('REMOTE_USER');
src/Entity/Individu.php:                if ($server->has('REDIRECT_REMOTE_USER'))
src/Entity/Individu.php:                    $eppn =  $server->get('REDIRECT_REMOTE_USER');
src/Entity/Individu.php:        return $this->expert;
src/Entity/Individu.php:        $statut = $this->getStatut();
src/Entity/Individu.php:        if (null != $statut && $statut->isPermanent()) {
src/Entity/Individu.php:        $labo = $this->getLabo();
src/Entity/Individu.php:        if (null != $labo && $labo->isLaboRegional()) {
src/Entity/Individu.php:        $ssos = $this->getSso();
src/Entity/Individu.php:            $eppn[] = $sso->getEppn();
src/Entity/Individu.php:        if ($this->isPermanent() && $this->isFromLaboRegional()) {
src/Entity/Individu.php:        return $this->admin;
src/Entity/Individu.php:        return $this->sysadmin;
src/Entity/Individu.php:        return $this->obs;
src/Entity/Individu.php:        return $this->valideur;
src/Entity/Individu.php:        return $this->president;
src/Entity/Individu.php:        return $this->desactive;
src/Entity/Invitation.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Invitation.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Invitation.php:        return $this->idInvitation;
src/Entity/Invitation.php:        $this->inviting = $inviting;
src/Entity/Invitation.php:        return $this->inviting;
src/Entity/Invitation.php:        $this->invited = $invited;
src/Entity/Invitation.php:        return $this->invited;
src/Entity/Invitation.php:        $this->clef = $clef;
src/Entity/Invitation.php:        return $this->clef;
src/Entity/Invitation.php:        $this->creationStamp = $creationStamp;
src/Entity/Invitation.php:        return $this->creationStamp;
src/Entity/Journal.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Journal.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Journal.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Journal.php:    // $this->idIndividu = $idIndividu;
src/Entity/Journal.php:            return $this->idIndividu;
src/Entity/Journal.php:        $this->gramcSessId = $gramcSessId;
src/Entity/Journal.php:        return $this->gramcSessId;
src/Entity/Journal.php:        $this->type = $type;
src/Entity/Journal.php:        return $this->type;
src/Entity/Journal.php:        $this->message = $message;
src/Entity/Journal.php:        return $this->message;
src/Entity/Journal.php:        $this->stamp = $stamp;
src/Entity/Journal.php:        return $this->stamp;
src/Entity/Journal.php:        $this->ip = $ip;
src/Entity/Journal.php:        return $this->ip;
src/Entity/Journal.php:        return $this->id;
src/Entity/Journal.php:        $this->individu = $individu;
src/Entity/Journal.php:        return $this->individu;
src/Entity/Journal.php:        $this->niveau = $niveau;
src/Entity/Journal.php:        return $this->niveau;
src/Entity/Laboratoire.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Laboratoire.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Laboratoire.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Laboratoire.php:        $this->collaborateurVersion = new ArrayCollection();
src/Entity/Laboratoire.php:        $this->individu = new ArrayCollection();
src/Entity/Laboratoire.php:        $this->adresseip = new ArrayCollection();
src/Entity/Laboratoire.php:        if (null != $this->getAcroLabo() && null != $this->getNomLabo()) {
src/Entity/Laboratoire.php:            return $this->getAcroLabo().' - '.$this->getNomLabo();
src/Entity/Laboratoire.php:        } elseif (null != $this->getAcroLabo()) {
src/Entity/Laboratoire.php:            return $this->getAcroLabo();
src/Entity/Laboratoire.php:        } elseif (null != $this->getNomLabo()) {
src/Entity/Laboratoire.php:            return $this->getNomLabo();
src/Entity/Laboratoire.php:            return $this->getIdLabo();
src/Entity/Laboratoire.php:        return $this->getIdLabo();
src/Entity/Laboratoire.php:        $this->numeroLabo = $numeroLabo;
src/Entity/Laboratoire.php:        return $this->numeroLabo;
src/Entity/Laboratoire.php:        $this->acroLabo = $acroLabo;
src/Entity/Laboratoire.php:        return $this->acroLabo;
src/Entity/Laboratoire.php:        $this->nomLabo = $nomLabo;
src/Entity/Laboratoire.php:        return $this->nomLabo;
src/Entity/Laboratoire.php:        return $this->idLabo;
src/Entity/Laboratoire.php:        if (!$this->collaborateurVersion->contains($collaborateurVersion)) {
src/Entity/Laboratoire.php:            $this->collaborateurVersion[] = $collaborateurVersion;
src/Entity/Laboratoire.php:        $this->collaborateurVersion->removeElement($collaborateurVersion);
src/Entity/Laboratoire.php:        return $this->collaborateurVersion;
src/Entity/Laboratoire.php:        if (!$this->adresseip->contains($adresseip)) {
src/Entity/Laboratoire.php:            $this->adresseip[] = $adresseip;
src/Entity/Laboratoire.php:        $this->adresseip->removeElement($adresseip);
src/Entity/Laboratoire.php:        return $this->adresseip;
src/Entity/Laboratoire.php:        if (!$this->individu->contains($individu)) {
src/Entity/Laboratoire.php:            $this->individu[] = $individu;
src/Entity/Laboratoire.php:        $this->individu->removeElement($individu);
src/Entity/Laboratoire.php:        return $this->individu;
src/Entity/Laboratoire.php:        return $this->idLabo > 1;
src/Entity/Param.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Param.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Param.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Param.php:        return $this->cle.'='.$this->val;
src/Entity/Param.php:        $this->cle = $cle;
src/Entity/Param.php:        return $this->cle;
src/Entity/Param.php:        $this->val = $val;
src/Entity/Param.php:        return $this->val;
src/Entity/Param.php:        return $this->id;
src/Entity/Projet.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Projet.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Projet.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Projet.php:        $this->publi = new ArrayCollection();
src/Entity/Projet.php:        $this->version = new ArrayCollection();
src/Entity/Projet.php:        $this->rapportActivite = new ArrayCollection();
src/Entity/Projet.php:        $this->user = new ArrayCollection();
src/Entity/Projet.php:        $this->etatProjet = Etat::EDITION_DEMANDE;
src/Entity/Projet.php:        $this->typeProjet = $type;
src/Entity/Projet.php:     *                Date limite, la version n'ira pas au-delà
src/Entity/Projet.php:        return $this->getIdProjet();
src/Entity/Projet.php:        return $this->getIdProjet();
src/Entity/Projet.php:        $this->etatProjet = $etatProjet;
src/Entity/Projet.php:        return $this->etatProjet;
src/Entity/Projet.php:        $this->typeProjet = $typeProjet;
src/Entity/Projet.php:        return $this->typeProjet;
src/Entity/Projet.php:        $this->idProjet = $idProjet;
src/Entity/Projet.php:        return $this->idProjet;
src/Entity/Projet.php:        $this->versionActive = $version;
src/Entity/Projet.php:        return $this->versionActive;
src/Entity/Projet.php:        $this->versionDerniere = $version;
src/Entity/Projet.php:        return $this->versionDerniere;
src/Entity/Projet.php:        $this->limitDate = $limitDate;
src/Entity/Projet.php:        return $this->limitDate;
src/Entity/Projet.php:        $this->tetatProjet = $tetatProjet;
src/Entity/Projet.php:        return $this->tetatProjet;
src/Entity/Projet.php:        if (!$this->publi->contains($publi)) {
src/Entity/Projet.php:            $this->publi[] = $publi;
src/Entity/Projet.php:        $this->publi->removeElement($publi);
src/Entity/Projet.php:        return $this->publi;
src/Entity/Projet.php:        if (!$this->version->contains($version)) {
src/Entity/Projet.php:            $this->version[] = $version;
src/Entity/Projet.php:        $this->version->removeElement($version);
src/Entity/Projet.php:        return $this->version;
src/Entity/Projet.php:        if (!$this->user->contains($user)) {
src/Entity/Projet.php:            $this->user[] = $user;
src/Entity/Projet.php:        $this->user->removeElement($user);
src/Entity/Projet.php:        return $this->user;
src/Entity/Projet.php:        if (!$this->rapportActivite->contains($rapportActivite)) {
src/Entity/Projet.php:            $this->rapportActivite[] = $rapportActivite;
src/Entity/Projet.php:        $this->rapportActivite->removeElement($rapportActivite);
src/Entity/Projet.php:        return $this->rapportActivite;
src/Entity/Projet.php:        return $this->getEtatProjet();
src/Entity/Projet.php:        return $this->setEtatProjet($state);
src/Entity/Projet.php:    // pour twig - TODO - A METTRE DANS ServiceProjets !
src/Entity/Projet.php:        return Etat::getLibelle($this->getEtatProjet());
src/Entity/Projet.php:        if (null != $this->derniereVersion()) {
src/Entity/Projet.php:            return $this->derniereVersion()->getPrjTitre();
src/Entity/Projet.php:        if (null != $this->derniereVersion()) {
src/Entity/Projet.php:            return $this->derniereVersion()->getPrjThematique();
src/Entity/Projet.php:        if (null != $this->derniereVersion()) {
src/Entity/Projet.php:            return $this->derniereVersion()->getPrjLLabo();
src/Entity/Projet.php:        if (null != $this->derniereVersion()) {
src/Entity/Projet.php:            return $this->derniereVersion()->getSession();
src/Entity/Projet.php:        if (null != $this->derniereVersion()) {
src/Entity/Projet.php:            return $this->derniereVersion()->getResponsable();
src/Entity/Projet.php:        if (null != $this->derniereVersion()) {
src/Entity/Projet.php:            return $this->derniereVersion()->getResponsables();
src/Entity/Projet.php:     * TODO - A VIRER !
src/Entity/Projet.php:        $type = $this->getTypeProjet();
src/Entity/Projet.php:        if (Projet::PROJET_TEST === $this->getTypeProjet()) {
src/Entity/Projet.php:     * derniereVersion - Alias de getVersionDerniere()
src/Entity/Projet.php:     *                   TODO - A supprimer !
src/Entity/Projet.php:        return $this->getVersionDerniere();
src/Entity/Projet.php:        foreach ($this->getVersion() as $version) {
src/Entity/Projet.php:            if (true === $version->isCollaborateur($individu)) {
src/Entity/Projet.php:            //if( $versions === [] ) $versions = getRepository(Version::class)->findVersions( $this );
src/Entity/Projet.php:                //foreach( $version->getCollaborateurs() as $collaborateur )
src/Entity/Projet.php:                    //$collaborateurs[ $collaborateur->getIdIndividu() ] = $collaborateur;
src/Entity/Projet.php:        return $this->getEtatProjet();
src/Entity/Projet.php:    // $type = $this->getTypeProjet();
src/Entity/Projet.php:    // return Projet::LIBELLE_TYPE[$this->getTypeProjet()];
src/Entity/Publication.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Publication.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Publication.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Publication.php:        return $this->getRefbib();
src/Entity/Publication.php:        return $this->getIdPubli();
src/Entity/Publication.php:        $this->projet = new ArrayCollection();
src/Entity/Publication.php:        $this->refbib = $refbib;
src/Entity/Publication.php:        return $this->refbib;
src/Entity/Publication.php:        $this->doi = $doi;
src/Entity/Publication.php:        return $this->doi;
src/Entity/Publication.php:        $this->openUrl = $openUrl;
src/Entity/Publication.php:        return $this->openUrl;
src/Entity/Publication.php:        $this->annee = $annee;
src/Entity/Publication.php:        return $this->annee;
src/Entity/Publication.php:     * NOTE - Peut retourner null avant insertion dans la B.D. - cf. PublicationController::
src/Entity/Publication.php:        return $this->idPubli;
src/Entity/Publication.php:        if (!$this->projet->contains($projet)) {
src/Entity/Publication.php:            $this->projet[] = $projet;
src/Entity/Publication.php:        $this->projet->removeElement($projet);
src/Entity/Publication.php:        return $this->projet;
src/Entity/Publication.php:        $doi = $this->getDoi();
src/Entity/Rallonge.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Rallonge.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Rallonge.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Rallonge.php: * TODO - Utiliser l'héritage pour faire hériter Version et Rallonge d'une même classe
src/Entity/Rallonge.php: *        cf. https://www.doctrine-project.org/projects/doctrine-orm/en/2.14/reference/inheritance-mapping.html
src/Entity/Rallonge.php:        $this->dar = new ArrayCollection();
src/Entity/Rallonge.php:        $this->expertise = new ArrayCollection();
src/Entity/Rallonge.php:        return $this->getIdRallonge();
src/Entity/Rallonge.php:        return $this->getIdRallonge();
src/Entity/Rallonge.php:        if (!$this->expertise->contains($expertise)) {
src/Entity/Rallonge.php:            $this->expertise[] = $expertise;
src/Entity/Rallonge.php:        $this->expertise->removeElement($expertise);
src/Entity/Rallonge.php:        return $this->expertise;
src/Entity/Rallonge.php:        $this->etatRallonge = $etatRallonge;
src/Entity/Rallonge.php:        return $this->setEtatRallonge($etatRallonge);
src/Entity/Rallonge.php:        return $this->etatRallonge;
src/Entity/Rallonge.php:        return $this->getEtatRallonge();
src/Entity/Rallonge.php:        $this->prjJustifRallonge = $prjJustifRallonge;
src/Entity/Rallonge.php:        return $this->prjJustifRallonge;
src/Entity/Rallonge.php:        $this->idRallonge = $idRallonge;
src/Entity/Rallonge.php:        return $this->idRallonge;
src/Entity/Rallonge.php:        $this->version = $version;
src/Entity/Rallonge.php:        return $this->version;
src/Entity/Rallonge.php:        if (!$this->dar->contains($dar)) {
src/Entity/Rallonge.php:            $this->dar[] = $dar;
src/Entity/Rallonge.php:        $this->dar->removeElement($dar);
src/Entity/Rallonge.php:        return $this->dar;
src/Entity/Rallonge.php:        $this->commentaireInterne = $commentaireInterne;
src/Entity/Rallonge.php:        return $this->commentaireInterne;
src/Entity/Rallonge.php:        $this->commentaireExterne = $commentaireExterne;
src/Entity/Rallonge.php:        return $this->commentaireExterne;
src/Entity/Rallonge.php:        $this->validation = $validation;
src/Entity/Rallonge.php:        return $this->validation;
src/Entity/Rallonge.php:        $this->expert = $expert;
src/Entity/Rallonge.php:        return $this->expert;
src/Entity/Rallonge.php:    // cf. https://stackoverflow.com/questions/39272733/boolean-values-and-choice-symfony-type
src/Entity/Rallonge.php:        $this->validation = (bool) $this->validation; // Force using boolean value of $this->active
src/Entity/Rallonge.php:        $this->validation = (bool) $this->validation;
src/Entity/Rallonge.php:        return $this->getEtatRallonge();
src/Entity/Rallonge.php:        $this->setEtatRallonge($state);
src/Entity/Rallonge.php:        $version = $this->getVersion();
src/Entity/Rallonge.php:            return $version->getResponsables();
src/Entity/Rallonge.php:        return $this->getExpert();
src/Entity/Rallonge.php:        return [$this->getExpert()];
src/Entity/Rallonge.php:        $version = $this->getVersion();
src/Entity/Rallonge.php:        $thematique = $version->getThematique();
src/Entity/Rallonge.php:            return $thematique->getExpert();
src/Entity/Rallonge.php:        return Etat::getLibelle($this->getEtatRallonge());
src/Entity/Rallonge.php:    // TODO - Mettre cette fonction dans ServiceRallonge
src/Entity/Rallonge.php:        $expert = $this->getExpert();
src/Entity/Rallonge.php:        } elseif ($expert->isEqualTo($individu)) {
src/Entity/Rallonge.php:        return $this->validation;
src/Entity/RapportActivite.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/RapportActivite.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/RapportActivite.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/RapportActivite.php:        $this->setProjet($projet);
src/Entity/RapportActivite.php:        $this->setAnnee($annee);
src/Entity/RapportActivite.php:        $this->annee = $annee;
src/Entity/RapportActivite.php:        return $this->annee;
src/Entity/RapportActivite.php:        $this->nomFichier = $nomFichier;
src/Entity/RapportActivite.php:        return $this->nomFichier;
src/Entity/RapportActivite.php:        $this->taille = $taille;
src/Entity/RapportActivite.php:        return $this->taille;
src/Entity/RapportActivite.php:        return $this->id;
src/Entity/RapportActivite.php:        $this->projet = $projet;
src/Entity/RapportActivite.php:        return $this->projet;
src/Entity/Ressource.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Ressource.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Ressource.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Ressource.php:        $this->dac = new ArrayCollection();
src/Entity/Ressource.php:        $this->dar = new ArrayCollection();
src/Entity/Ressource.php:        return $this->idRessource;
src/Entity/Ressource.php:        return $this->idRessource;
src/Entity/Ressource.php:        $this->serveur = $serveur;
src/Entity/Ressource.php:        return $this->serveur;
src/Entity/Ressource.php:        if (!$this->dac->contains($dac)) {
src/Entity/Ressource.php:            $this->dac[] = $dac;
src/Entity/Ressource.php:        $this->dac->removeElement($dac);
src/Entity/Ressource.php:        return $this->dac;
src/Entity/Ressource.php:        if (!$this->dar->contains($dar)) {
src/Entity/Ressource.php:            $this->dar[] = $dar;
src/Entity/Ressource.php:        $this->dar->removeElement($dar);
src/Entity/Ressource.php:        return $this->dar;
src/Entity/Ressource.php:        return $this->nom;
src/Entity/Ressource.php:        $this->nom = $nom;
src/Entity/Ressource.php:        return $this->desc;
src/Entity/Ressource.php:        $this->desc = $desc;
src/Entity/Ressource.php:        return $this->docUrl;
src/Entity/Ressource.php:        $this->docUrl = $docUrl;
src/Entity/Ressource.php:        return $this->unite;
src/Entity/Ressource.php:        $this->unite = $unite;
src/Entity/Ressource.php:        return $this->maxDem;
src/Entity/Ressource.php:        $this->maxDem = $maxDem;
src/Entity/Ressource.php:        return $this->co2;
src/Entity/Ressource.php:        $this->co2 = $co2;
src/Entity/Ressource.php:        if (null === $this->getNom()) {
src/Entity/Ressource.php:            return $this->getNom();
src/Entity/Serveur.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Serveur.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Serveur.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Serveur.php:        $this->ressource = new ArrayCollection();
src/Entity/Serveur.php:        $this->user = new ArrayCollection();
src/Entity/Serveur.php:        return $this->nom;
src/Entity/Serveur.php:        $this->nom = $nom;
src/Entity/Serveur.php:        if (!$this->ressource->contains($ressource)) {
src/Entity/Serveur.php:            $this->ressource[] = $ressource;
src/Entity/Serveur.php:        $this->ressource->removeElement($ressource);
src/Entity/Serveur.php:        return $this->ressource;
src/Entity/Serveur.php:        if (!$this->user->contains($user)) {
src/Entity/Serveur.php:            $this->user[] = $user;
src/Entity/Serveur.php:        $this->user->removeElement($user);
src/Entity/Serveur.php:        return $this->user;
src/Entity/Serveur.php:        return $this->desc;
src/Entity/Serveur.php:        $this->desc = $desc;
src/Entity/Serveur.php:        return $this->cguUrl;
src/Entity/Serveur.php:        $this->cguUrl = $cguUrl;
src/Entity/Serveur.php:        return $this->admname;
src/Entity/Serveur.php:        $this->admname = $admname;
src/Entity/Serveur.php:        return $this->getNom();
src/Entity/Sso.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Sso.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Sso.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Sso.php:        return $this->eppn;
src/Entity/Sso.php:        return $this->getEppn();
src/Entity/Sso.php:        $this->eppn = $eppn;
src/Entity/Sso.php:        $this->individu = $idIndividu;
src/Entity/Sso.php:        return $this->individu;
src/Entity/Sso.php:        return $this->getEppn();
src/Entity/Statut.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Statut.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Statut.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Statut.php:        return $this->getLibelleStatut();
src/Entity/Statut.php:        return $this->idStatut;
src/Entity/Statut.php:        return $this->getIdStatut();
src/Entity/Statut.php:        $this->idStatut = $idStatut;
src/Entity/Statut.php:        $this->individu = new ArrayCollection();
src/Entity/Statut.php:        $this->libelleStatut = $libelleStatut;
src/Entity/Statut.php:        return $this->libelleStatut;
src/Entity/Statut.php:        $this->permanent = $permanent;
src/Entity/Statut.php:        return $this->permanent;
src/Entity/Statut.php:        return $this->getPermanent();
src/Entity/Statut.php:        if (!$this->individu->contains($individu)) {
src/Entity/Statut.php:            $this->individu[] = $individu;
src/Entity/Statut.php:        $this->individu->removeElement($individu);
src/Entity/Statut.php:        return $this->individu;
src/Entity/Thematique.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Thematique.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Thematique.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Thematique.php:        return $this->getIdThematique();
src/Entity/Thematique.php:        return $this->getLibelleThematique();
src/Entity/Thematique.php:        $this->expert = new ArrayCollection();
src/Entity/Thematique.php:        $this->version = new ArrayCollection();
src/Entity/Thematique.php:        // $this->projetTest = new \Doctrine\Common\Collections\ArrayCollection();
src/Entity/Thematique.php:        $this->libelleThematique = $libelleThematique;
src/Entity/Thematique.php:        return $this->libelleThematique;
src/Entity/Thematique.php:        return $this->idThematique;
src/Entity/Thematique.php:        if (!$this->expert->contains($expert)) {
src/Entity/Thematique.php:            $this->expert[] = $expert;
src/Entity/Thematique.php:        $this->expert->removeElement($expert);
src/Entity/Thematique.php:        return $this->expert;
src/Entity/Thematique.php:        if (!$this->version->contains($version)) {
src/Entity/Thematique.php:            $this->version[] = $version;
src/Entity/Thematique.php:        $this->version->removeElement($version);
src/Entity/Thematique.php:        return $this->version;
src/Entity/User.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/User.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/User.php:        $output .= 'loginname='.$this->getLoginname().'}';
src/Entity/User.php:        $this->password = null;
src/Entity/User.php:        $this->passexpir = null;
src/Entity/User.php:        return $this->id;
src/Entity/User.php:        $this->loginname = $loginname;
src/Entity/User.php:        return $this->loginname;
src/Entity/User.php:        $this->serveur = $serveur;
src/Entity/User.php:        return $this->serveur;
src/Entity/User.php:        $this->individu = $individu;
src/Entity/User.php:        return $this->individu;
src/Entity/User.php:        $this->projet = $projet;
src/Entity/User.php:        return $this->projet;
src/Entity/User.php:        $this->password = $password;
src/Entity/User.php:        return $this->password;
src/Entity/User.php:        $this->cpassword = $cpassword;
src/Entity/User.php:        return $this->cpassword;
src/Entity/User.php:        $this->passexpir = $passexpir;
src/Entity/User.php:        return $this->passexpir;
src/Entity/User.php:        $this->expire = $expire;
src/Entity/User.php:        return $this->expire;
src/Entity/User.php:        $this->clessh = $clessh;
src/Entity/User.php:        return $this->clessh;
src/Entity/User.php:        $this->login = $login;
src/Entity/User.php:        return $this->login;
src/Entity/User.php:        $this->CGU = $CGU;
src/Entity/User.php:        return $this->CGU;
src/Entity/User.php:        $this->deply = $deply;
src/Entity/User.php:        return $this->deply;
src/Entity/User.php:        return $this->login;
src/Entity/User.php:        return $this->expire;
src/Entity/User.php:        return $this->CGU;
src/Entity/User.php:        return $this->deply;
src/Entity/Version.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Version.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Entity/Version.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Entity/Version.php: * TODO - Utiliser l'héritage pour faire hériter Version et Rallonge d'une même classe
src/Entity/Version.php: *        cf. https://www.doctrine-project.org/projects/doctrine-orm/en/2.14/reference/inheritance-mapping.html
src/Entity/Version.php:     *                Date limite, la version n'ira pas au-delà
src/Entity/Version.php:        return (string) $this->getIdVersion();
src/Entity/Version.php:        $this->collaborateurVersion = new ArrayCollection();
src/Entity/Version.php:        $this->rallonge = new ArrayCollection();
src/Entity/Version.php:        $this->dac = new ArrayCollection();
src/Entity/Version.php:        $this->expertise = new ArrayCollection();
src/Entity/Version.php:        $this->formationVersion = new ArrayCollection();
src/Entity/Version.php:        $this->etatVersion = Etat::EDITION_DEMANDE;
src/Entity/Version.php:        $this->etatVersion = $etatVersion;
src/Entity/Version.php:        return $this->setEtatVersion($etatVersion);
src/Entity/Version.php:        return $this->etatVersion;
src/Entity/Version.php:        $this->typeVersion = $typeVersion;
src/Entity/Version.php:        return $this->typeVersion;
src/Entity/Version.php:        $this->prjLLabo = $prjLLabo;
src/Entity/Version.php:        return $this->prjLLabo;
src/Entity/Version.php:        $this->prjTitre = $prjTitre;
src/Entity/Version.php:        return $this->prjTitre;
src/Entity/Version.php:        $this->prjFinancement = $prjFinancement;
src/Entity/Version.php:        return $this->prjFinancement;
src/Entity/Version.php:        $this->prjGenciMachines = $prjGenciMachines;
src/Entity/Version.php:        return $this->prjGenciMachines;
src/Entity/Version.php:        $this->prjGenciCentre = $prjGenciCentre;
src/Entity/Version.php:        return $this->prjGenciCentre;
src/Entity/Version.php:        $this->prjGenciDari = $prjGenciDari;
src/Entity/Version.php:        return $this->prjGenciDari;
src/Entity/Version.php:        $this->prjGenciHeures = $prjGenciHeures;
src/Entity/Version.php:        return $this->prjGenciHeures;
src/Entity/Version.php:        $this->prjExpose = $prjExpose;
src/Entity/Version.php:        return $this->prjExpose;
src/Entity/Version.php:        $this->prjJustifRenouv = $prjJustifRenouv;
src/Entity/Version.php:        return $this->prjJustifRenouv;
src/Entity/Version.php:        $this->prjFicheVal = $prjFicheVal;
src/Entity/Version.php:        return $this->prjFicheVal;
src/Entity/Version.php:        $this->codeNom = $codeNom;
src/Entity/Version.php:        return $this->codeNom;
src/Entity/Version.php:        $this->codeLicence = $codeLicence;
src/Entity/Version.php:        return $this->codeLicence;
src/Entity/Version.php:        $this->libelleThematique = $libelleThematique;
src/Entity/Version.php:        return $this->libelleThematique;
src/Entity/Version.php:        $this->majInd = $majInd;
src/Entity/Version.php:        return $this->majInd;
src/Entity/Version.php:        $this->majStamp = $majStamp;
src/Entity/Version.php:        return $this->majStamp;
src/Entity/Version.php:        $this->startDate = $startDate;
src/Entity/Version.php:        return $this->startDate;
src/Entity/Version.php:        $this->endDate = $endDate;
src/Entity/Version.php:        return $this->endDate;
src/Entity/Version.php:        $this->limitDate = $limitDate;
src/Entity/Version.php:        return $this->limitDate;
src/Entity/Version.php:        $this->fctStamp = $fctStamp;
src/Entity/Version.php:        return $this->fctStamp;
src/Entity/Version.php:        $this->prjFicheLen = $prjFicheLen;
src/Entity/Version.php:        return $this->prjFicheLen;
src/Entity/Version.php:        $this->idVersion = $idVersion;
src/Entity/Version.php:        return $this->idVersion;
src/Entity/Version.php:    // $id = $this->getIdVersion();
src/Entity/Version.php:        $this->CGU = $CGU;
src/Entity/Version.php:        return $this->CGU;
src/Entity/Version.php:        $this->prjThematique = $prjThematique;
src/Entity/Version.php:        return $this->prjThematique;
src/Entity/Version.php:        $this->nbVersion = $nbVersion;
src/Entity/Version.php:        return $this->nbVersion;
src/Entity/Version.php:        $this->projet = $projet;
src/Entity/Version.php:        $this->setTypeVersion($projet->getTypeProjet());
src/Entity/Version.php:        return $this->projet;
src/Entity/Version.php:        if (!$this->collaborateurVersion->contains($collaborateurVersion)) {
src/Entity/Version.php:            $this->collaborateurVersion[] = $collaborateurVersion;
src/Entity/Version.php:        $this->collaborateurVersion->removeElement($collaborateurVersion);
src/Entity/Version.php:        return $this->collaborateurVersion;
src/Entity/Version.php:        if (!$this->rallonge->contains($rallonge)) {
src/Entity/Version.php:            $this->rallonge[] = $rallonge;
src/Entity/Version.php:        $this->rallonge->removeElement($rallonge);
src/Entity/Version.php:        return $this->rallonge;
src/Entity/Version.php:        if (!$this->expertise->contains($expertise)) {
src/Entity/Version.php:            $this->expertise[] = $expertise;
src/Entity/Version.php:        $this->expertise->removeElement($expertise);
src/Entity/Version.php:        return $this->expertise;
src/Entity/Version.php:        if (!$this->formationVersion->contains($formationVersion)) {
src/Entity/Version.php:            $this->formationVersion[] = $formationVersion;
src/Entity/Version.php:        if ($this->formationVersion->contains($formationVersion)) {
src/Entity/Version.php:            $this->formationVersion->removeElement($formationVersion);
src/Entity/Version.php:        return $this->formationVersion;
src/Entity/Version.php:        return $this->getEtatVersion();
src/Entity/Version.php:        $this->setEtatVersion($state);
src/Entity/Version.php:        foreach ($this->getCollaborateurVersion() as $item) {
src/Entity/Version.php:            if (true === $item->getResponsable()) {
src/Entity/Version.php:                return $item->getCollaborateur();
src/Entity/Version.php:        foreach ($this->getCollaborateurVersion() as $item) {
src/Entity/Version.php:            if (true === $item->getResponsable()) {
src/Entity/Version.php:                $responsables[] = $item->getCollaborateur();
src/Entity/Version.php:        foreach ($this->getCollaborateurVersion() as $item) {
src/Entity/Version.php:            $collaborateur = $item->getCollaborateur();
src/Entity/Version.php:                // $sj->errorMessage("Version:getCollaborateur : collaborateur null pour CollaborateurVersion ". $item->getId() );
src/Entity/Version.php:            if (false === $moi_aussi && $collaborateur->isEqualTo($moi)) {
src/Entity/Version.php:            if (false === $seulement_eligibles || ($collaborateur->isPermanent() && $collaborateur->isFromLaboRegional())) {
src/Entity/Version.php:    // TODO - Wrapper vers getPrjLLabo, ne sert à rien !
src/Entity/Version.php:        return $this->getPrjLLabo();
src/Entity/Version.php:        $expertise = $this->getOneExpertise();
src/Entity/Version.php:            return $expertise->getExpert();
src/Entity/Version.php:        foreach ($this->getExpertise() as $item) {
src/Entity/Version.php:            $experts[] = $item->getExpert();
src/Entity/Version.php:        $expertise = $this->getOneExpertise();
src/Entity/Version.php:        $expert = $expertise->getExpert();
src/Entity/Version.php:        $thematique = $this->getPrjThematique();
src/Entity/Version.php:            return $thematique->getExpert();
src/Entity/Version.php:        return Etat::getLibelle($this->getEtatVersion());
src/Entity/Version.php:        $titre = $this->getPrjTitre();
src/Entity/Version.php:        return preg_replace('/^\s*([^\s]+)\s+(.*)$/', '${1}', $this->getPrjLLabo());
src/Entity/Version.php:        $etat = $this->getEtatVersion();
src/Entity/Version.php:    // Individu est-il collaborateur ? Responsable ? Expert ?
src/Entity/Version.php:        foreach ($this->getCollaborateurVersion() as $item) {
src/Entity/Version.php:            if (null === $item->getCollaborateur())
src/Entity/Version.php:            // $sj->errorMessage('Version:isCollaborateur collaborateur null pour CollaborateurVersion ' . $item);
src/Entity/Version.php:            elseif ($item->getCollaborateur()->isEqualTo($individu)) {
src/Entity/Version.php:        foreach ($this->getCollaborateurVersion() as $item) {
src/Entity/Version.php:            if (null === $item->getCollaborateur())
src/Entity/Version.php:            // $sj->errorMessage('Version:isCollaborateur collaborateur null pour CollaborateurVersion ' . $item);
src/Entity/Version.php:            elseif ($item->getCollaborateur()->isEqualTo($individu) && true === $item->getResponsable()) {
src/Entity/Version.php:        foreach ($this->getExpertise() as $expertise) {
src/Entity/Version.php:            $expert = $expertise->getExpert();
src/Entity/Version.php:            // $sj->errorMessage("Version:isExpert Expert null dans l'expertise " . $item);
src/Entity/Version.php:            elseif ($expert->isEqualTo($individu)) {
src/Entity/Version.php:        // //$sj->debugMessage(__METHOD__ . " thematique : " . Functions::show($thematique) );
src/Entity/Version.php:        $thematique = $this->getPrjThematique();
src/Entity/Version.php:            foreach ($thematique->getExpert() as $expert) {
src/Entity/Version.php:                if ($expert->isEqualTo($individu)) {
src/Entity/Version.php:    // // Contrairement au nom ne renvoie pas la version précédente, mais l'avant-dernière !!!
src/Entity/Version.php:    // // TODO - Supprimer cette fonction, ou la renommer
src/Entity/Version.php:    // $versions   =  $this->getProjet()->getVersion();
src/Entity/Version.php:    // $versions   =   $versions->toArray();
src/Entity/Version.php:    // return strcmp($a->getIdVersion(), $b->getIdVersion());
src/Entity/Version.php:    // //$sj->debugMessage( __METHOD__ .':'. __LINE__ . " version ID 0 1 = " . $versions[0]." " . $versions[1] );
src/Entity/Version.php:        $versions = $this->getProjet()->getVersion()->toArray();
src/Entity/Version.php:                return strcmp($a->getIdVersion(), $b->getIdVersion());
src/Entity/Version.php:        $k = array_search($this->getIdVersion(), $versions);
src/Entity/Version.php:            return $versions[$k - 1];
src/Entity/Version.php:     * TODO - Serait mieux dans ServiceVersions
src/Entity/Version.php:     *        Session 22A -> Renvoie la dernière année où il y a eu une version
src/Entity/Version.php:     *                       (normalement 2021, mais peut-être une année antérieure)
src/Entity/Version.php:    // $myAnnee    =  substr($this->getIdVersion(), 0, 2);
src/Entity/Version.php:    // foreach ($this->getProjet()->getVersion() as $version) {
src/Entity/Version.php:    // $annee = substr($version->getIdVersion(), 0, 2);
src/Entity/Version.php:        $expertises = $this->getExpertise()->toArray();
src/Entity/Version.php:    // $projet =   $this->getProjet();
src/Entity/Version.php:    // //$sj->errorMessage(__METHOD__ . ":" . __LINE__ . " version " . $this . " n'est pas associée à un projet !");
src/Entity/Version.php:    // return $projet->isProjetTest();
src/Entity/Version.php:        $etat = $this->getEtatVersion();
src/Entity/Version.php:        $responsable = $this->getResponsable();
src/Entity/Version.php:        $etablissement = $responsable->getEtab();
src/Entity/Version.php:        return $etablissement->__toString();
src/Entity/Version.php:        $thematique = $this->getPrjThematique();
src/Entity/Version.php:            return $thematique->__toString();
src/Entity/Version.php:        return $this->getEtatVersion();
src/Entity/Version.php:        return $this->getIdVersion();
src/Entity/Version.php:        return $this->prjFicheVal;
src/Entity/Version.php:        return $this->CGU;
src/Entity/Version.php:        return $this->versionDerniere;
src/Entity/Version.php:        if (null === $versionDerniere && null !== $this->versionDerniere) {
src/Entity/Version.php:            $this->versionDerniere->setVersionDerniere(null);
src/Entity/Version.php:        if (null !== $versionDerniere && $versionDerniere->getVersionDerniere() !== $this) {
src/Entity/Version.php:            $versionDerniere->setVersionDerniere($this);
src/Entity/Version.php:        $this->versionDerniere = $versionDerniere;
src/Entity/Version.php:        return $this->versionActive;
src/Entity/Version.php:        if (null === $versionActive && null !== $this->versionActive) {
src/Entity/Version.php:            $this->versionActive->setVersionActive(null);
src/Entity/Version.php:        if (null !== $versionActive && $versionActive->getVersionActive() !== $this) {
src/Entity/Version.php:            $versionActive->setVersionActive($this);
src/Entity/Version.php:        $this->versionActive = $versionActive;
src/Entity/Version.php:        return $this->dac;
src/Entity/Version.php:        if (!$this->dac->contains($dac)) {
src/Entity/Version.php:            $this->dac->add($dac);
src/Entity/Version.php:            $dac->setVersion($this);
src/Entity/Version.php:        if ($this->dac->removeElement($dac)) {
src/Entity/Version.php:            if ($dac->getVersion() === $this) {
src/Entity/Version.php:                $dac->setVersion(null);
src/EventListener/ExceptionListener.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/EventListener/ExceptionListener.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/EventListener/ExceptionListener.php: *                            - En mode DEBUG, affiche l'exception et sort
src/EventListener/ExceptionListener.php: *                            - En mode NON DEBUG, écrit dans le fichier de log ou dans le journal, puis redirige vers la page d'accueil
src/EventListener/ExceptionListener.php: *                            - TODO - refaire tout ça de manière symfoniquement correcte !
src/EventListener/ExceptionListener.php:        $this->kernel_debug = $kernel_debug;
src/EventListener/ExceptionListener.php:        $this->router = $router;
src/EventListener/ExceptionListener.php:        $this->logger = $logger;
src/EventListener/ExceptionListener.php:        $this->sj = $sj;
src/EventListener/ExceptionListener.php:        $this->em = $em;
src/EventListener/ExceptionListener.php:        $server = $event->getRequest()->server;
src/EventListener/ExceptionListener.php:        $exception = $event->getThrowable();
src/EventListener/ExceptionListener.php:        if (true == $this->kernel_debug) {
src/EventListener/ExceptionListener.php:        if ('/' == $event->getRequest()->getPathInfo()) {
src/EventListener/ExceptionListener.php:                $this->sj->errorMessage(__METHOD__.':'.__LINE__.' erreur dans la page / depuis '.$event->getRequest()->headers->get('referer'));
src/EventListener/ExceptionListener.php:                $this->logger->error(__METHOD__.':'.__LINE__.'erreur dans la page / depuis '.$event->getRequest()->headers->get('referer'));
src/EventListener/ExceptionListener.php:            $event->setResponse($response);
src/EventListener/ExceptionListener.php:            if (method_exists($this->em, 'isOpen') && $this->em->isOpen()) {
src/EventListener/ExceptionListener.php:                $this->logger->error(__METHOD__.':'.__LINE__.' Exception '.get_class($exception).' : '.$exception->getMessage().'  À partir de URL : '.$event->getRequest()->getPathInfo());
src/EventListener/ExceptionListener.php:                $this->logger->error(__METHOD__.':'.__LINE__.' Exception '.get_class($exception).' : '.$exception->getMessage().'  À partir de URL : '.$event->getRequest()->getPathInfo().' Entity manager closed');
src/EventListener/ExceptionListener.php:        elseif ($exception instanceof HttpException && $exception->getPrevious() instanceof InsufficientAuthenticationException) {
src/EventListener/ExceptionListener.php:            $event->getRequest()->getSession()->set('url', $event->getRequest()->getUri());
src/EventListener/ExceptionListener.php:            // $this->sj->warningMessage(__METHOD__ . ":" . __LINE__ ." accès anonyme à la page " . $event->getRequest()->getPathInfo());
src/EventListener/ExceptionListener.php:            if (true == $this->kernel_debug) {
src/EventListener/ExceptionListener.php:                $response = new RedirectResponse($this->router->generate('connexion_dbg'));
src/EventListener/ExceptionListener.php:                $response = new RedirectResponse($this->router->generate('connexion'));
src/EventListener/ExceptionListener.php:            $event->setResponse($response);
src/EventListener/ExceptionListener.php:            $this->sj->warningMessage(__METHOD__.':'.__LINE__.' accès à la page '.$event->getRequest()->getPathInfo().' non autorisé');
src/EventListener/ExceptionListener.php:            $response = new RedirectResponse($this->router->generate('accueil'));
src/EventListener/ExceptionListener.php:            $event->setResponse($response);
src/EventListener/ExceptionListener.php:            // Nous redirigeons vers la page 'accueil' - pas de log
src/EventListener/ExceptionListener.php:            $response = new RedirectResponse($this->router->generate('accueil'));
src/EventListener/ExceptionListener.php:            $event->setResponse($response);
src/EventListener/ExceptionListener.php:            $this->logger->warning('Error to '.$event->getRequest()->getRequestUri(),
src/EventListener/ExceptionListener.php:                'request' => $event->getRequest(),
src/EventListener/ExceptionListener.php:            $this->sj->warningMessage(__METHOD__.':'.__LINE__.' Exception '.get_class($exception).' : '.$exception->getMessage().
src/EventListener/ExceptionListener.php:                                      '  À partir de URL : '.$event->getRequest()->getPathInfo());
src/EventListener/ExceptionListener.php:            $response = new RedirectResponse($this->router->generate('accueil'));
src/EventListener/ExceptionListener.php:            $event->setResponse($response);
src/EventListener/ProjetDerniereVersion.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/EventListener/ProjetDerniereVersion.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/EventListener/ProjetDerniereVersion.php: * Voir https://symfony.com/index.php/doc/4.4/doctrine/events.html#doctrine-entity-listeners
src/EventListener/ProjetDerniereVersion.php:        $this->sp = $sp;
src/EventListener/ProjetDerniereVersion.php:        $this->em = $em;
src/EventListener/ProjetDerniereVersion.php:        $projet = $version->getProjet();
src/EventListener/ProjetDerniereVersion.php:        $this->sp->calculVersionDerniere($projet);
src/EventListener/ProjetDerniereVersion.php:        // dd($projet,$version,$projet->getVersionDerniere());
src/EventListener/ProjetDerniereVersion.php:        $projet = $version->getProjet();
src/EventListener/ProjetDerniereVersion.php:        $this->sp->calculVersionDerniere($projet);
src/EventListener/ProjetDerniereVersion.php:        // $this->em->persist($projet);
src/EventListener/ProjetDerniereVersion.php:        // $this->em->flush();		// ne marche pas si on ne met pas flush ici
src/EventListener/ProjetDerniereVersion.php:        $projet = $version->getProjet();
src/EventListener/ProjetDerniereVersion.php:        $this->sp->calculVersionDerniere($projet);
src/EventListener/ProjetDerniereVersion.php:        // $this->em->persist($projet);
src/EventListener/ProjetDerniereVersion.php:        // $this->em->flush();
src/EventListener/VersionStamp.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/EventListener/VersionStamp.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/EventListener/VersionStamp.php: * Voir https://symfony.com/index.php/doc/4.4/doctrine/events.html#doctrine-entity-listeners.
src/EventListener/VersionStamp.php:        $this->token = $tok->getToken();
src/EventListener/VersionStamp.php:        if (null == $this->token) {
src/EventListener/VersionStamp.php:        $user = $this->token->getUser();
src/EventListener/VersionStamp.php:            if ($version->isCollaborateur($user)) {
src/EventListener/VersionStamp.php:                $version->setMajInd($user);
src/EventListener/VersionStamp.php:                $version->setMajStamp(new \DateTime());
src/EventListener/VersionStamp.php:                $version->setMajInd(null);
src/EventSubscriber/ResponseSubscriber.php:// cf. https://lindevs.com/add-custom-header-to-every-response-in-symfony/
src/EventSubscriber/ResponseSubscriber.php:        if (!$event->isMainRequest()) {
src/EventSubscriber/ResponseSubscriber.php:        $request = $event->getRequest();
src/EventSubscriber/ResponseSubscriber.php:        if (str_starts_with($request->getPathInfo(), '/adminux')) {
src/EventSubscriber/ResponseSubscriber.php:        $response = $event->getResponse();
src/EventSubscriber/ResponseSubscriber.php:            $response->headers->set('Content-Security-Policy', "default-src 'none'; frame-ancestors 'none'");
src/EventSubscriber/ResponseSubscriber.php:            $response->headers->set('Content-Security-Policy', "img-src 'self' data:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-hashes' https://malsup.github.io/jquery.form.js; frame-ancestors 'none'; frame-src 'none'");
src/EventSubscriber/ResponseSubscriber.php:            // $response->headers->set("Content-Security-Policy", "default-src 'none'; img-src 'self' data:; style-src 'self' 'unsafe-hashes'; script-src 'self' 'unsafe-hashes'; frame-ancestors 'none'; frame-src 'none'");
src/Form/AdresseipType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/AdresseipType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/AdresseipType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/AdresseipType.php:        $builder->add('adresse', TextType::class,
src/Form/AdresseipType.php:                ->add('submit', SubmitType::class, ['label' => 'nouvelle IP (CIDR)'])
src/Form/AdresseipType.php:                ->add('reset', ResetType::class, ['label' => 'Annuler']);
src/Form/AdresseipType.php:            $builder->add('laboratoire');
src/Form/AdresseipType.php:        $resolver->setDefaults([
src/Form/ChoiceList/ExpertChoiceLoader.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ChoiceList/ExpertChoiceLoader.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ChoiceList/ExpertChoiceLoader.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/ChoiceList/ExpertChoiceLoader.php:        $this->exclus = $exclus;
src/Form/ChoiceList/ExpertChoiceLoader.php:            foreach ($em->getRepository(Individu::class)->findBy(['president' => true]) as $expert) {
src/Form/ChoiceList/ExpertChoiceLoader.php:                static::$global_choices['Présidents'][$expert->getIdIndividu()] = $expert;
src/Form/ChoiceList/ExpertChoiceLoader.php:                $experts[$expert->getIdIndividu()] = $expert;
src/Form/ChoiceList/ExpertChoiceLoader.php:            foreach ($em->getRepository(Thematique::class)->findAll() as $thematique) {
src/Form/ChoiceList/ExpertChoiceLoader.php:                foreach ($thematique->getExpert()->toArray() as $expert) {
src/Form/ChoiceList/ExpertChoiceLoader.php:                    if ($expert->isExpert()) {
src/Form/ChoiceList/ExpertChoiceLoader.php:                        static::$global_choices[$thematique->getLibelleThematique()][$expert->getIdIndividu()] = $expert;
src/Form/ChoiceList/ExpertChoiceLoader.php:                        // static::$choices[ $thematique->getLibelleThematique() ][]   =   $expert;
src/Form/ChoiceList/ExpertChoiceLoader.php:                        $experts[$expert->getIdIndividu()] = $expert;
src/Form/ChoiceList/ExpertChoiceLoader.php:                // static::$choices[ $thematique->getLibelleThematique() ] = $experts_thematique;
src/Form/ChoiceList/ExpertChoiceLoader.php:            foreach ($em->getRepository(Individu::class)->findBy(['expert' => true]) as $expert) {
src/Form/ChoiceList/ExpertChoiceLoader.php:                if (!array_key_exists($expert->getIdIndividu(), $experts)) {
src/Form/ChoiceList/ExpertChoiceLoader.php:                    static::$global_choices['Experts hors thématique'][$expert->getIdIndividu()] = $expert;
src/Form/ChoiceList/ExpertChoiceLoader.php:        $this->expertToId = [];
src/Form/ChoiceList/ExpertChoiceLoader.php:        $this->idToExpert = [];
src/Form/ChoiceList/ExpertChoiceLoader.php:        $this->choices = [];
src/Form/ChoiceList/ExpertChoiceLoader.php:                if (!array_key_exists($expert_id, $this->exclus)) {
src/Form/ChoiceList/ExpertChoiceLoader.php:                    $this->choices[$thematique_key][] = $expert;
src/Form/ChoiceList/ExpertChoiceLoader.php:                    $this->expertToId[$expert_id] = count($this->idToExpert);
src/Form/ChoiceList/ExpertChoiceLoader.php:                    $this->idToExpert[] = $expert;
src/Form/ChoiceList/ExpertChoiceLoader.php:        // Functions::debugMessage(__METHOD__ . " choices : " . Functions::show( $this->choices ) );
src/Form/ChoiceList/ExpertChoiceLoader.php:        return new ArrayChoiceList($this->choices);
src/Form/ChoiceList/ExpertChoiceLoader.php:        // Functions::debugMessage(__METHOD__ . " idToExpert : " . Functions::show( $this->idToExpert ) );
src/Form/ChoiceList/ExpertChoiceLoader.php:        // Functions::debugMessage(__METHOD__ . " expertToId : " . Functions::show( $this->expertToId ) );
src/Form/ChoiceList/ExpertChoiceLoader.php:            if (isset($this->idToExpert[$id])) {
src/Form/ChoiceList/ExpertChoiceLoader.php:                $result[] = $this->idToExpert[$id];
src/Form/ChoiceList/ExpertChoiceLoader.php:        // Functions::debugMessage(__METHOD__ . " expertToId : " . Functions::show( $this->expertToId ) );
src/Form/ChoiceList/ExpertChoiceLoader.php:        // Functions::debugMessage(__METHOD__ . " idToExpert : " . Functions::show( $this->idToExpert ) );
src/Form/ChoiceList/ExpertChoiceLoader.php:            if (null != $individu && isset($this->expertToId[$individu->getIdIndividu()])) {
src/Form/ChoiceList/ExpertChoiceLoader.php:                $result[] = $this->expertToId[$individu->getIdIndividu()];
src/Form/ClesshType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ClesshType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ClesshType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/ClesshType.php:            ->add('nom', TextType::class, ['required' => true, 'label' => 'Nom de la clé:', 'attr' => ['placeholder' => 'choisissez un nom']])
src/Form/ClesshType.php:            ->add('pub', TextType::class, ['required' => true,
src/Form/ClesshType.php:                                           'attr' => ['size' => '100', 'placeholder' => 'ssh-ed25519 AAAAXYZ3SDDVKEDZMPV5DDSGGHVRTYBYUTYUNTYUNTYUNTYUNTYUNyunuyn,tyunnnn7 dupont@example.com'],
src/Form/ClesshType.php:            ->add('submit', SubmitType::class, ['label' => 'ajouter'])
src/Form/ClesshType.php:            ->add('reset', ResetType::class, ['label' => 'reset']);
src/Form/CompteActivationType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/CompteActivationType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/CompteActivationType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/CompteActivationType.php:        $builder->add('stamp')->add('key')->add('individu');
src/Form/CompteActivationType.php:        $resolver->setDefaults([
src/Form/DacType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/DacType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/DacType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/DacType.php:            $builder->add('demande', IntegerType::class, ['label' => $options['label']]);
src/Form/DacType.php:            $builder->add('attribution', IntegerType::class, ['label' => $options['label']]);
src/Form/DacType.php:        $resolver->setDefaults([
src/Form/DarType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/DarType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/DarType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/DarType.php:            $builder->add('demande', IntegerType::class, ['label' => $options['label']]);
src/Form/DarType.php:            $builder->add('attribution', IntegerType::class, ['label' => $options['label']]);
src/Form/DarType.php:        $resolver->setDefaults([
src/Form/EtablissementType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/EtablissementType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/EtablissementType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/EtablissementType.php:        $builder->add('libelleEtab')->add('individu');
src/Form/EtablissementType.php:        $resolver->setDefaults([
src/Form/ExpertiseType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ExpertiseType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ExpertiseType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/ExpertiseType.php:        $builder->add('validation')
src/Form/ExpertiseType.php:                ->add('commentaireInterne')
src/Form/ExpertiseType.php:                ->add('commentaireExterne')
src/Form/ExpertiseType.php:                ->add('definitif')
src/Form/ExpertiseType.php:                ->add('version')
src/Form/ExpertiseType.php:                ->add('expert');
src/Form/ExpertiseType.php:        $resolver->setDefaults([
src/Form/FormationType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/FormationType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/FormationType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/FormationType.php:            ->add('numeroform', IntegerType::class, ['required' => true, 'label' => "Numéro d'ordre *:"])
src/Form/FormationType.php:            ->add('acroform', TextType::class, ['required' => true, 'label' => 'Acronyme *:'])
src/Form/FormationType.php:            ->add('nomform', TextType::class, ['required' => true, 'label' => 'Nom *:'])
src/Form/FormationType.php:            ->add('startdate', DateType::class, ['required' => true, 'label' => 'Ne pas proposer avant cette date *:', 'widget' => 'single_text'])
src/Form/FormationType.php:            ->add('enddate', DateType::class, ['required' => true, 'label' => 'Ne pas proposer après cette date *:', 'widget' => 'single_text']);
src/Form/FormationType.php:            $builder->add('individu');
src/Form/FormationType.php:                ->add('submit', SubmitType::class, ['label' => 'modifier'])
src/Form/FormationType.php:                ->add('reset', ResetType::class, ['label' => 'reset']);
src/Form/FormationType.php:                ->add('submit', SubmitType::class, ['label' => 'ajouter'])
src/Form/FormationType.php:                ->add('reset', ResetType::class, ['label' => 'reset']);
src/Form/FormationType.php:        $resolver->setDefaults(
src/Form/FormationVersionType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/FormationVersionType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/FormationVersionType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/FormationVersionType.php:        $builder->add('nombre', IntegerType::class, ['label' => ' ']);
src/Form/FormationVersionType.php:        $resolver->setDefaults([
src/Form/GererUtilisateurType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/GererUtilisateurType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/GererUtilisateurType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/GererUtilisateurType.php:                ->add(
src/Form/GererUtilisateurType.php:                ->add(
src/Form/GererUtilisateurType.php:                 ->add(
src/Form/GererUtilisateurType.php:                ->add('active',     SubmitType::class,
src/Form/GererUtilisateurType.php:                ->add('expert',     SubmitType::class,
src/Form/GererUtilisateurType.php:                ->add('admin',     SubmitType::class,
src/Form/GererUtilisateurType.php:        $resolver->setDefaults([]);
src/Form/IndividuForm/IndividuForm.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/IndividuForm/IndividuForm.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/IndividuForm/IndividuForm.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/IndividuForm/IndividuForm.php: * TODO - elle devrait s'appeler IndividuData
src/Form/IndividuForm/IndividuForm.php:            $this->logins[$n] = false;
src/Form/IndividuForm/IndividuForm.php:        $this->deleted = false;
src/Form/IndividuForm/IndividuForm.php:        $this->responsable = false;
src/Form/IndividuForm/IndividuForm.php:            $this->mail = $individu->getMail();
src/Form/IndividuForm/IndividuForm.php:            $this->prenom = $individu->getPrenom();
src/Form/IndividuForm/IndividuForm.php:            $this->nom = $individu->getNom();
src/Form/IndividuForm/IndividuForm.php:            $this->statut = $individu->getStatut();
src/Form/IndividuForm/IndividuForm.php:            $this->laboratoire = $individu->getLabo();
src/Form/IndividuForm/IndividuForm.php:            $this->etablissement = $individu->getEtab();
src/Form/IndividuForm/IndividuForm.php:            $this->id = $individu->getId();
src/Form/IndividuForm/IndividuForm.php:        if (true == $this->getDeleted()) {
src/Form/IndividuForm/IndividuForm.php:        if (true == $this->getResponsable()) {
src/Form/IndividuForm/IndividuForm.php:        $output .= $this->getMail().':'.$this->getPrenom().':'.$this->getNom().':'.$this->getStatut().':';
src/Form/IndividuForm/IndividuForm.php:        $output .= $this->getLaboratoire().':'.$this->getEtablissement().':'.$this->getId();
src/Form/IndividuForm/IndividuForm.php:        return $this->logins;
src/Form/IndividuForm/IndividuForm.php:        $this->logins = [];
src/Form/IndividuForm/IndividuForm.php:            $this->logins[$k] = empty($l) ? false : true;
src/Form/IndividuForm/IndividuForm.php:        return $this->responsable;
src/Form/IndividuForm/IndividuForm.php:        $this->responsable = $responsable;
src/Form/IndividuForm/IndividuForm.php:        return $this->deleted;
src/Form/IndividuForm/IndividuForm.php:        $this->deleted = $deleted;
src/Form/IndividuForm/IndividuForm.php:        return $this->mail;
src/Form/IndividuForm/IndividuForm.php:        $this->mail = $mail;
src/Form/IndividuForm/IndividuForm.php:        return $this->id;
src/Form/IndividuForm/IndividuForm.php:        $this->id = $id;
src/Form/IndividuForm/IndividuForm.php:        return $this->prenom;
src/Form/IndividuForm/IndividuForm.php:        $this->prenom = $prenom;
src/Form/IndividuForm/IndividuForm.php:        return $this->nom;
src/Form/IndividuForm/IndividuForm.php:        $this->nom = $nom;
src/Form/IndividuForm/IndividuForm.php:        return $this->statut;
src/Form/IndividuForm/IndividuForm.php:        $this->statut = $statut;
src/Form/IndividuForm/IndividuForm.php:        return $this->laboratoire;
src/Form/IndividuForm/IndividuForm.php:        $this->laboratoire = $laboratoire;
src/Form/IndividuForm/IndividuForm.php:        return $this->etablissement;
src/Form/IndividuForm/IndividuForm.php:        $this->etablissement = $etablissement;
src/Form/IndividuForm/IndividuForm.php:        $individu->setMail($this->getMail());
src/Form/IndividuForm/IndividuForm.php:        $individu->setNom($this->getNom());
src/Form/IndividuForm/IndividuForm.php:        $individu->setPrenom($this->getPrenom());
src/Form/IndividuForm/IndividuForm.php:        $individu->setLabo($this->getLaboratoire());
src/Form/IndividuForm/IndividuForm.php:        $individu->setLabo($this->getLaboratoire());
src/Form/IndividuForm/IndividuForm.php:        $individu->setEtab($this->getEtablissement());
src/Form/IndividuForm/IndividuForm.php:        $individu->setStatut($this->getStatut());
src/Form/IndividuForm/IndividuForm.php:            // //$this->sj->debugMessage(__METHOD__ . ':' . __LINE__ . ' ERREURS = '. print_r($erreurs,true));
src/Form/IndividuForm/IndividuForm.php:            if (!empty($this->getNom()) && $individu->getNom() != $this->getNom()) {
src/Form/IndividuForm/IndividuForm.php:                $sj->warningMessage("Le nom de l'individu ".$individu.' id('.$individu->getIdIndividu().') a été modifié de '.
src/Form/IndividuForm/IndividuForm.php:                                    $individu->getNom().' vers '.$this->getNom());
src/Form/IndividuForm/IndividuForm.php:                $individu->setNom($this->getNom());
src/Form/IndividuForm/IndividuForm.php:            if (!empty($this->getPrenom()) && $individu->getPrenom() != $this->getPrenom()) {
src/Form/IndividuForm/IndividuForm.php:                $sj->warningMessage("Le prénom de l'individu ".$individu.' id('.$individu->getIdIndividu().') a été modifié de '.
src/Form/IndividuForm/IndividuForm.php:                                    $individu->getPrenom().' vers '.$this->getPrenom());
src/Form/IndividuForm/IndividuForm.php:                $individu->setPrenom($this->getPrenom());
src/Form/IndividuForm/IndividuForm.php:                if ($individu->getLabo() != $this->getLaboratoire()) {
src/Form/IndividuForm/IndividuForm.php:                    $sj->warningMessage("Le laboratoire de l'individu ".$individu.' id('.$individu->getIdIndividu().') a été modifié de '.
src/Form/IndividuForm/IndividuForm.php:                                        $individu->getLabo().' vers '.$this->getLaboratoire());
src/Form/IndividuForm/IndividuForm.php:                    $individu->setLabo($this->getLaboratoire());
src/Form/IndividuForm/IndividuForm.php:                if ($individu->getEtab() != $this->getEtablissement()) {
src/Form/IndividuForm/IndividuForm.php:                    $sj->warningMessage("L'établissement de l'individu ".$individu.' id('.$individu->getIdIndividu().') a été modifié de '.
src/Form/IndividuForm/IndividuForm.php:                                        $individu->getEtab().' vers '.$this->getEtablissement());
src/Form/IndividuForm/IndividuForm.php:                    $individu->setEtab($this->getEtablissement());
src/Form/IndividuForm/IndividuForm.php:                if ($individu->getStatut() != $this->getStatut()) {
src/Form/IndividuForm/IndividuForm.php:                    $sj->warningMessage("Le statut de l'individu ".$individu.' id('.$individu->getIdIndividu().') a été modifié de '.
src/Form/IndividuForm/IndividuForm.php:                                        $individu->getStatut().' vers '.$this->getStatut());
src/Form/IndividuForm/IndividuForm.php:                    $individu->setStatut($this->getStatut());
src/Form/IndividuFormType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/IndividuFormType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/IndividuFormType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/IndividuFormType.php:                $builder->add(
src/Form/IndividuFormType.php:        $builder->setDataMapper($this);
src/Form/IndividuFormType.php:        $builder->add(
src/Form/IndividuFormType.php:        // NOTE - si text_fields vaut true, cela veut dire que les champs
src/Form/IndividuFormType.php:        $builder->add(
src/Form/IndividuFormType.php:        ->add(
src/Form/IndividuFormType.php:            $builder->add(
src/Form/IndividuFormType.php:            ->add(
src/Form/IndividuFormType.php:            ->add(
src/Form/IndividuFormType.php:            $builder->add(
src/Form/IndividuFormType.php:                    'placeholder' => '-- Indiquez le statut',
src/Form/IndividuFormType.php:            ->add(
src/Form/IndividuFormType.php:                    'placeholder' => '-- Indiquez le laboratoire',
src/Form/IndividuFormType.php:            ->add(
src/Form/IndividuFormType.php:                    'placeholder' => "-- Indiquez l'établissement",
src/Form/IndividuFormType.php:        $builder->add(
src/Form/IndividuFormType.php:        $builder->add(
src/Form/IndividuFormType.php:        //        $builder->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
src/Form/IndividuFormType.php:        //            dd($event, $event->getForm(), $event->getForm()->children);
src/Form/IndividuFormType.php:        $resolver->setDefaults(
src/Form/IndividuFormType.php:        $vd_logins = $viewData->getLogins();
src/Form/IndividuFormType.php:                $forms[$field]->setData($login);
src/Form/IndividuFormType.php:        // NOTE - Pour les champs marqués comme disabled cela ne servira à rien
src/Form/IndividuFormType.php:        $forms['mail']->setData($viewData->getMail());
src/Form/IndividuFormType.php:        $forms['prenom']->setData($viewData->getPrenom());
src/Form/IndividuFormType.php:        $forms['nom']->setData($viewData->getNom());
src/Form/IndividuFormType.php:        $forms['statut']->setData($viewData->getStatut());
src/Form/IndividuFormType.php:        $forms['laboratoire']->setData($viewData->getLaboratoire());
src/Form/IndividuFormType.php:        $forms['etablissement']->setData($viewData->getEtablissement());
src/Form/IndividuFormType.php:        $forms['id']->setData($viewData->getId());
src/Form/IndividuFormType.php:                $vd_logins[$k] = empty($forms[$f]->getData()) ? false : true;
src/Form/IndividuFormType.php:        $viewData->setLogins($vd_logins);
src/Form/IndividuFormType.php:        $viewData->setMail($forms['mail']->getData());
src/Form/IndividuFormType.php:        $viewData->setPrenom($forms['prenom']->getData());
src/Form/IndividuFormType.php:        $viewData->setNom($forms['nom']->getData());
src/Form/IndividuFormType.php:        $viewData->setStatut($forms['statut']->getData());
src/Form/IndividuFormType.php:        $viewData->setLaboratoire($forms['laboratoire']->getData());
src/Form/IndividuFormType.php:        $viewData->setEtablissement($forms['etablissement']->getData());
src/Form/IndividuFormType.php:        $viewData->setId($forms['id']->getData());
src/Form/IndividuFormType.php:        // dd($forms['mail']->getData(),$forms, $viewData, $vd_logins_src, $vd_logins_dst);
src/Form/IndividuType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/IndividuType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/IndividuType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/IndividuType.php:        $this->em = $em;
src/Form/IndividuType.php:            $builder->add('creationStamp');
src/Form/IndividuType.php:                ->add('nom', TextType::class, ['label' => 'Nom:'])
src/Form/IndividuType.php:                ->add('prenom', TextType::class, ['label' => 'Prénom']);
src/Form/IndividuType.php:                $builder->add('mail', EmailType::class);
src/Form/IndividuType.php:                $builder->add('mail', EmailType::class, ['disabled' => true]);
src/Form/IndividuType.php:                $builder->add('mail', EmailType::class);
src/Form/IndividuType.php:                $builder->add('mail', EmailType::class, ['disabled' => true]);
src/Form/IndividuType.php:                ->add('admin')
src/Form/IndividuType.php:                ->add('expert')
src/Form/IndividuType.php:                ->add('responsable')
src/Form/IndividuType.php:                ->add('collaborateur')
src/Form/IndividuType.php:                ->add('president')
src/Form/IndividuType.php:                ->add('desactive');
src/Form/IndividuType.php:                ->add(
src/Form/IndividuType.php:                    'placeholder' => '-- Indiquez le laboratoire',
src/Form/IndividuType.php:                    'choices' => $this->em->getRepository(Laboratoire::class)->findAllSorted(),
src/Form/IndividuType.php:                ->add(
src/Form/IndividuType.php:                    'placeholder' => '-- Indiquez votre statut',
src/Form/IndividuType.php:                    'choices' => $this->em->getRepository(Statut::class)->findBy(['permanent' => true]),
src/Form/IndividuType.php:                ->add(
src/Form/IndividuType.php:                    'placeholder' => '-- Indiquez votre statut',
src/Form/IndividuType.php:            ->add(
src/Form/IndividuType.php:                    'placeholder' => '-- Indiquez votre établissement',
src/Form/IndividuType.php:            $builder->add(
src/Form/IndividuType.php:                ->add(
src/Form/IndividuType.php:        $resolver->setDefaults(
src/Form/JournalType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/JournalType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/JournalType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/JournalType.php:        $builder->add('idIndividu')->add('gramcSessId')->add('type')->add('message')->add('stamp')->add('ip');
src/Form/JournalType.php:        $resolver->setDefaults([
src/Form/LaboratoireType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/LaboratoireType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/LaboratoireType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/LaboratoireType.php:            ->add('numeroLabo', IntegerType::class, ['required' => true, 'label' => "Numéro d'ordre:"])
src/Form/LaboratoireType.php:            ->add('acroLabo', TextType::class, ['required' => true, 'label' => 'Acronyme:'])
src/Form/LaboratoireType.php:            ->add('nomLabo', TextType::class, ['required' => true, 'label' => 'Nom *:']);
src/Form/LaboratoireType.php:            $builder->add('individu');
src/Form/LaboratoireType.php:                ->add('submit', SubmitType::class, ['label' => 'modifier'])
src/Form/LaboratoireType.php:                ->add('reset', ResetType::class, ['label' => 'reset']);
src/Form/LaboratoireType.php:                ->add('submit', SubmitType::class, ['label' => 'ajouter'])
src/Form/LaboratoireType.php:                ->add('reset', ResetType::class, ['label' => 'reset'])
src/Form/LaboratoireType.php:        $resolver->setDefaults(
src/Form/ListIndividuType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ListIndividuType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ListIndividuType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/ListIndividuType.php:        $builder->add('tags', CollectionType::class, [
src/Form/ListIndividuType.php:        $resolver->setDefaults(
src/Form/ParamType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ParamType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ParamType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/ParamType.php:        $builder->add('cle')->add('val');
src/Form/ParamType.php:        $resolver->setDefaults([
src/Form/ProjetType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ProjetType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ProjetType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/ProjetType.php:        $builder->add('etatProjet')->add('idProjet')->add('publi')->add('versionActive')->add('versionDerniere');
src/Form/ProjetType.php:        $resolver->setDefaults([
src/Form/PublicationType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/PublicationType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/PublicationType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/PublicationType.php:        $this->grdt = $grdt;
src/Form/PublicationType.php:            ->add('refbib', TextType::class, ['required' => true])
src/Form/PublicationType.php:            ->add('doi', TextType::class, ['required' => false])
src/Form/PublicationType.php:            ->add('openUrl', TextType::class, ['required' => false])
src/Form/PublicationType.php:            ->add('idPubli', IntegerType::class, ['required' => false])
src/Form/PublicationType.php:            ->add(
src/Form/PublicationType.php:                'choices' => Functions::choicesYear(new \DateTime('2000-01-01'), $this->grdt, 0),
src/Form/PublicationType.php:            $builder->add('projet');
src/Form/PublicationType.php:        $resolver->setDefaults(
src/Form/RapportActiviteType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/RapportActiviteType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/RapportActiviteType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/RapportActiviteType.php:        $builder->add('annee')->add('nomFichier')->add('taille')->add('projet');
src/Form/RapportActiviteType.php:        $resolver->setDefaults([
src/Form/RessourceType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/RessourceType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/RessourceType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/RessourceType.php:        $this->em = $em;
src/Form/RessourceType.php:            ->add('serveur', EntityType::class,
src/Form/RessourceType.php:                'placeholder' => '-- Serveur',
src/Form/RessourceType.php:                'choices' => $this->em->getRepository(Serveur::class)->findAllSorted(),
src/Form/RessourceType.php:            ->add('nom', TextType::class, ['required' => false, 'label' => 'nom de la ressource (optionnel, 8 char max):', 'attr' => ['maxlength' => 8]])
src/Form/RessourceType.php:            ->add('desc', TextAreaType::class, ['required' => true, 'label' => 'Description (balises html ok):', 'attr' => ['rows' => '5', 'cols' => '50']])
src/Form/RessourceType.php:            ->add('docUrl', TextType::class, ['required' => false, 'label' => 'URL vers la doc :', 'attr' => ['size' => '40']])
src/Form/RessourceType.php:            ->add('unite', TextType::class, ['required' => false, 'label' => 'Unité :'])
src/Form/RessourceType.php:            ->add('maxDem', IntegerType::class, ['required' => false, 'label' => 'Valeur max de la demande :'])
src/Form/RessourceType.php:            ->add('co2', IntegerType::class, ['required' => false, 'label' => 'co2 (g) émis par unite et par heure :']);
src/Form/RessourceType.php:                ->add('submit', SubmitType::class, ['label' => 'modifier'])
src/Form/RessourceType.php:                ->add('reset', ResetType::class, ['label' => 'reset']);
src/Form/RessourceType.php:                ->add('submit', SubmitType::class, ['label' => 'ajouter'])
src/Form/RessourceType.php:                ->add('reset', ResetType::class, ['label' => 'reset']);
src/Form/RessourceType.php:        $resolver->setDefaults(
src/Form/SelectJournalType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/SelectJournalType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/SelectJournalType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/SelectJournalType.php:        $builder->add(
src/Form/SelectJournalType.php:                ->add(
src/Form/SelectJournalType.php:                ->add(
src/Form/SelectJournalType.php:                ->add(
src/Form/SelectJournalType.php:        $from->setTime(0, 0, 0);
src/Form/SelectJournalType.php:        $until->add(\DateInterval::createFromDateString('1 day'));
src/Form/SelectJournalType.php:        $resolver->setDefaults([
src/Form/ServeurType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ServeurType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ServeurType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/ServeurType.php:            ->add('nom', TextType::class, ['required' => true, 'label' => 'nom du serveur *:', 'disabled' => $options['modifier']])
src/Form/ServeurType.php:            ->add('desc', TextType::class, ['required' => false, 'label' => 'Description :'])
src/Form/ServeurType.php:            ->add('cguUrl', TextType::class, ['required' => false, 'label' => 'Url des CGU :'])
src/Form/ServeurType.php:            ->add('admname', TextType::class,
src/Form/ServeurType.php:                ->add('submit', SubmitType::class, ['label' => 'modifier'])
src/Form/ServeurType.php:                ->add('reset', ResetType::class, ['label' => 'reset']);
src/Form/ServeurType.php:                ->add('submit', SubmitType::class, ['label' => 'ajouter'])
src/Form/ServeurType.php:                ->add('reset', ResetType::class, ['label' => 'reset']);
src/Form/ServeurType.php:        $resolver->setDefaults(
src/Form/SessionType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/SessionType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/SessionType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/SessionType.php:        $this->grdt = $grdt;
src/Form/SessionType.php:        $this->em = $em;
src/Form/SessionType.php:            $builder->add('commGlobal');
src/Form/SessionType.php:            $builder->add('typeSession')->add('commGlobal');
src/Form/SessionType.php:            ->add(
src/Form/SessionType.php:                    'years' => Functions::years(new \DateTime(), $this->grdt->getNew()),
src/Form/SessionType.php:            ->add(
src/Form/SessionType.php:                    'years' => Functions::years(new \DateTime(), $this->grdt->getNew()),
src/Form/SessionType.php:            ->add(
src/Form/SessionType.php:        // ->add('president',  EntityType::class,
src/Form/SessionType.php:        //        'choices' =>  $this->em->getRepository(Individu::class)->findBy(['expert' => true]),
src/Form/SessionType.php:            $builder->add(
src/Form/SessionType.php:                    ->add('idSession');
src/Form/SessionType.php:                ->add('submit', SubmitType::class, ['label' => $options['submit_label']])
src/Form/SessionType.php:                ->add('reset', ResetType::class, ['label' => 'reset']);
src/Form/SessionType.php:        $resolver->setDefaults(
src/Form/SsoType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/SsoType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/SsoType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/SsoType.php:        $builder->add('eppn');
src/Form/SsoType.php:            $builder->add('individu');
src/Form/SsoType.php:        $resolver->setDefaults([
src/Form/StatutType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/StatutType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/StatutType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/StatutType.php:        $builder->add('idStatut')->add('libelleStatut')->add('permanent');
src/Form/StatutType.php:        $resolver->setDefaults([
src/Form/ThematiqueType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ThematiqueType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/ThematiqueType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/ThematiqueType.php:        $this->em = $em;
src/Form/ThematiqueType.php:            ->add('libelleThematique')
src/Form/ThematiqueType.php:            ->add(
src/Form/ThematiqueType.php:                ->add('submit', SubmitType::class, ['label' => 'modifier'])
src/Form/ThematiqueType.php:                ->add('reset', ResetType::class, ['label' => 'reset']);
src/Form/ThematiqueType.php:                ->add('submit', SubmitType::class, ['label' => 'ajouter'])
src/Form/ThematiqueType.php:                ->add('reset', ResetType::class, ['label' => 'reset']);
src/Form/ThematiqueType.php:        $resolver->setDefaults(
src/Form/ThematiqueType.php:            'experts' => $this->em->getRepository(Individu::class)->findAll(),
src/Form/UserType.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Form/UserType.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Form/UserType.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Form/UserType.php:        $this->em = $em;
src/Form/UserType.php:        $builder->add(
src/Form/UserType.php:                ->add(
src/Form/UserType.php:                ->add('submit', SubmitType::class, ['label' => 'modifier'])
src/Form/UserType.php:                ->add('reset', ResetType::class, ['label' => 'reset']);
src/Form/UserType.php:        $resolver->setDefaults([
src/GramcServices/Cron/Cron.php: * Lorsqu'on appelle la fonction execute, celle-ci appelle en séquence toutes les fonction cronExecute() des objets du tableau
src/GramcServices/Cron/Cron.php: * TODO - 1/ Comment automatiser l'initialisation du tableau ?
src/GramcServices/Cron/Cron.php:        $this->taches[] = $nct;
src/GramcServices/Cron/Cron.php:        $this->taches[] = $tct;
src/GramcServices/Cron/Cron.php:        $this->taches[] = $tsct;
src/GramcServices/Cron/Cron.php:        $this->taches[] = $ict;
src/GramcServices/Cron/Cron.php:        foreach ($this->taches as $t) {
src/GramcServices/Cron/Cron.php:            $t->cronExecute();
src/GramcServices/Cron/CronTaskBase.php: * CronTaskBase - Une classe abstraite dont dérive toutes les CronTasks
src/GramcServices/Cron/GramcCronTask/InvitCronTask.php: * Invit CronTask - Recherche les invitations périmées et les supprime
src/GramcServices/Cron/GramcCronTask/InvitCronTask.php:        $em = $this->em;
src/GramcServices/Cron/GramcCronTask/InvitCronTask.php:        $sj = $this->sj;
src/GramcServices/Cron/GramcCronTask/InvitCronTask.php:        $grdt = $this->grdt;
src/GramcServices/Cron/GramcCronTask/InvitCronTask.php:        $invit_duree = $this->invit_duree;
src/GramcServices/Cron/GramcCronTask/InvitCronTask.php:        $invitations = $em->getRepository(Invitation::class)->findAll();
src/GramcServices/Cron/GramcCronTask/InvitCronTask.php:            $stamp = $i->getCreationStamp();
src/GramcServices/Cron/GramcCronTask/InvitCronTask.php:            $date_max = $stamp->add($age_max);
src/GramcServices/Cron/GramcCronTask/InvitCronTask.php:            if ($date_max->getTimestamp() < $grdt->getTimestamp()) {
src/GramcServices/Cron/GramcCronTask/InvitCronTask.php:                $em->remove($i);
src/GramcServices/Cron/GramcCronTask/InvitCronTask.php:            $em->flush();
src/GramcServices/Cron/GramcCronTask/InvitCronTask.php:            $sj->infoMessage(__METHOD__.':'.__LINE__." Suppression de $cpt/$j invitations");
src/GramcServices/Cron/GramcCronTask/NopCronTask.php: * No oPeration CronTask - Ne fait rien, mais si ça marche on est content !
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php: * Temps CronTask - Recherche tous les projets dont la dernière version est en état ACTIF ou ACTIF_R
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:        $em = $this->em;
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:        $dyn_duree_post = $this->dyn_duree_post;
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:        $sp = $this->sp;
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:        $grdt = $this->grdt->getNew();
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:        // echo "date = ".$grdt->format('Y-m-d')."\n";
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:        $workflow = $this->v4w;
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:        $workflow_p = $this->p4w;
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:        $sj = $this->sj;
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:        $projet_repository = $em->getRepository(Projet::class);
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:        $projets = $projet_repository->findAll();
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:            $derver = $p->getVersionDerniere();
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                $sj->errorMessage(__METHOD__.':'.__LINE__." Projet $p - Pas de versionDerniere !");
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:            $etat_version = $derver->getEtatVersion();
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                $ld = $derver->getLimitDate();
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                    $sj->errorMessage(__METHOD__.':'.__LINE__." Version $derver - Pas de LimitDate !");
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                    $r_date = $ld->sub(new \DateInterval('P30D'));
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                        // echo "$derver - DAT_ACTR\n";
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                        $rtn = $workflow->execute($signal, $derver);
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                            $sj->warningMessage(__METHOD__.':'.__LINE__." Version $derver - Etat $etat_version - Signal $signal - Echec de la transition");
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                        $em->flush();
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                    // echo "$derver - CLK_FERM\n";
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                    $derver->setEndDate($grdt);
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                    $rtn = $workflow->execute($signal, $derver);
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                        $sj->warningMessage(__METHOD__.':'.__LINE__." Version $derver - Etat $etat_version - Signal $signal - Echec de la transition");
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                    $em->persist($derver);
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                    $em->flush();
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:            if (0 === count($sp->getVersionsNonTerminees($p))) {
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                $ld = $p->getLimitDate();
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                    if ($grdt > $ld->add(new \DateInterval($dyn_duree_post))) {
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                        $rtn = $workflow_p->execute($signal, $p);
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                            $etat_projet = $p->getEtatProjet();
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                            $sj->warningMessage(__METHOD__.':'.__LINE__." Projet $p - Etat $etat_projet - Signal $signal - Echec de la transition");
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                        $em->persist($derver);
src/GramcServices/Cron/GramcCronTask/TempsCronTask.php:                        $em->flush();
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php: * Temps Stdby CronTask - Recherche tous les projets dont la dernière version est en état STANDBY
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:        $em = $this->em;
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:        $dyn_duree_post = $this->dyn_duree_post;
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:        $sp = $this->sp;
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:        $grdt = $this->grdt->getNew();
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:        // echo "date = ".$grdt->format('Y-m-d')."\n";
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:        $workflow = $this->tp4w;
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:        $sj = $this->sj;
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:        $projet_repository = $em->getRepository(Projet::class);
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:        $projets = $projet_repository->findAll();
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:            $derver = $p->getVersionDerniere();
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:                $sj->errorMessage(__METHOD__.':'.__LINE__." Projet $p - Pas de versionDerniere !");
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:            $etat_version = $derver->getEtatVersion();
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:                $ld = clone $derver->getLimitDate();
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:                    $sj->errorMessage(__METHOD__.':'.__LINE__." Version $derver - Pas de LimitDate !");
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:                $ld = $ld->add(new \DateInterval($dyn_duree_post));
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:                        $r_date = $ld->sub(new \DateInterval('P'.$duree.'D'));
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:                        // echo "Projet = $p grdt = " . $grdt->format('Y-M-d') . " date = " . $r_date->format('Y-M-d')."\n";
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:                            $rtn = $workflow->execute($signal, $p);
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:                                $tetat = $p->getTetatProjet();
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:                                // echo "Projet = $p - Etat $tetat - Signal $signal - Echec de la transition\n";
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:                                $sj->warningMessage(__METHOD__.':'.__LINE__." Projet $p - Etat $tetat - Signal $signal - Echec de la transition");
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:                                $tetat = $p->getTetatProjet();
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:                                // echo "Projet = $p - Etat $tetat - Signal $signal - REUSSITE de la transition\n";
src/GramcServices/Cron/GramcCronTask/TempsStdbyCronTask.php:                            $em->flush();
src/GramcServices/DonneesFacturation.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/DonneesFacturation.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/DonneesFacturation.php: * NOTE - LIMITATION = On considère qu'il ne peut pas y avoir plus que 9 données de facturation pour un projet !
src/GramcServices/DonneesFacturation.php:        return $this->dfct_directory.'/'.$annee.'/'.$projet;
src/GramcServices/DonneesFacturation.php:        $dfct_dir = $this->getDirName($projet, $annee);
src/GramcServices/DonneesFacturation.php:                while (false !== ($entry = $dir->read())) {
src/GramcServices/DonneesFacturation.php:        $dfct_files = $this->getPathes($projet, $annee);
src/GramcServices/DonneesFacturation.php:            $numeros[] = substr($f, 4, 1); // dfct1.pdb -> "1"
src/GramcServices/DonneesFacturation.php:     * 	-> si $new = false renvoie '' si le fichier n'existe pas
src/GramcServices/DonneesFacturation.php:     *  -> si $new = true  renvoie '' si le fichier existe déjà !
src/GramcServices/DonneesFacturation.php:        $f = $this->getDirName($projet, $annee).'/dfct'.$nb.'.pdb';
src/GramcServices/DonneesFacturation.php:     * Renvoie -1 s'il y a une incohérence de dates
src/GramcServices/DonneesFacturation.php:     * TODO - A REFAIRE COMPLETEMENT POUR LES PROJETS DYNAMIQUES !!!!!
src/GramcServices/DonneesFacturation.php:        //    - Pas possible de faire des facturations avant le 20 Janvier
src/GramcServices/DonneesFacturation.php:        //    - On espère que le compteur a été remis à zéro avant le 20 Janvier...
src/GramcServices/DonneesFacturation.php:        $annee = $debut_periode->format('Y');
src/GramcServices/DonneesFacturation.php:        $repos = $this->em->getRepository(Compta::class);
src/GramcServices/DonneesFacturation.php:        if ($debut_periode < new \DateTime($annee.'-01-20')) {
src/GramcServices/DonneesFacturation.php:            $debut_conso = $repos->consoDateInt($projet, $debut_periode);
src/GramcServices/DonneesFacturation.php:        $fin_periode_conso->add(new \DateInterval('P1D'));
src/GramcServices/DonneesFacturation.php:        $fin_conso = $repos->consoDateInt($projet, $fin_periode_conso);
src/GramcServices/DonneesFacturation.php:        // //echo ($projet."###".$fin_periode_conso->format('Y-m-d==>'.$fin_conso));
src/GramcServices/DonneesFacturation.php:            $conso_periode = -1;
src/GramcServices/DonneesFacturation.php:            $conso_periode = $fin_conso - $debut_conso;
src/GramcServices/DonneesFacturation.php:        $dir = $this->getDirName($projet, $annee);
src/GramcServices/DonneesFacturation.php:        $numeros = $this->getNbEmises($projet, $annee);
src/GramcServices/DonneesFacturation.php:            $nb = $numeros[count($numeros) - 1] + 1;
src/GramcServices/DonneesFacturation.php:        $path = $this->getPath($projet, $annee, $nb, true);
src/GramcServices/DonneesFacturation.php:            $this->sj->errorMessage(__METHOD__.':'.__LINE__." getPath renvoie vide ($projet $annee $nb");
src/GramcServices/DonneesFacturation.php:        $versions = $this->sp->getVersionsAnnee($projet, $annee);
src/GramcServices/Etat.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Etat.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Etat.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/Etat.php:    // NOTE - Résultat indéfini si $a ou $b sont négatifs !
src/GramcServices/Etat.php:    // TODO - Refaire ça comme cmpEtatExpertiseRall
src/GramcServices/Etat.php:        return (self::ORDRE_ETAT[$a] < self::ORDRE_ETAT_RALL[$b]) ? -1 : 1;
src/GramcServices/Etat.php:        return (self::ORDRE_ETAT_RALL[$a] < self::ORDRE_ETAT_RALL[$b]) ? -1 : 1;
src/GramcServices/GramcDate.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/GramcDate.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/GramcDate.php: * DateString: -2 years + 3 days
src/GramcServices/GramcDate.php:        $this->setTime(0, 0, 0);
src/GramcServices/GramcDate.php:            $this->sp,
src/GramcServices/GramcDate.php:            $this->em
src/GramcServices/GramcDateTime.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/GramcDateTime.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/GramcDateTime.php: * DateString: -2 years + 3 days
src/GramcServices/GramcDateTime.php:        if ($sp->hasParameter('now')) {
src/GramcServices/GramcDateTime.php:            parent::__construct($sp->getParameter('now'));
src/GramcServices/GramcDateTime.php:        } elseif ($sp->hasParameter('DateString')) {
src/GramcServices/GramcDateTime.php:            $dateInterval = \DateInterval::createFromDateString($sp->getParameter('DateString'));
src/GramcServices/GramcDateTime.php:            $this->add($dateInterval);
src/GramcServices/GramcDateTime.php:        } elseif ($sp->hasParameter('DateShift')) {
src/GramcServices/GramcDateTime.php:            $dateInterval = new \DateInterval($sp->getParameter('DateShift'));
src/GramcServices/GramcDateTime.php:            if ($sp->hasParameter('future') && false == $sp->getParameter('future')) {
src/GramcServices/GramcDateTime.php:                $this->sub($dateInterval);
src/GramcServices/GramcDateTime.php:                $this->add($dateInterval);
src/GramcServices/GramcDateTime.php:        } elseif ($sp->hasParameter('NewDate') && $sp->hasParameter('OldDate')) {
src/GramcServices/GramcDateTime.php:            $oldDate = new \DateTime($sp->getParameter('OldDate'));
src/GramcServices/GramcDateTime.php:            $newDate = new \DateTime($sp->getParameter('NewDate'));
src/GramcServices/GramcDateTime.php:            $this->add($dateInterval);
src/GramcServices/GramcDateTime.php:        return $this->format($format);
src/GramcServices/GramcDateTime.php:        return $this->format($format);
src/GramcServices/GramcDateTime.php:        return $this->format($format);
src/GramcServices/GramcDateTime.php:        return $this->format($format);
src/GramcServices/ServiceDacs.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceDacs.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceDacs.php:        $em = $this->em;
src/GramcServices/ServiceDacs.php:        $dacs = $em->getRepository(Dac::class)->findBy(['version' => $v, 'ressource' => $r]);
src/GramcServices/ServiceDacs.php:            $d->setRessource($r);
src/GramcServices/ServiceDacs.php:            $d->setVersion($v);
src/GramcServices/ServiceDacs.php:            $v->addDac($d);
src/GramcServices/ServiceDacs.php:            $em->persist($d);
src/GramcServices/ServiceDacs.php:            $em->flush($d);
src/GramcServices/ServiceDacs.php:            throw $this->sj->throwException('ServiceDacs:getDac findBy renvoie '.count($dacs).' objets '."$v - $r");
src/GramcServices/ServiceDacs.php:        $sr = $this->sr;
src/GramcServices/ServiceDacs.php:        $vdacs = $v->getDac();
src/GramcServices/ServiceDacs.php:            $k = $sr->getNomComplet($dac->getRessource(), '_');
src/GramcServices/ServiceDacs.php:     * c'est-à-dire l'attribution totale pour une version et une ressource,
src/GramcServices/ServiceDacs.php:        $attribution = $dac->getAttribution();
src/GramcServices/ServiceDacs.php:        $ressource = $dac->getRessource();
src/GramcServices/ServiceDacs.php:        $version = $dac->getVersion();
src/GramcServices/ServiceDacs.php:        foreach ($version->getRallonge() as $rallonge) {
src/GramcServices/ServiceDacs.php:            if (Etat::ACTIF === $rallonge->getEtatRallonge() || Etat::TERMINE === $rallonge->getEtatRallonge()) {
src/GramcServices/ServiceDacs.php:                foreach ($rallonge->getDar() as $dar) {
src/GramcServices/ServiceDacs.php:                    if ($dar->getRessource() === $ressource) {
src/GramcServices/ServiceDacs.php:                        $attribution += $dar->getAttribution();
src/GramcServices/ServiceDacs.php:        if ($dac->getTodof()) {
src/GramcServices/ServiceDacs.php:        $ressource = $dac->getRessource();
src/GramcServices/ServiceDacs.php:        $version = $dac->getVersion();
src/GramcServices/ServiceDacs.php:        foreach ($version->getRallonge() as $rallonge) {
src/GramcServices/ServiceDacs.php:            foreach ($rallonge->getDar() as $dar) {
src/GramcServices/ServiceDacs.php:                if ($dar->getRessource() === $ressource && $dar->getTodof()) {
src/GramcServices/ServiceDacs.php:     * c'est-à-dire la demande totale pour une version et une ressource,
src/GramcServices/ServiceDacs.php:        $demande = $dac->getDemande();
src/GramcServices/ServiceDacs.php:        $ressource = $dac->getRessource();
src/GramcServices/ServiceDacs.php:        $version = $dac->getVersion();
src/GramcServices/ServiceDacs.php:        foreach ($version->getRallonge() as $rallonge) {
src/GramcServices/ServiceDacs.php:            if (Etat::ACTIF === $rallonge->getEtatRallonge() || Etat::TERMINE === $rallonge->getEtatRallonge()) {
src/GramcServices/ServiceDacs.php:                foreach ($rallonge->getDar() as $dar) {
src/GramcServices/ServiceDacs.php:                    if ($dar->getRessource() === $ressource) {
src/GramcServices/ServiceDacs.php:                        $demande += $dar->getDemande();
src/GramcServices/ServiceDars.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceDars.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceDars.php:        $em = $this->em;
src/GramcServices/ServiceDars.php:        $dars = $em->getRepository(Dac::class)->findBy(['rallonge' => $r, 'ressource' => $r]);
src/GramcServices/ServiceDars.php:            $d->setRessource($r);
src/GramcServices/ServiceDars.php:            $d->setRallonge($r);
src/GramcServices/ServiceDars.php:            $r->addDar($r);
src/GramcServices/ServiceDars.php:            $em->persist($d);
src/GramcServices/ServiceDars.php:            $em->flush($d);
src/GramcServices/ServiceDars.php:            throw $this->sj->throwException('ServiceDars:getDar findBy renvoie '.count($dars).' objets '."$rg - $r");
src/GramcServices/ServiceDars.php:        $sr = $this->sr;
src/GramcServices/ServiceDars.php:        $rgdars = $r->getDac();
src/GramcServices/ServiceDars.php:            $k = $sr->getNomComplet($dar->getRessource(), '_');
src/GramcServices/ServiceExpertises.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceExpertises.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceExpertises.php:        $ff = $this->ff;
src/GramcServices/ServiceExpertises.php:        $sv = $this->sv;
src/GramcServices/ServiceExpertises.php:        $data = $sv->prepareRessources($version);
src/GramcServices/ServiceExpertises.php:            if (0 !== $dac->getAttribution()) {
src/GramcServices/ServiceExpertises.php:                $dac->setAttribution($dac->getDemande());
src/GramcServices/ServiceExpertises.php:        $form = $this->ff
src/GramcServices/ServiceExpertises.php:                   ->createNamedBuilder('form_ressource', FormType::class, ['ressource' => $data])
src/GramcServices/ServiceExpertises.php:                   ->add('ressource', CollectionType::class, [
src/GramcServices/ServiceExpertises.php:                   ->getForm();
src/GramcServices/ServiceExpertises.php:        $ff = $this->ff;
src/GramcServices/ServiceExpertises.php:        $srg = $this->srg;
src/GramcServices/ServiceExpertises.php:        $data = $srg->prepareRessources($rallonge);
src/GramcServices/ServiceExpertises.php:            if (0 !== $dar->getAttribution()) {
src/GramcServices/ServiceExpertises.php:                $dar->setAttribution($dar->getDemande());
src/GramcServices/ServiceExpertises.php:        $form = $this->ff
src/GramcServices/ServiceExpertises.php:                   ->createNamedBuilder('form_ressource', FormType::class, ['ressource' => $data])
src/GramcServices/ServiceExpertises.php:                   ->add('ressource', CollectionType::class, [
src/GramcServices/ServiceExpertises.php:                   ->getForm();
src/GramcServices/ServiceExperts/ServiceExperts.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceExperts/ServiceExperts.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceExperts/ServiceExperts.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceExperts/ServiceExperts.php:        $this->demandes = $demandes;
src/GramcServices/ServiceExperts/ServiceExperts.php:        if (null == $this->form_buttons) {
src/GramcServices/ServiceExperts/ServiceExperts.php:            $this->form_buttons =
src/GramcServices/ServiceExperts/ServiceExperts.php:                $this->formFactory->createNamedBuilder('BOUTONS', FormType::class, null, ['csrf_protection' => false])
src/GramcServices/ServiceExperts/ServiceExperts.php:                     ->add('sub1', SubmitType::class, ['label' => 'Affecter et notifier les experts', 'attr' => ['title' => 'Les experts affectés recevront une notification par courriel']])
src/GramcServices/ServiceExperts/ServiceExperts.php:                     ->add('sub2', SubmitType::class, ['label' => 'Affecter les experts', 'attr' => ['title' => 'Les experts seront affectés mais ne recevront aucune notification']])
src/GramcServices/ServiceExperts/ServiceExperts.php:                     ->add('sub3', SubmitType::class, ['label' => 'Ajouter une expertise', 'attr' => ['title' => 'Ajouter un expert si possible']])
src/GramcServices/ServiceExperts/ServiceExperts.php:                     ->add('sub4', SubmitType::class, ['label' => 'Supp expertise sans expert', 'attr' => ['title' => 'ATTENTION - Risque de perte de données']])
src/GramcServices/ServiceExperts/ServiceExperts.php:                     ->getForm();
src/GramcServices/ServiceExperts/ServiceExperts.php:        return $this->form_buttons;
src/GramcServices/ServiceExperts/ServiceExperts.php:     * Supprime les associations individu - thématiques
src/GramcServices/ServiceExperts/ServiceExperts.php:     * TODO - Intégrer cette fonctionnalité à un controleur !
src/GramcServices/ServiceExperts/ServiceExperts.php:        foreach ($individu->getThematique() as $thematique) {
src/GramcServices/ServiceExperts/ServiceExperts.php:            $individu->removeThematique($thematique);
src/GramcServices/ServiceExperts/ServiceExperts.php:        $this->em->persist($individu);
src/GramcServices/ServiceExperts/ServiceExperts.php:        $all_thematiques = $this->em->getRepository(Thematique::class)->findAll();
src/GramcServices/ServiceExperts/ServiceExperts.php:            $thematique->removeExpert($individu);
src/GramcServices/ServiceExperts/ServiceExperts.php:            $this->em->persist($thematique);
src/GramcServices/ServiceExperts/ServiceExperts.php:     * NOTE - Si un expert a disparu on appelle noThematique puis on fait un flush
src/GramcServices/ServiceExperts/ServiceExperts.php:        $em = $this->em;
src/GramcServices/ServiceExperts/ServiceExperts.php:        $demandes = $this->demandes;
src/GramcServices/ServiceExperts/ServiceExperts.php:        if (null == $this->thematiques) {
src/GramcServices/ServiceExperts/ServiceExperts.php:            foreach ($em->getRepository(Thematique::class)->findAll() as $thematique) {
src/GramcServices/ServiceExperts/ServiceExperts.php:                foreach ($thematique->getExpert() as $expert) {
src/GramcServices/ServiceExperts/ServiceExperts.php:                    if (false == $expert->getExpert()) {
src/GramcServices/ServiceExperts/ServiceExperts.php:                        $this->sj->warningMessage(__METHOD__.':'.__LINE__." $expert".' est supprimé de la thématique '.$thematique);
src/GramcServices/ServiceExperts/ServiceExperts.php:                        $this->noThematique($expert);
src/GramcServices/ServiceExperts/ServiceExperts.php:                        $em->flush();
src/GramcServices/ServiceExperts/ServiceExperts.php:                $thematiques[$thematique->getIdThematique()] =
src/GramcServices/ServiceExperts/ServiceExperts.php:                    ['thematique' => $thematique, 'experts' => $thematique->getExpert(), 'projets' => 0];
src/GramcServices/ServiceExperts/ServiceExperts.php:                $etatDemande = $demande->getEtat();
src/GramcServices/ServiceExperts/ServiceExperts.php:                if (null != $demande->getPrjThematique()) {
src/GramcServices/ServiceExperts/ServiceExperts.php:                    ++$thematiques[$demande->getPrjThematique()->getIdThematique()]['projets'];
src/GramcServices/ServiceExperts/ServiceExperts.php:            $this->thematiques = $thematiques;
src/GramcServices/ServiceExperts/ServiceExperts.php:        return $this->thematiques;
src/GramcServices/ServiceExperts/ServiceExperts.php:     * NOTE - beurk cf. note sur l'héritage dans les entités Version ou Rallonge
src/GramcServices/ServiceExperts/ServiceExperts.php:        $lg = $this->lg;
src/GramcServices/ServiceExperts/ServiceExperts.php:        $sj = $this->sj;
src/GramcServices/ServiceExperts/ServiceExperts.php:        $em = $this->em;
src/GramcServices/ServiceExperts/ServiceExperts.php:        if (count($objet->getExpertise()) > 0) {
src/GramcServices/ServiceExperts/ServiceExperts.php:            $sj->noticeMessage(__METHOD__.':'.__LINE__.' Expertise de '.$objet.' existe déjà');
src/GramcServices/ServiceExperts/ServiceExperts.php:                $expertise->setVersion($objet);
src/GramcServices/ServiceExperts/ServiceExperts.php:                $expertise->setRallonge($objet);
src/GramcServices/ServiceExperts/ServiceExperts.php:     * TODO - Plutôt que de ne rien faire, envoyer un message d'erreur !
src/GramcServices/ServiceExperts/ServiceExperts.php:        $expertises = $demande->getExpertise()->toArray();
src/GramcServices/ServiceExperts/ServiceExperts.php:        $em = $this->em;
src/GramcServices/ServiceExperts/ServiceExperts.php:            if (null == $e->getExpert()) {
src/GramcServices/ServiceExperts/ServiceExperts.php:                $to_rem[] = $e->getid();
src/GramcServices/ServiceExperts/ServiceExperts.php:                $em->remove($em->getRepository(Expertise::class)->find($e_id));
src/GramcServices/ServiceExperts/ServiceExperts.php:            $em->flush();
src/GramcServices/ServiceExperts/ServiceExperts.php:        $em = $this->em;
src/GramcServices/ServiceExperts/ServiceExperts.php:        $expertises = $demande->getExpertise()->toArray();
src/GramcServices/ServiceExperts/ServiceExperts.php:            // TODO - Trouver un truc plus élégant que ça !
src/GramcServices/ServiceExperts/ServiceExperts.php:                $id_experts[] = null == $e ? $cnt_null++ : $e->getIdIndividu();
src/GramcServices/ServiceExperts/ServiceExperts.php:            // $this->sj->debugMessage( __METHOD__ . ' experts uniques -> '.count(array_unique($id_experts)) .'  experts -> '.count($id_experts));
src/GramcServices/ServiceExperts/ServiceExperts.php:            $e->setExpert(array_shift($experts));
src/GramcServices/ServiceExperts/ServiceExperts.php:            $em->persist($e);
src/GramcServices/ServiceExperts/ServiceExperts.php:        $em->flush();
src/GramcServices/ServiceExperts/ServiceExperts.php:        $demandes = $this->demandes;
src/GramcServices/ServiceExperts/ServiceExperts.php:            $etatDemande = $demande->getEtat();
src/GramcServices/ServiceExperts/ServiceExperts.php:            $exp = $demande->getExperts();
src/GramcServices/ServiceExperts/ServiceExperts.php:            $sform = $this->getSelForm($demande)->createView();
src/GramcServices/ServiceExperts/ServiceExperts.php:            $forms['selection_'.$demande->getId()] = $sform;
src/GramcServices/ServiceExperts/ServiceExperts.php:            $eforms = $this->getExpertForms($demande);
src/GramcServices/ServiceExperts/ServiceExperts.php:                $f = $f->createView();
src/GramcServices/ServiceExperts/ServiceExperts.php:            $forms[$demande->getId()] = $eforms;
src/GramcServices/ServiceExperts/ServiceExperts.php:            $forms['BOUTONS'] = $this->getFormButtons()->createView();
src/GramcServices/ServiceExperts/ServiceExperts.php:        $demandes = $this->demandes;
src/GramcServices/ServiceExperts/ServiceExperts.php:            $etatDemande = $demande->getEtat();
src/GramcServices/ServiceExperts/ServiceExperts.php:            $exp = $demande->getExperts();
src/GramcServices/ServiceExperts/ServiceExperts.php:                    if (!isset($experts_assoc[$e->getIdIndividu()])) {
src/GramcServices/ServiceExperts/ServiceExperts.php:                        $experts_assoc[$e->getIdIndividu()] = ['expert' => $e, 'projets' => 0];
src/GramcServices/ServiceExperts/ServiceExperts.php:                    ++$experts_assoc[$e->getIdIndividu()]['projets'];
src/GramcServices/ServiceExperts/ServiceExperts.php:            $nbDemHeures += $demande->getDemHeures();
src/GramcServices/ServiceExperts/ServiceExperts.php:            $nbAttHeures += $demande->getAttrHeures();
src/GramcServices/ServiceExperts/ServiceExperts.php:        $demandes = $this->demandes;
src/GramcServices/ServiceExperts/ServiceExperts.php:            $etatDemande = $demande->getEtat();
src/GramcServices/ServiceExperts/ServiceExperts.php:        return ($a['expert']->getNom() <= $b['expert']->getNom()) ? -1 : 1;
src/GramcServices/ServiceExperts/ServiceExperts.php:        return $a->getId() > $b->getId();
src/GramcServices/ServiceExperts/ServiceExperts.php:        $demandes = $this->demandes;
src/GramcServices/ServiceExperts/ServiceExperts.php:            $etat_demande = $demande->getEtat();
src/GramcServices/ServiceExperts/ServiceExperts.php:            $exp = $demande->getExperts();
src/GramcServices/ServiceExperts/ServiceExperts.php:                if (!isset($experts_assoc[$e->getIdIndividu()])) {
src/GramcServices/ServiceExperts/ServiceExperts.php:                    $experts_assoc[$e->getIdIndividu()] = ['expert' => $e, 'projets' => 0];
src/GramcServices/ServiceExperts/ServiceExperts.php:                ++$experts_assoc[$e->getIdIndividu()]['projets'];
src/GramcServices/ServiceExperts/ServiceExperts.php:        $nom = 'selection_'.$demande->getId();
src/GramcServices/ServiceExperts/ServiceExperts.php:        $formBuilder = $this->formFactory->createNamedBuilder($nom, FormType::class, null, ['csrf_protection' => false]);
src/GramcServices/ServiceExperts/ServiceExperts.php:        $formBuilder->add('sel', CheckboxType::class, ['required' => false, 'attr' => ['class' => 'expsel']]);
src/GramcServices/ServiceExperts/ServiceExperts.php:        return $formBuilder->getForm();
src/GramcServices/ServiceExperts/ServiceExperts.php:        $em = $this->em;
src/GramcServices/ServiceExperts/ServiceExperts.php:        $expertises = $demande->getExpertise()->toArray();
src/GramcServices/ServiceExperts/ServiceExperts.php:        $exclus = $em->getRepository(CollaborateurVersion::class)->getCollaborateurs($demande->getProjet());
src/GramcServices/ServiceExperts/ServiceExperts.php:            $expert = $expertise->getExpert();
src/GramcServices/ServiceExperts/ServiceExperts.php:                $exclus[$expert->getId()] = $expert;
src/GramcServices/ServiceExperts/ServiceExperts.php:            // L'expert actuel (peut-être null)
src/GramcServices/ServiceExperts/ServiceExperts.php:            $expert = $expertise->getExpert();
src/GramcServices/ServiceExperts/ServiceExperts.php:                unset($exclus_exp[$expert->getId()]);
src/GramcServices/ServiceExperts/ServiceExperts.php:            $nom = 'expert'.$demande->getProjet()->getIdProjet().'-'.$expertise->getId();
src/GramcServices/ServiceExperts/ServiceExperts.php:            // if ($demande->getIdVersion()=="20A200044")	$this->sj->debugMessage("koukou $nom ".$expert->getId());
src/GramcServices/ServiceExperts/ServiceExperts.php:            // $this->sj->debugMessage(__METHOD__ . "Experts exclus pour $demande ".Functions::show( $exclus));
src/GramcServices/ServiceExperts/ServiceExperts.php:            // Projets de type Projet::PROJET_FIL -> La première expertise est obligatoirement faite par un président !
src/GramcServices/ServiceExperts/ServiceExperts.php:            if ($first && Projet::PROJET_FIL == $demande->getProjet()->getTypeProjet()) {
src/GramcServices/ServiceExperts/ServiceExperts.php:            $forms[] = $this->formFactory->createNamedBuilder($nom, FormType::class, null, ['csrf_protection' => false])
src/GramcServices/ServiceExperts/ServiceExperts.php:                            ->add(
src/GramcServices/ServiceExperts/ServiceExperts.php:                                // 'choice_value' => function (Individu $entity = null) { return $entity->getIdIndividu(); },
src/GramcServices/ServiceExperts/ServiceExperts.php:                                    return $individu->__toString();
src/GramcServices/ServiceExperts/ServiceExperts.php:                            ->getForm();
src/GramcServices/ServiceExperts/ServiceExperts.php:            // if ($expert != null) $exclus[$expert->getId()] = $expert;
src/GramcServices/ServiceExperts/ServiceExperts.php:        $this->notifications = [];
src/GramcServices/ServiceExperts/ServiceExperts.php:        // $notifications = $this    -> notifications;
src/GramcServices/ServiceExperts/ServiceExperts.php:        $expertises = $demande->getExpertise();
src/GramcServices/ServiceExperts/ServiceExperts.php:            $exp_mail = $e->getExpert()->getMail();
src/GramcServices/ServiceExperts/ServiceExperts.php:            if (!array_key_exists($exp_mail, $this->notifications)) {
src/GramcServices/ServiceExperts/ServiceExperts.php:                $this->notifications[$exp_mail] = [];
src/GramcServices/ServiceExperts/ServiceExperts.php:            $this->notifications[$exp_mail][] = $demande;
src/GramcServices/ServiceExperts/ServiceExperts.php:        $notifications = $this->notifications;
src/GramcServices/ServiceExperts/ServiceExperts.php:        $this->sj->debugMessage(__METHOD__.count($notifications).' notifications à envoyer');
src/GramcServices/ServiceExperts/ServiceExperts.php:            // $this->sj->debugMessage( __METHOD__ . "Envoi d'un message à " . join(',',$dest) . " - " . Functions::show($liste_d) );
src/GramcServices/ServiceExperts/ServiceExperts.php:            $this->sn->sendMessage(
src/GramcServices/ServiceExperts/ServiceExperts.php:                'notification/affectation_expert_version-sujet.html.twig',
src/GramcServices/ServiceExperts/ServiceExperts.php:                'notification/affectation_expert_version-contenu.html.twig',
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $exclus = $this->em->getRepository(CollaborateurVersion::class)->getCollaborateurs($rallonge->getVersion()->getProjet());
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $expert = $rallonge->getExpert();
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:            $expert = $rallonge->getVersion()->getExpert();
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $nom = 'expert'.$rallonge->getId();
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $choice = new ExpertChoiceLoader($this->em, $exclus);
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $forms[] = $this->formFactory->createNamedBuilder($nom, FormType::class, null, ['csrf_protection' => false])
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:                        ->add(
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:                            // 'choice_value' => function (Individu $entity = null) { return $entity->getIdIndividu(); },
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:                                return $individu->__toString();
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:                        ->getForm();
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $em = $this->em;
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $rallonge->setExpert($experts[0]);
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $em->persist($rallonge);
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $em->flush();
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        // $notifications = $this    -> notifications;
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $expert = $demande->getExpert();
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $exp_mail = $expert->getMail();
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        if (!array_key_exists($exp_mail, $this->notifications)) {
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:            $this->notifications[$exp_mail] = [];
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $this->notifications[$exp_mail][] = $demande;
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $sn = $this->sn;
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $notifications = $this->notifications;
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $sj = $this->sj;
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:        $sj->debugMessage(__METHOD__.count($notifications).' notifications à envoyer');
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:            // $sj->debugMessage( __METHOD__ . "Envoi d'un message à " . join(',',$dest) . " - " . $this->sj->show($liste_d) );
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:            $sn->sendMessage(
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:                'notification/affectation_expert_rallonge-sujet.html.twig',
src/GramcServices/ServiceExperts/ServiceExpertsRallonge.php:                'notification/affectation_expert_rallonge-contenu.html.twig',
src/GramcServices/ServiceForms.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceForms.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceForms.php:        $violations = $this->vl->validate($data, $constraintes);
src/GramcServices/ServiceForms.php:                $errors .= $violation->getMessage().' ';
src/GramcServices/ServiceIndividus.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceIndividus.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceIndividus.php:     * NOTE - C'est le code appelant qui devra faire le flush()
src/GramcServices/ServiceIndividus.php:        $em = $this->em;
src/GramcServices/ServiceIndividus.php:        $sj = $this->sj;
src/GramcServices/ServiceIndividus.php:        $ts = $this->ts;
src/GramcServices/ServiceIndividus.php:        $connected = $ts->getToken()->getUser();
src/GramcServices/ServiceIndividus.php:        if ($individu->getId() === $connected->getId()) {
src/GramcServices/ServiceIndividus.php:            $sj->throwException(__METHOD__.':'.__LINE__." Pas possible de fusionner $individu, car vous êtes cet individu !");
src/GramcServices/ServiceIndividus.php:        $CollaborateurVersion = $em->getRepository(CollaborateurVersion::class)->findBy(['collaborateur' => $individu]);
src/GramcServices/ServiceIndividus.php:        $Expertise = $em->getRepository(Expertise::class)->findBy(['expert' => $individu]);
src/GramcServices/ServiceIndividus.php:        $Journal = $em->getRepository(Journal::class)->findBy(['individu' => $individu]);
src/GramcServices/ServiceIndividus.php:        $Rallonge = $em->getRepository(Rallonge::class)->findBy(['expert' => $individu]);
src/GramcServices/ServiceIndividus.php:        $Sso = $em->getRepository(Sso::class)->findBy(['individu' => $individu]);
src/GramcServices/ServiceIndividus.php:        $Thematique = $individu->getThematique();
src/GramcServices/ServiceIndividus.php:        foreach ($individu->getThematique() as $item) {
src/GramcServices/ServiceIndividus.php:            // $em->persist($item);
src/GramcServices/ServiceIndividus.php:            $item->getExpert()->removeElement($individu);
src/GramcServices/ServiceIndividus.php:        // Les projets dont je suis collaborateur - Attention aux éventuels doublons
src/GramcServices/ServiceIndividus.php:            if (!$item->getVersion()->isCollaborateur($new_individu)) {
src/GramcServices/ServiceIndividus.php:                $item->setCollaborateur($new_individu);
src/GramcServices/ServiceIndividus.php:                $em->persist($item);
src/GramcServices/ServiceIndividus.php:                $em->remove($item);
src/GramcServices/ServiceIndividus.php:            $version = $item->getVersion();
src/GramcServices/ServiceIndividus.php:            $majInd = $version->getMajInd();
src/GramcServices/ServiceIndividus.php:                $version->setMajInd($new_individu);
src/GramcServices/ServiceIndividus.php:                $em->persist($version);
src/GramcServices/ServiceIndividus.php:        $sso_de_new = $new_individu->getSso();
src/GramcServices/ServiceIndividus.php:        foreach ($new_individu->getSso() as $item) {
src/GramcServices/ServiceIndividus.php:            $array_eppn[] = $item->getEppn();
src/GramcServices/ServiceIndividus.php:            if (!in_array($item->getEppn(), $array_eppn)) {
src/GramcServices/ServiceIndividus.php:                $item->setIndividu($new_individu);
src/GramcServices/ServiceIndividus.php:                $em->persist($item);
src/GramcServices/ServiceIndividus.php:                $em->remove($item);
src/GramcServices/ServiceIndividus.php:            $item->setExpert($new_individu);
src/GramcServices/ServiceIndividus.php:            $item->setExpert($new_individu);
src/GramcServices/ServiceIndividus.php:            $item->setIndividu($new_individu);
src/GramcServices/ServiceIndividus.php:        $this->copierProfil($individu, $new_individu);
src/GramcServices/ServiceIndividus.php:        $em = $this->em;
src/GramcServices/ServiceIndividus.php:        if ($this->validerProfil($new_individu)) {
src/GramcServices/ServiceIndividus.php:        if (null === $new_individu->getPrenom()) {
src/GramcServices/ServiceIndividus.php:            $new_individu->setPrenom($individu->getPrenom());
src/GramcServices/ServiceIndividus.php:        if (null === $new_individu->getNom()) {
src/GramcServices/ServiceIndividus.php:            $new_individu->setNom($individu->getNom());
src/GramcServices/ServiceIndividus.php:        if (null === $new_individu->getLabo()) {
src/GramcServices/ServiceIndividus.php:            $new_individu->setLabo($individu->getLabo());
src/GramcServices/ServiceIndividus.php:        if (null === $new_individu->getEtab()) {
src/GramcServices/ServiceIndividus.php:            $new_individu->setEtab($individu->getEtab());
src/GramcServices/ServiceIndividus.php:        if (null === $new_individu->getStatut()) {
src/GramcServices/ServiceIndividus.php:            $new_individu->setStatut($individu->getStatut());
src/GramcServices/ServiceIndividus.php:        $em->persist($new_individu);
src/GramcServices/ServiceIndividus.php:        if (null === $individu->getPrenom()) {
src/GramcServices/ServiceIndividus.php:        if (null === $individu->getNom()) {
src/GramcServices/ServiceIndividus.php:        if (null === $individu->getMail()) {
src/GramcServices/ServiceIndividus.php:        if (null === $individu->getStatut()) {
src/GramcServices/ServiceIndividus.php:        if (null === $individu->getLabo()) {
src/GramcServices/ServiceIndividus.php:        if (null === $individu->getEtab()) {
src/GramcServices/ServiceInfos.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceInfos.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceInfos.php:        $d = $this->grdte;
src/GramcServices/ServiceInfos.php:            return $d->format($format);
src/GramcServices/ServiceInfos.php:    // TODO - strftime est obsolète à partir de php 8.1 !
src/GramcServices/ServiceInfos.php:        setlocale(LC_TIME, 'fr_FR.UTF-8');
src/GramcServices/ServiceInfos.php:        return strftime($format, $date->getTimestamp());
src/GramcServices/ServiceInvitations.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceInvitations.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceInvitations.php:     * Ces deux fonctions sont pompées sur https://stackoverflow.com/questions/1846202/how-to-generate-a-random-unique-alphanumeric-string/13733588#13733588
src/GramcServices/ServiceInvitations.php:        $range = $max - $min;
src/GramcServices/ServiceInvitations.php:        $filter = (int) (1 << $bits) - 1; // set all lower bits to 1
src/GramcServices/ServiceInvitations.php:            $token .= $codeAlphabet[$this->crypto_rand_secure(0, $max - 1)];
src/GramcServices/ServiceInvitations.php:        $em = $this->em;
src/GramcServices/ServiceInvitations.php:        $key = $this->getToken(50);
src/GramcServices/ServiceInvitations.php:        $invitation->setInviting($inviting)
src/GramcServices/ServiceInvitations.php:                   ->setInvited($invited)
src/GramcServices/ServiceInvitations.php:                   ->setCreationStamp($stamp)
src/GramcServices/ServiceInvitations.php:                   ->setClef($key);
src/GramcServices/ServiceInvitations.php:        $em->persist($invitation);
src/GramcServices/ServiceInvitations.php:        $em->flush();
src/GramcServices/ServiceInvitations.php:        $invit_duree = $this->invit_duree;
src/GramcServices/ServiceInvitations.php:        $sn = $this->sn;
src/GramcServices/ServiceInvitations.php:        $invitation = $this->newInvitation($inviting, $invited);
src/GramcServices/ServiceInvitations.php:        $date_limite = $invitation->getCreationStamp()->add(new \DateInterval($invit_duree));
src/GramcServices/ServiceInvitations.php:        $sn->sendMessage('notification/invitation-sujet.html.twig',
src/GramcServices/ServiceInvitations.php:            'notification/invitation-contenu.html.twig',
src/GramcServices/ServiceInvitations.php:            [$invited->getMail()]);
src/GramcServices/ServiceJournal.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceJournal.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceJournal.php:        $rs = $this->rs;
src/GramcServices/ServiceJournal.php:        $log = $this->log;
src/GramcServices/ServiceJournal.php:        $token = $this->tok->getToken();
src/GramcServices/ServiceJournal.php:        $em = $this->em;
src/GramcServices/ServiceJournal.php:        $journal->setStamp(new \DateTime());
src/GramcServices/ServiceJournal.php:        if (null !== $token && null !== $token->getUser() && $token->getUser() instanceof Individu) {
src/GramcServices/ServiceJournal.php:            $journal->setIndividu($token->getUser());
src/GramcServices/ServiceJournal.php:            $journal->setIndividu(null);
src/GramcServices/ServiceJournal.php:        if (null !== $rs->getCurrentRequest()) {
src/GramcServices/ServiceJournal.php:            $journal->setGramcSessId($rs->getCurrentRequest()->getSession()->getId());
src/GramcServices/ServiceJournal.php:        if (null !== $rs->getMainRequest()
src/GramcServices/ServiceJournal.php:        && null !== $rs->getMainRequest()->getClientIp()) {
src/GramcServices/ServiceJournal.php:            $ip = $rs->getMainRequest()->getClientIp();
src/GramcServices/ServiceJournal.php:        $journal->setIp($ip);
src/GramcServices/ServiceJournal.php:        $journal->setMessage(substr($message, 0, 300));
src/GramcServices/ServiceJournal.php:        $journal->setNiveau($niveau);
src/GramcServices/ServiceJournal.php:        $journal->setType(Journal::LIBELLE[$niveau]);
src/GramcServices/ServiceJournal.php:        if ($em->isOpen()) {
src/GramcServices/ServiceJournal.php:            $em->persist($journal);
src/GramcServices/ServiceJournal.php:            $em->flush();
src/GramcServices/ServiceJournal.php:            $log->error('Entity manager closed, message = '.$message);
src/GramcServices/ServiceJournal.php:        $this->log->emergency($message);
src/GramcServices/ServiceJournal.php:        return $this->journalMessage($message, Journal::EMERGENCY);
src/GramcServices/ServiceJournal.php:        $this->log->alert($message);
src/GramcServices/ServiceJournal.php:        $this->journalMessage($message, Journal::ALERT);
src/GramcServices/ServiceJournal.php:        $this->log->critical($message);
src/GramcServices/ServiceJournal.php:        return $this->journalMessage($message, Journal::CRITICAL);
src/GramcServices/ServiceJournal.php:        $this->log->error($message);
src/GramcServices/ServiceJournal.php:        return $this->journalMessage($message, Journal::ERROR);
src/GramcServices/ServiceJournal.php:        $this->log->warning($message);
src/GramcServices/ServiceJournal.php:        return $this->journalMessage($message, Journal::WARNING);
src/GramcServices/ServiceJournal.php:        $this->log->notice($message);
src/GramcServices/ServiceJournal.php:        return $this->journalMessage($message, Journal::NOTICE);
src/GramcServices/ServiceJournal.php:        $this->log->info($message);
src/GramcServices/ServiceJournal.php:        return $this->journalMessage($message, Journal::INFO);
src/GramcServices/ServiceJournal.php:        $this->log->debug($message);
src/GramcServices/ServiceJournal.php:        return $this->journalMessage($message, Journal::DEBUG);
src/GramcServices/ServiceJournal.php:            $this->warningMessage('EXCEPTION '.$text);
src/GramcServices/ServiceJournal.php:        if ($this->ac->isGranted('IS_AUTHENTICATED_FULLY')) {
src/GramcServices/ServiceMenus.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceMenus.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceMenus.php: *      name             -> Nom du controleur symfony
src/GramcServices/ServiceMenus.php: *      lien             -> Texte du lien html
src/GramcServices/ServiceMenus.php: *      commentaire      -> Ce que fait le controleur en une phrase
src/GramcServices/ServiceMenus.php: *      ok               -> Si true le lien est actif sinon le lien est inactif
src/GramcServices/ServiceMenus.php: *      reason           -> Si le lien est inactif, explication du pourquoi. Pas utilisé si le lien est inactif
src/GramcServices/ServiceMenus.php: *      todo (optionnel) -> Si le lien est actif, permet de visualiser le menu sous forme de todo liste - cf. consulter.html.twig, vers la ligne 20
src/GramcServices/ServiceMenus.php:// ATTENTION - Certaines méthodes de cette classe sont INUTILISEES ACTUELLEMENT
src/GramcServices/ServiceMenus.php:        $this->token = $this->tok->getToken();
src/GramcServices/ServiceMenus.php:     *     - Si ok on fixe la priorité suivant le paramètre $priorite
src/GramcServices/ServiceMenus.php:     *     - Si pas ok ou pas spécifié on la met à BASSE
src/GramcServices/ServiceMenus.php:        $sj = $this->sj;
src/GramcServices/ServiceMenus.php:                return $this->nouveauProjetDyn($priorite);
src/GramcServices/ServiceMenus.php:                $sj->throwException("Type de projet ($type) inconnu !");
src/GramcServices/ServiceMenus.php:     *     - Peut être créé n'importe quand
src/GramcServices/ServiceMenus.php:     *     - Renouvelable
src/GramcServices/ServiceMenus.php:     *     - En standby au bout de 12 mois (voir le metaetat du projet)
src/GramcServices/ServiceMenus.php:     *     - Terminé 12 mois après le passage en standby si pas renouvelé entre temps
src/GramcServices/ServiceMenus.php:     *     - Créé seulement par un permanent, qui devient responsable du projet
src/GramcServices/ServiceMenus.php:        if (!$this->peutCreerProjets()) {
src/GramcServices/ServiceMenus.php:        // $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:            $user = $this->token->getUser();
src/GramcServices/ServiceMenus.php:        if (null != $user && $user->peutCreerProjets()) {
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        $menu['param'] = $version->getIdVersion();
src/GramcServices/ServiceMenus.php:        $user = $this->token->getUser();
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:            $etatVersion = $version->getEtatVersion();
src/GramcServices/ServiceMenus.php:            if (Etat::EDITION_DEMANDE != $version->getEtatVersion()) {
src/GramcServices/ServiceMenus.php:            } elseif (!$version->isResponsable($user)) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        $sv = $this->sv;
src/GramcServices/ServiceMenus.php:        $menu['param'] = $version->getIdVersion();
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:            if ($sv->validateVersion($version)) {
src/GramcServices/ServiceMenus.php:            $etatVersion = $version->getEtatVersion();
src/GramcServices/ServiceMenus.php:            } elseif (false === $version->isCollaborateur($this->token->getUser())) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        $user = $this->token->getUser();
src/GramcServices/ServiceMenus.php:        $menu['param'] = $version->getIdVersion();
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        } elseif (!$version->isResponsable($user)) {
src/GramcServices/ServiceMenus.php:        } elseif (Etat::TERMINE === $version->getEtat() || Etat::ANNULE === $version->getEtat()) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:            $etat = $version->getEtatVersion();
src/GramcServices/ServiceMenus.php:            $menu['param'] = $version->getIdVersion();
src/GramcServices/ServiceMenus.php:            $menu['lien'] = "Rapport d'activité de l'année ".$version->getAnneeSession();
src/GramcServices/ServiceMenus.php:            if ($this->ac->isGranted('ROLE_ADMIN') && (Etat::ACTIF === $etat || Etat::TERMINE === $etat)) {
src/GramcServices/ServiceMenus.php:                if (null != $version->getProjet()) {
src/GramcServices/ServiceMenus.php:                    $rapportActivite = $this->em->getRepository(RapportActivite::class)->findOneBy(
src/GramcServices/ServiceMenus.php:                        'projet' => $version->getProjet(),
src/GramcServices/ServiceMenus.php:                        'annee' => $version->getAnneeSession(),
src/GramcServices/ServiceMenus.php:                    $this->sj->errorMessage(__METHOD__.':'.__LINE__.' version '.$version." n'est pas associée à aucun projet !");
src/GramcServices/ServiceMenus.php:                if (!$version->isCollaborateur($this->token->getUser())) {
src/GramcServices/ServiceMenus.php:                    $menu['commentaire'] = "Téléverser votre rapport d'activité pour l'année ".$version->getAnneeSession().'si vous avez déjà terminé vos calculs';
src/GramcServices/ServiceMenus.php:                    $menu['todo'] = "Téléverser votre rapport d'activité pour ".$version->getAnneeSession();
src/GramcServices/ServiceMenus.php:            $this->sj->errorMessage(__METHOD__.':'.__LINE__.' Version null !');
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:            if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:                $etat = $version->getEtatVersion();
src/GramcServices/ServiceMenus.php:                if (!$version->isCollaborateur($this->token->getUser())) {
src/GramcServices/ServiceMenus.php:            $this->sj->errorMessage(__METHOD__.':'.__LINE__.' Version null !');
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        $menu['param'] = $projet->getIdProjet();
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:            $version = $projet->derniereVersion();
src/GramcServices/ServiceMenus.php:            $etat = $version->getEtatVersion();
src/GramcServices/ServiceMenus.php:            if (!$projet->isCollaborateur($this->token->getUser())) {
src/GramcServices/ServiceMenus.php:            } elseif ($this->sv->isNouvelle($version) && !(Etat::ACTIF === $etat || Etat::TERMINE === $etat)) {
src/GramcServices/ServiceMenus.php:                $menu['commentaire'] = 'Gérer les publicatins associées au projet '.$projet->getIdProjet();
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        return $this->__renouvelerVersionDyn($version, $priorite);
src/GramcServices/ServiceMenus.php:        $menu['param'] = $version->getIdVersion();
src/GramcServices/ServiceMenus.php:        $projet = $version->getProjet();
src/GramcServices/ServiceMenus.php:        $verder = $projet->getVersionDerniere();
src/GramcServices/ServiceMenus.php:        // c-à-d tant qu'on n'est pas en état ACTIF_R (<30 j avant la date de fin)
src/GramcServices/ServiceMenus.php:        // if ($verder->getEtatVersion() != Etat::ACTIF && $verder->getEtatVersion() != Etat::ACTIF_R && $verder->getEtatVersion() != Etat::TERMINE )
src/GramcServices/ServiceMenus.php:        if (Etat::ACTIF_R != $verder->getEtatVersion() && Etat::TERMINE != $verder->getEtatVersion()) {
src/GramcServices/ServiceMenus.php:        } elseif (Etat::TERMINE === $verder->getProjet()->getEtatProjet()) {
src/GramcServices/ServiceMenus.php:        } elseif ($verder->isCollaborateur($this->token->getUser())) {
src/GramcServices/ServiceMenus.php:        } elseif ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        $type = $version->getTypeVersion();
src/GramcServices/ServiceMenus.php:                return $this->__envoyerVersion4($version, $priorite);
src/GramcServices/ServiceMenus.php:                $sj->errorMessage(__METHOD__." Type de version inconnu: $type");
src/GramcServices/ServiceMenus.php:        $projet = $version->getProjet();
src/GramcServices/ServiceMenus.php:        $user = $this->token->getUser();
src/GramcServices/ServiceMenus.php:        $menu['param'] = $version->getIdVersion();
src/GramcServices/ServiceMenus.php:        $etatVersion = $version->getEtatVersion();
src/GramcServices/ServiceMenus.php:        if (false === $version->isResponsable($user)) {
src/GramcServices/ServiceMenus.php:            $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:            $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:    // $session = $this->ss->getSessionCourante();
src/GramcServices/ServiceMenus.php:    // $etatSession     = $session->getEtatSession();
src/GramcServices/ServiceMenus.php:    // $idSession       = $session->getIdSession();
src/GramcServices/ServiceMenus.php:    // $this->sj->errorMessage(__METHOD__ . ':' . __LINE__ . " La session courante est nulle !");
src/GramcServices/ServiceMenus.php:    // $menu['lien']        = "Mail - Proposition de rallonge";
src/GramcServices/ServiceMenus.php:    // if ($this->ac->isGranted('ROLE_ADMIN') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:    // $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:    // $session = $this->ss->getSessionCourante();
src/GramcServices/ServiceMenus.php:    // $etatSession     = $session->getEtatSession();
src/GramcServices/ServiceMenus.php:    // $idSession       = $session->getIdSession();
src/GramcServices/ServiceMenus.php:    // $this->sj->errorMessage(__METHOD__ . ':' . __LINE__ . " La session courante est nulle !");
src/GramcServices/ServiceMenus.php:    // $menu['lien']        = "Mail - projets sans fiche";
src/GramcServices/ServiceMenus.php:    // } elseif ($this->ac->isGranted('ROLE_ADMIN') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:    // $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        $sp = $this->sp;
src/GramcServices/ServiceMenus.php:        $version = $this->sp->versionActive($projet);
src/GramcServices/ServiceMenus.php:        $max_rall = $this->max_rall;
src/GramcServices/ServiceMenus.php:        $rallonges = $this->em->getRepository(Rallonge::class)->findRallongesOuvertes($version);
src/GramcServices/ServiceMenus.php:            $menu['param'] = $projet->getIdProjet();
src/GramcServices/ServiceMenus.php:            $menu['param'] = $rallonges[0]->getIdRallonge();
src/GramcServices/ServiceMenus.php:        } elseif (count($version->getRallonge()) >= $max_rall) {
src/GramcServices/ServiceMenus.php:            $menu['param'] = $projet->getIdProjet();
src/GramcServices/ServiceMenus.php:            $menu['param'] = $projet->getIdProjet();
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        $menu['param'] = $rallonge->getIdRallonge();
src/GramcServices/ServiceMenus.php:        $version = $rallonge->getVersion();
src/GramcServices/ServiceMenus.php:            $projet = $version->getProjet();
src/GramcServices/ServiceMenus.php:        // elseif( $version->getEtatVersion()  === Etat::NOUVELLE_VERSION_DEMANDEE )
src/GramcServices/ServiceMenus.php:        elseif (null === $version->getProjet()) {
src/GramcServices/ServiceMenus.php:        } elseif (Etat::TERMINE === $version->getProjet()->getEtatProjet()) {
src/GramcServices/ServiceMenus.php:        } elseif (Etat::ANNULE === $version->getEtatVersion()) {
src/GramcServices/ServiceMenus.php:        } elseif (Etat::TERMINE === $version->getEtatVersion()) {
src/GramcServices/ServiceMenus.php:        } elseif (Etat::ANNULE === $rallonge->getEtatRallonge()) {
src/GramcServices/ServiceMenus.php:        } elseif (Etat::EDITION_DEMANDE !== $rallonge->getEtatRallonge()) {
src/GramcServices/ServiceMenus.php:        } elseif ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        } elseif ($version->isCollaborateur($this->token->getUser())) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        $menu['param'] = $rallonge->getIdRallonge();
src/GramcServices/ServiceMenus.php:        $user = $this->token->getUser();
src/GramcServices/ServiceMenus.php:        $version = $rallonge->getVersion();
src/GramcServices/ServiceMenus.php:            $projet = $version->getProjet();
src/GramcServices/ServiceMenus.php:        } elseif (null === $version->getProjet()) {
src/GramcServices/ServiceMenus.php:        } elseif (Etat::TERMINE === $version->getProjet()->getEtatProjet()) {
src/GramcServices/ServiceMenus.php:        } elseif (Etat::ANNULE === $version->getEtatVersion()) {
src/GramcServices/ServiceMenus.php:        } elseif (Etat::TERMINE === $version->getEtatVersion()) {
src/GramcServices/ServiceMenus.php:        } elseif (Etat::ANNULE === $rallonge->getEtatRallonge()) {
src/GramcServices/ServiceMenus.php:        } elseif (Etat::EDITION_DEMANDE !== $rallonge->getEtatRallonge()) {
src/GramcServices/ServiceMenus.php:        } elseif ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        } elseif ($version->isResponsable($user)) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        $menu['param'] = $version->getIdVersion();
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        } elseif (!$version->isCollaborateur($this->token->getUser())) {
src/GramcServices/ServiceMenus.php:        } elseif (true === $this->sv->isSigne($version)) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        // $menu['param'] = $version->getIdVersion();
src/GramcServices/ServiceMenus.php:        $menu['params'] = ['id' => $version->getIdVersion(), 'filename' => 'fiche.pdf'];
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        } elseif (!$version->isCollaborateur($this->token->getUser())) {
src/GramcServices/ServiceMenus.php:        } elseif (true === $this->sv->isSigne($version)) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_OBS') || $this->ac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceMenus.php:        $menu['param'] = $version->getIdVersion();
src/GramcServices/ServiceMenus.php:        $user = $this->token->getUser();
src/GramcServices/ServiceMenus.php:        if ($this->ac->isGranted('ROLE_ADMIN')) {
src/GramcServices/ServiceMenus.php:        } elseif (!$version->isResponsable($user)) {
src/GramcServices/ServiceMenus.php:        } elseif (Etat::TERMINE === $version->getEtat() || Etat::ANNULE === $version->getEtat()) {
src/GramcServices/ServiceMenus.php:        $this->__prio($menu, $priorite);
src/GramcServices/ServiceNotifications.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceNotifications.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceNotifications.php:        $this->token = $tok->getToken();
src/GramcServices/ServiceNotifications.php:        $this->sendRawMessage($sujet, $contenu, [$addr]);
src/GramcServices/ServiceNotifications.php:     *                                            - soit des fichiers .html.twig
src/GramcServices/ServiceNotifications.php:     *                                            - soit la sortie de $twig->createTemplate()
src/GramcServices/ServiceNotifications.php:        $twig = $this->twig;
src/GramcServices/ServiceNotifications.php:        $body = $twig->render($twig_contenu, $params);
src/GramcServices/ServiceNotifications.php:        $subject = $twig->render($twig_sujet, $params);
src/GramcServices/ServiceNotifications.php:        $this->sendRawMessage($subject, $body, $users);
src/GramcServices/ServiceNotifications.php:        $twig = $this->twig;
src/GramcServices/ServiceNotifications.php:        $sujet_tmpl = $twig->createTemplate($twig_sujet);
src/GramcServices/ServiceNotifications.php:        $contenu_tmpl = $twig->createTemplate($twig_contenu);
src/GramcServices/ServiceNotifications.php:        $body = $twig->render($contenu_tmpl, $params);
src/GramcServices/ServiceNotifications.php:        $subject = $twig->render($sujet_tmpl, $params);
src/GramcServices/ServiceNotifications.php:        $this->sendRawMessage($subject, $body, $users);
src/GramcServices/ServiceNotifications.php:        $message->subject($subject);
src/GramcServices/ServiceNotifications.php:        $message->text($body);
src/GramcServices/ServiceNotifications.php:        $message->from($this->mailfrom);
src/GramcServices/ServiceNotifications.php:                    $this->sj->warningMessage(__METHOD__.':'.__LINE__.' users contient un utilisateur null');
src/GramcServices/ServiceNotifications.php:                    $this->sj->errorMessage(__METHOD__.':'.__LINE__.' users contient un mauvais type de données: '.Functions::show($user));
src/GramcServices/ServiceNotifications.php:            $mails = array_unique(array_merge($mails, $this->usersToMail($real_users, $warning)));
src/GramcServices/ServiceNotifications.php:                // $message->addTo( $mail);
src/GramcServices/ServiceNotifications.php:                $message->addTo($mail);
src/GramcServices/ServiceNotifications.php:            if (null != $message->getTo()) {
src/GramcServices/ServiceNotifications.php:                $arrayTo = array_values($message->getTo());
src/GramcServices/ServiceNotifications.php:                    $to = $to.' '.$item->toString();
src/GramcServices/ServiceNotifications.php:            // return [ 'subject'  =>  $message->getSubject(), 'contenu' => $message->getBody(), 'to'  => $to  ]; // debug only
src/GramcServices/ServiceNotifications.php:            $this->sj->infoMessage('email "'.$message->getSubject().'" envoyé à '.$to);
src/GramcServices/ServiceNotifications.php:                $this->mailer->send($message);
src/GramcServices/ServiceNotifications.php:            $this->sj->warningMessage(__METHOD__.':'.__LINE__.'email "'.$message->getSubject().'" envoyé à une liste vide de destinataires');
src/GramcServices/ServiceNotifications.php:    // Params: $mail_roles = liste de roles (A,d,P etc. cf ci-dessous)
src/GramcServices/ServiceNotifications.php:        $em = $this->em;
src/GramcServices/ServiceNotifications.php:                    $user = $this->token->getUser();
src/GramcServices/ServiceNotifications.php:                        $this->sj->errorMessage(__METHOD__.':'.__LINE__." Utilisateur n'est pas connecté !");
src/GramcServices/ServiceNotifications.php:                    $new_users = $em->getRepository(Individu::class)->findBy(['admin' => true]);
src/GramcServices/ServiceNotifications.php:                        $this->sj->warningMessage(__METHOD__.':'.__LINE__.' Aucun admin !');
src/GramcServices/ServiceNotifications.php:                            $new_users = $new_users->toArray();
src/GramcServices/ServiceNotifications.php:                    $new_users = $em->getRepository(Individu::class)->findBy(['sysadmin' => true]);
src/GramcServices/ServiceNotifications.php:                        $this->sj->warningMessage(__METHOD__.':'.__LINE__.' Aucun sysadmin !');
src/GramcServices/ServiceNotifications.php:                            $new_users = $new_users->toArray();
src/GramcServices/ServiceNotifications.php:                    $new_users = $em->getRepository(Individu::class)->findBy(['president' => true]);
src/GramcServices/ServiceNotifications.php:                        $this->sj->warningMessage(__METHOD__.':'.__LINE__.' Aucun président !');
src/GramcServices/ServiceNotifications.php:                            $new_users = $new_users->toArray();
src/GramcServices/ServiceNotifications.php:                        $this->sj->warningMessage(__METHOD__.':'.__LINE__.' Objet null pour expert');
src/GramcServices/ServiceNotifications.php:                    $new_users = $objet->getExperts();
src/GramcServices/ServiceNotifications.php:                    // $this->sj->debugMessage(__METHOD__ .":" . __LINE__ .  " experts : " . Functions::show($new_users) );
src/GramcServices/ServiceNotifications.php:                        $this->sj->warningMessage(__METHOD__.':'.__LINE__." Aucun expert pour l'objet ".$objet.' !');
src/GramcServices/ServiceNotifications.php:                            $new_users = $new_users->toArray();
src/GramcServices/ServiceNotifications.php:                        // $this->sj->debugMessage(__METHOD__ .":" . __LINE__ .  " experts après toArray : " . Functions::show($new_users) );
src/GramcServices/ServiceNotifications.php:                    $new_users = $em->getRepository(Individu::class)->getValideurs();
src/GramcServices/ServiceNotifications.php:                    // $this->sj->debugMessage(__METHOD__ .":" . __LINE__ .  " experts : " . Functions::show($new_users) );
src/GramcServices/ServiceNotifications.php:                        $this->sj->warningMessage(__METHOD__.':'.__LINE__.' Aucun valideur trouvé !');
src/GramcServices/ServiceNotifications.php:                            $new_users = $new_users->toArray();
src/GramcServices/ServiceNotifications.php:                        // $this->sj->debugMessage(__METHOD__ .":" . __LINE__ .  " experts après toArray : " . Functions::show($new_users) );
src/GramcServices/ServiceNotifications.php:                        $this->sj->warningMessage(__METHOD__.':'.__LINE__.' Objet null pour responsable');
src/GramcServices/ServiceNotifications.php:                    $new_users = $objet->getResponsables();
src/GramcServices/ServiceNotifications.php:                        $this->sj->warningMessage(__METHOD__.':'.__LINE__." Aucun responsable pour l'objet ".$objet.' !');
src/GramcServices/ServiceNotifications.php:                            $new_users = $new_users->toArray();
src/GramcServices/ServiceNotifications.php:                $this->sj->warningMessage(__METHOD__.':'.__LINE__.' La liste des utilisateurs est vide');
src/GramcServices/ServiceNotifications.php:                $user_mail = $user->getMail();
src/GramcServices/ServiceNotifications.php:                    $this->sj->warningMessage(__METHOD__.':'.__LINE__.' Utilisateur '.$user." n'a pas de mail");
src/GramcServices/ServiceNotifications.php:                $this->sj->errorMessage(__METHOD__.':'.__LINE__.' Utilisateur null dans la liste');
src/GramcServices/ServiceNotifications.php:                $this->sj->errorMessage(__METHOD__.':'.__LINE__.' Un objet autre que Individu dans la liste des utilisateurs');
src/GramcServices/ServiceParam.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceParam.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceParam.php:        $param = $this->em->getRepository(Param::class)->findOneBy(['cle' => $parameter]);
src/GramcServices/ServiceParam.php:            return $param->getVal();
src/GramcServices/ServiceParam.php:        $param = $this->getParameter($parameter);
src/GramcServices/ServicePhpSessions.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServicePhpSessions.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServicePhpSessions.php:     * NOTE - Il s'agit d'une fonction statique car elle est appelée par
src/GramcServices/ServicePhpSessions.php:     * TODO - On fait du bas niveau ici peut-être y a-t-il
src/GramcServices/ServicePhpSessions.php:        $em = $this->em;
src/GramcServices/ServicePhpSessions.php:        $sj = $this->sj;
src/GramcServices/ServicePhpSessions.php:        $sj->debugMessage(__METHOD__.':'.__LINE__.'session directory = '.$dir);
src/GramcServices/ServicePhpSessions.php:                $diff = intval(($time - $mtime) / 60);
src/GramcServices/ServicePhpSessions.php:                    $sj->errorMessage(__METHOD__.':'.__LINE__.' Une session autre que gramc3 !');
src/GramcServices/ServicePhpSessions.php:                        $individu = $secu_data->getUser();
src/GramcServices/ServicePhpSessions.php:                    // Api REST - firewall calc - cf. security.yaml
src/GramcServices/ServicePhpSessions.php:                        $rest_individu = $secu_data->getUser();
src/GramcServices/ServicePhpSessions.php:                        $sj->errorMessage(__METHOD__.':'.__LINE__." Problème d'individu ");
src/GramcServices/ServiceProjets.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceProjets.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceProjets.php:        $this->token = $tok->getToken();
src/GramcServices/ServiceProjets.php:     * Création d'un nouveau projet, c'est-à-dire:
src/GramcServices/ServiceProjets.php:     *    - Création du projet
src/GramcServices/ServiceProjets.php:     *    - Création d'une première version
src/GramcServices/ServiceProjets.php:        $sv = $this->sv;
src/GramcServices/ServiceProjets.php:        $grdt = $this->grdt;
src/GramcServices/ServiceProjets.php:        $em = $this->em;
src/GramcServices/ServiceProjets.php:        $annee = $grdt->format('y');
src/GramcServices/ServiceProjets.php:        $projet->setIdProjet($this->nextProjetId($annee, $type));
src/GramcServices/ServiceProjets.php:        $projet->setEtatProjet(Etat::RENOUVELABLE);
src/GramcServices/ServiceProjets.php:        $projet->setTetatProjet(Etat::STANDBY);
src/GramcServices/ServiceProjets.php:        $em->persist($projet);
src/GramcServices/ServiceProjets.php:        $em->flush();
src/GramcServices/ServiceProjets.php:        $version = $sv->creerVersion($projet);
src/GramcServices/ServiceProjets.php:        $em = $this->em;
src/GramcServices/ServiceProjets.php:        $users = $projet->getUser();
src/GramcServices/ServiceProjets.php:            $projet->removeUser($u);
src/GramcServices/ServiceProjets.php:            $em->remove($u);
src/GramcServices/ServiceProjets.php:        $em->flush();
src/GramcServices/ServiceProjets.php:        $em->remove($projet);
src/GramcServices/ServiceProjets.php:        $em->flush();
src/GramcServices/ServiceProjets.php:     *    - Suppression des Dac associés
src/GramcServices/ServiceProjets.php:     *    - Suppression de la version
src/GramcServices/ServiceProjets.php:        $sj = $this->sj;
src/GramcServices/ServiceProjets.php:        $em = $this->em;
src/GramcServices/ServiceProjets.php:        $this->__effacerDonnees($version);
src/GramcServices/ServiceProjets.php:        foreach ($version->getDac() as $dac) {
src/GramcServices/ServiceProjets.php:            $em->remove($dac);
src/GramcServices/ServiceProjets.php:        foreach ($version->getCollaborateurVersion() as $collaborateurVersion) {
src/GramcServices/ServiceProjets.php:            $em->remove($collaborateurVersion);
src/GramcServices/ServiceProjets.php:        foreach ($version->getFormationVersion() as $formationVersion) {
src/GramcServices/ServiceProjets.php:            $em->remove($formationVersion);
src/GramcServices/ServiceProjets.php:        $expertises = $version->getExpertise();
src/GramcServices/ServiceProjets.php:            $em->remove($expertise);
src/GramcServices/ServiceProjets.php:        $this->__effacerRallonges($version);
src/GramcServices/ServiceProjets.php:        $projet = $version->getProjet();
src/GramcServices/ServiceProjets.php:            $sj->warningMessage(__METHOD__.':'.__LINE__.' version '.$idVersion.' sans projet supprimée');
src/GramcServices/ServiceProjets.php:            // $projet = $em->getRepository(Projet::class)->findOneBy(['idProjet' => $idProjet]);
src/GramcServices/ServiceProjets.php:            $projet->setVersionDerniere(null);
src/GramcServices/ServiceProjets.php:            $em->persist($projet);
src/GramcServices/ServiceProjets.php:            // $em->flush();
src/GramcServices/ServiceProjets.php:        $em->remove($version);
src/GramcServices/ServiceProjets.php:        $em->flush();
src/GramcServices/ServiceProjets.php:        if (null !== $projet && null !== $projet->getVersion() && 0 === count($projet->getVersion())) {
src/GramcServices/ServiceProjets.php:            $this->__supprimerProjet($projet);
src/GramcServices/ServiceProjets.php:     *  - Les fichiers img_* et *.pdf du répertoire des figures
src/GramcServices/ServiceProjets.php:     *  - Le fichier de signatures s'il existe
src/GramcServices/ServiceProjets.php:        $sv = $this->sv;
src/GramcServices/ServiceProjets.php:        $img_dir = $sv->imageDir($version);
src/GramcServices/ServiceProjets.php:        $fiche = $sv->getSigne($version);
src/GramcServices/ServiceProjets.php:        $em = $this->em;
src/GramcServices/ServiceProjets.php:        foreach ($version->getRallonge() as $r) {
src/GramcServices/ServiceProjets.php:            foreach ($r->getDars() as $d) {
src/GramcServices/ServiceProjets.php:                $em->remove($d);
src/GramcServices/ServiceProjets.php:            $em->remove($r);
src/GramcServices/ServiceProjets.php:        $em->flush();
src/GramcServices/ServiceProjets.php:            $annee = $annee - 2000;
src/GramcServices/ServiceProjets.php:        $prefix = $this->prj_prefix[$type];
src/GramcServices/ServiceProjets.php:        $numero = $this->em->getRepository(Projet::class)->getLastNumProjet($annee, $prefix);
src/GramcServices/ServiceProjets.php:        // $this->sj->debugMessage("$annee -> $type -> $numero");
src/GramcServices/ServiceProjets.php:        // $this->sj->debugMessage(print_r($this->prj_prefix,true));
src/GramcServices/ServiceProjets.php:        // $this->sj->debugMessage("$prefix $numero $id");
src/GramcServices/ServiceProjets.php:    * Renvoie le méta état du projet passé en paramètre, c'est-à-dire
src/GramcServices/ServiceProjets.php:        $etat_projet = $p->getEtatProjet();
src/GramcServices/ServiceProjets.php:        $type_projet = $p->gettypeProjet();
src/GramcServices/ServiceProjets.php:        // $veract  = $this->versionActive($p);
src/GramcServices/ServiceProjets.php:        $verder = $p->derniereVersion();
src/GramcServices/ServiceProjets.php:        // Peut-être la BD est-elle en rade donc on utilise le logger
src/GramcServices/ServiceProjets.php:            $this->log->error(__METHOD__.':'.__LINE__.'Incohérence dans la BD: le projet '.
src/GramcServices/ServiceProjets.php:                                            $p->getIdProjet()." version active: $p n'a PAS de dernière version !");
src/GramcServices/ServiceProjets.php:        $etat_version = $verder->getEtatVersion();
src/GramcServices/ServiceProjets.php:     * NOTE - Si un projet a DEUX VERSIONS et change de responsable, donc de laboratoire, au cours de l'année,
src/GramcServices/ServiceProjets.php:     * $annee      = Année - int, soit 0 (défaut) soit >2000 (ex. 2022)
src/GramcServices/ServiceProjets.php:     *         - Le tableau des projets
src/GramcServices/ServiceProjets.php:     *         - Le tableau des données consolidées
src/GramcServices/ServiceProjets.php:     *         - Le tableau de la répartition entre les ressources
src/GramcServices/ServiceProjets.php:        $sroc = $this->sroc;
src/GramcServices/ServiceProjets.php:        $sdac = $this->sdac;
src/GramcServices/ServiceProjets.php:        $em = $this->em;
src/GramcServices/ServiceProjets.php:        // Données consolidées - Projets dynamiques
src/GramcServices/ServiceProjets.php:        $noms = $sroc->getNoms();
src/GramcServices/ServiceProjets.php:        // Conso - PAS PRISE EN COMPTE POUR L'INSTANT !
src/GramcServices/ServiceProjets.php:        $versions = $this->getVersionsDynParAnnee($annee);
src/GramcServices/ServiceProjets.php:            $p_id = $v->getProjet()->getIdProjet();
src/GramcServices/ServiceProjets.php:                $p['p'] = $v->getProjet();
src/GramcServices/ServiceProjets.php:                $p['metaetat'] = $this->getMetaEtat($p['p']);
src/GramcServices/ServiceProjets.php:            $c = count($noms) - 1;
src/GramcServices/ServiceProjets.php:            foreach ($v->getDac() as $dac) {
src/GramcServices/ServiceProjets.php:                $nr = $sroc->getNomComplet($dac->getRessource());
src/GramcServices/ServiceProjets.php:                $p['demande'][$nr] = $sdac->getDemandeConsolidee($dac);
src/GramcServices/ServiceProjets.php:                $p['attribution'][$nr] = $sdac->getAttributionConsolidee($dac);
src/GramcServices/ServiceProjets.php:            $c = count($noms) - 1;
src/GramcServices/ServiceProjets.php:                --$c;
src/GramcServices/ServiceProjets.php:     * $annee      = Année - int, soit 0 (défaut) soit >2000 (ex. 2022)
src/GramcServices/ServiceProjets.php:        $sroc = $this->sroc;
src/GramcServices/ServiceProjets.php:        $em = $this->em;
src/GramcServices/ServiceProjets.php:        $versions = $this->getVersionsDynParAnnee($annee);
src/GramcServices/ServiceProjets.php:            $rallonges = array_merge($rallonges, iterator_to_array($v->getRallonge()));
src/GramcServices/ServiceProjets.php:        $em = $this->em;
src/GramcServices/ServiceProjets.php:        $sv = $this->sv;
src/GramcServices/ServiceProjets.php:        $ttes_versions = $this->em->getRepository(Version::class)->findBy(['typeVersion' => Projet::PROJET_DYN]);
src/GramcServices/ServiceProjets.php:            if ($sv->isAnnee($v, $annee)) {
src/GramcServices/ServiceProjets.php:     *    - Nombre de projets
src/GramcServices/ServiceProjets.php:     *    - Heures demandées
src/GramcServices/ServiceProjets.php:     *    - Heures attribuées
src/GramcServices/ServiceProjets.php:     *    - Heures consommées
src/GramcServices/ServiceProjets.php:     *    - Liste des projets
src/GramcServices/ServiceProjets.php:     * NOTE - Si $sess_lbl vaut A ou B on ne renvoie PAS les projets fil de l'eau
src/GramcServices/ServiceProjets.php:     * TODO - Utilisé par les statistiques mais les statistiques sont à refaire
src/GramcServices/ServiceProjets.php:        $sv = $this->sv;
src/GramcServices/ServiceProjets.php:        $projets = $this->projetsParAnnee($annee, false, false, $sess_lbl)[0];
src/GramcServices/ServiceProjets.php:            if (in_array($v->getEtatVersion(), $a_filtrer)) {
src/GramcServices/ServiceProjets.php:            if ('AB' !== $sess_lbl && 1 !== $v->getTypeVersion()) {
src/GramcServices/ServiceProjets.php:            $acro = $v->$critere();
src/GramcServices/ServiceProjets.php:            if ($sv->isNouvelle($v)) {
src/GramcServices/ServiceProjets.php:            $liste_projets[$acro][] = $p['p']->getIdProjet();
src/GramcServices/ServiceProjets.php:                $dem_heures[$acro] += $p['va']->getDemHeuresTotal();
src/GramcServices/ServiceProjets.php:                $dem_heures[$acro] += $p['vb']->getDemHeuresTotal();
src/GramcServices/ServiceProjets.php:     *         - 'stk' projet ayant demandé du stockage
src/GramcServices/ServiceProjets.php:     *         - 'ptg' projet ayant demandé du partage
src/GramcServices/ServiceProjets.php:        $p['p'] = $v->getProjet();
src/GramcServices/ServiceProjets.php:        $p['sondVolDonnPerm'] = $v->getSondVolDonnPerm();
src/GramcServices/ServiceProjets.php:        $p['sondJustifDonnPerm'] = $v->getSondJustifDonnPerm();
src/GramcServices/ServiceProjets.php:        $p['dataMetaDataFormat'] = $v->getDataMetaDataFormat();
src/GramcServices/ServiceProjets.php:        $p['dataNombreDatasets'] = $v->getDataNombreDatasets();
src/GramcServices/ServiceProjets.php:        $p['dataTailleDatasets'] = $v->getDataTailleDatasets();
src/GramcServices/ServiceProjets.php:     * Le user connecté a-t-il accès à $projet ?
src/GramcServices/ServiceProjets.php:        if ($this->sac->isGranted('ROLE_OBS') || $this->sac->isGranted('ROLE_PRESIDENT')) {
src/GramcServices/ServiceProjets.php:        } elseif (Projet::PROJET_DYN === $projet->getTypeProjet()) {
src/GramcServices/ServiceProjets.php:            return $this->userProjetACL($projet);
src/GramcServices/ServiceProjets.php:     * Le user connecté a-t-il accès à au moins une version de $projet ?
src/GramcServices/ServiceProjets.php:        $user = $this->token->getUser();
src/GramcServices/ServiceProjets.php:        foreach ($projet->getVersion() as $version) {
src/GramcServices/ServiceProjets.php:            if (true === $this->userVersionACL($version, $user)) {
src/GramcServices/ServiceProjets.php:        if ($version->isCollaborateur($user)) {
src/GramcServices/ServiceProjets.php:        if ($version->isExpertDe($user)) {
src/GramcServices/ServiceProjets.php:        foreach ($version->getRallonge() as $rallonge) {
src/GramcServices/ServiceProjets.php:            // $e = $rallonge->getExpert();
src/GramcServices/ServiceProjets.php:            // if ($e !== null && $user->isEqualTo($rallonge->getExpert())) return true;
src/GramcServices/ServiceProjets.php:            if ($rallonge->isExpertDe($user)) {
src/GramcServices/ServiceProjets.php:        if ($version->isExpertThematique($user)) {
src/GramcServices/ServiceProjets.php:        $rapport_directory = $this->rapport_directory;
src/GramcServices/ServiceProjets.php:        $file = $dir.'/'.$annee.'/'.$annee.$projet->getIdProjet().'.pdf';
src/GramcServices/ServiceProjets.php:        $rapportActivite = $this->em->getRepository(RapportActivite::class)->findOneBy(
src/GramcServices/ServiceProjets.php:        if (null === $this->getRapport($projet, $annee)) {
src/GramcServices/ServiceProjets.php:        $rapportActivite = $this->em->getRepository(RapportActivite::class)->findOneBy(
src/GramcServices/ServiceProjets.php:            return intdiv($rapportActivite->getTaille(), 1024);
src/GramcServices/ServiceProjets.php:        $subAnnee = substr(strval($annee), -2);
src/GramcServices/ServiceProjets.php:        $repository = $this->em->getRepository(Version::class);
src/GramcServices/ServiceProjets.php:        $versionA = $this->em->getRepository(Version::class)->findOneBy(['idVersion' => $subAnnee.'A'.$projet->getIdProjet(), 'projet' => $projet]);
src/GramcServices/ServiceProjets.php:        $versionB = $this->em->getRepository(Version::class)->findOneBy(['idVersion' => $subAnnee.'B'.$projet->getIdProjet(), 'projet' => $projet]);
src/GramcServices/ServiceProjets.php:     *         - Pas collaborateurs
src/GramcServices/ServiceProjets.php:     *         - Pas d'expertises
src/GramcServices/ServiceProjets.php:     *         - Pas de privilèges
src/GramcServices/ServiceProjets.php:     *         - Pas de users
src/GramcServices/ServiceProjets.php:     * TODO - Un peu zarbi tout de même
src/GramcServices/ServiceProjets.php:        $em = $this->em;
src/GramcServices/ServiceProjets.php:        $repo_ind = $em->getRepository(Individu::class);
src/GramcServices/ServiceProjets.php:        $repo_cv = $em->getRepository(CollaborateurVersion::class);
src/GramcServices/ServiceProjets.php:        $repo_exp = $em->getRepository(Expertise::class);
src/GramcServices/ServiceProjets.php:        $individus = $repo_ind->findAll();
src/GramcServices/ServiceProjets.php:            if ($individu->getAdmin()) {
src/GramcServices/ServiceProjets.php:            if ($individu->getObs()) {
src/GramcServices/ServiceProjets.php:            if ($individu->getExpert()) {
src/GramcServices/ServiceProjets.php:            if (!(null === $repo_cv->findOneBy(['collaborateur' => $individu]))) {
src/GramcServices/ServiceProjets.php:            if (!(null === $repo_exp->findOneBy(['expert' => $individu]))) {
src/GramcServices/ServiceProjets.php:            foreach ($em->getRepository(Sso::class)->findBy(['individu' => $individu]) as $sso) {
src/GramcServices/ServiceProjets.php:                $em->remove($sso);
src/GramcServices/ServiceProjets.php:            foreach ($individu->getUser() as $u) {
src/GramcServices/ServiceProjets.php:                $em->remove($u);
src/GramcServices/ServiceProjets.php:            foreach ($individu->getClessh() as $k) {
src/GramcServices/ServiceProjets.php:                $em->remove($k);
src/GramcServices/ServiceProjets.php:            // TODO - Supprimer les invitations... ne devraient pas exister mais il fuadrait le vérifier !
src/GramcServices/ServiceProjets.php:            $this->sj->infoMessage("L'individu ".$individu.' a été effacé ');
src/GramcServices/ServiceProjets.php:            $em->remove($individu);
src/GramcServices/ServiceProjets.php:        $em->flush();
src/GramcServices/ServiceProjets.php:     * Calcul de la dernière version d'un projet - Utilisé par \App\EventListener\ProjetDerniereVersion
src/GramcServices/ServiceProjets.php:        $sj = $this->sj;
src/GramcServices/ServiceProjets.php:        if (null === $projet->getVersion()) {
src/GramcServices/ServiceProjets.php:            $sj->throwException(__METHOD__.':'.__LINE__." Projet $projet = PAS DE VERSION");
src/GramcServices/ServiceProjets.php:        $iterator = $projet->getVersion()->getIterator();
src/GramcServices/ServiceProjets.php:        $iterator->uasort(function ($a, $b) {
src/GramcServices/ServiceProjets.php:            $sj = $this->sj;
src/GramcServices/ServiceProjets.php:            $nba = $a->getNbVersion();
src/GramcServices/ServiceProjets.php:            if (null === $a->getNbVersion()) {
src/GramcServices/ServiceProjets.php:            $nbb = $b->getNbVersion();
src/GramcServices/ServiceProjets.php:            if (null === $b->getNbVersion()) {
src/GramcServices/ServiceProjets.php:        // dd($projet->getVersionDerniere(),$result);
src/GramcServices/ServiceProjets.php:        if ($projet->getVersionDerniere() !== $result) {
src/GramcServices/ServiceProjets.php:            $projet->setVersionDerniere($result);
src/GramcServices/ServiceProjets.php:            $em = $this->em;
src/GramcServices/ServiceProjets.php:            $em->persist($projet);
src/GramcServices/ServiceProjets.php:            $em->flush($projet);
src/GramcServices/ServiceProjets.php:        $em = $this->em;
src/GramcServices/ServiceProjets.php:        $versionActive = $projet->getVersionActive();
src/GramcServices/ServiceProjets.php:        if (Etat::TERMINE === $projet->getEtatProjet()) {
src/GramcServices/ServiceProjets.php:                $projet->setVersionActive(null);
src/GramcServices/ServiceProjets.php:                $em->persist($projet);
src/GramcServices/ServiceProjets.php:                // $em->flush();
src/GramcServices/ServiceProjets.php:          && (Etat::ACTIF === $versionActive->getEtatVersion() || Etat::ACTIF_R === $versionActive->getEtatVersion() || Etat::NOUVELLE_VERSION_DEMANDEE === $versionActive->getEtatVersion())
src/GramcServices/ServiceProjets.php:        foreach (array_reverse($projet->getVersion()->toArray()) as $version) {
src/GramcServices/ServiceProjets.php:            if (Etat::ACTIF === $version->getEtatVersion()
src/GramcServices/ServiceProjets.php:                || Etat::NOUVELLE_VERSION_DEMANDEE === $version->getEtatVersion()
src/GramcServices/ServiceProjets.php:                || Etat::ACTIF_R === $version->getEtatVersion()
src/GramcServices/ServiceProjets.php:                || Etat::EN_ATTENTE === $version->getEtatVersion()
src/GramcServices/ServiceProjets.php:                || Etat::ACTIF_TEST === $version->getEtatVersion()) {
src/GramcServices/ServiceProjets.php:            $projet->setVersionActive($result);
src/GramcServices/ServiceProjets.php:            $em->persist($projet);
src/GramcServices/ServiceProjets.php:            // $em->flush();
src/GramcServices/ServiceProjets.php:        return $this->calculVersionActive($projet);
src/GramcServices/ServiceProjets.php:        $versions = $p->getVersion();
src/GramcServices/ServiceProjets.php:            if (Etat::ANNULE !== $v->getEtatVersion() && Etat::TERMINE !== $v->getEtatVersion()) {
src/GramcServices/ServiceProjets.php:     * c-à-d si au moins une des ressources n'est pas acquittée
src/GramcServices/ServiceProjets.php:        $sdac = $this->sdac;
src/GramcServices/ServiceProjets.php:        $version = $projet->getVersionActive();
src/GramcServices/ServiceProjets.php:        foreach ($version->getDac() as $dac) {
src/GramcServices/ServiceProjets.php:            if ($sdac->getTodofConsolide($dac)) {
src/GramcServices/ServiceRallonges.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceRallonges.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceRallonges.php:     * Création d'une nouvelle rallonge liée à une version existante, c'est-à-dire:
src/GramcServices/ServiceRallonges.php:     *    - Création de la rallonge
src/GramcServices/ServiceRallonges.php:     *    - Création des Dars associés
src/GramcServices/ServiceRallonges.php:        $su = $this->su;
src/GramcServices/ServiceRallonges.php:        $sr = $this->sr;
src/GramcServices/ServiceRallonges.php:        $sroc = $this->sroc;
src/GramcServices/ServiceRallonges.php:        $token = $this->tok->getToken();
src/GramcServices/ServiceRallonges.php:        $em = $this->em;
src/GramcServices/ServiceRallonges.php:        $rallonge->setEtatRallonge(Etat::EDITION_DEMANDE);
src/GramcServices/ServiceRallonges.php:        $rallonge->setVersion($version);
src/GramcServices/ServiceRallonges.php:        $count = count($version->getRallonge()) + 1;
src/GramcServices/ServiceRallonges.php:        $rallonge->setIdRallonge($version->getIdVersion().'R'.$count);
src/GramcServices/ServiceRallonges.php:        $em->persist($rallonge);
src/GramcServices/ServiceRallonges.php:        $em->flush($rallonge);
src/GramcServices/ServiceRallonges.php:        $ressources = $sroc->getRessources();
src/GramcServices/ServiceRallonges.php:            $dar->setRallonge($rallonge);
src/GramcServices/ServiceRallonges.php:            $dar->setRessource($r);
src/GramcServices/ServiceRallonges.php:            $em->persist($dar);
src/GramcServices/ServiceRallonges.php:            $rallonge->addDar($dar);
src/GramcServices/ServiceRallonges.php:        $em->flush();
src/GramcServices/ServiceRallonges.php:        $etat = $r->getEtatRallonge();
src/GramcServices/ServiceRallonges.php:    // TODO - Copié-presque-collé depuis DEMANDES DE RESSOURCES de ServiceVersions
src/GramcServices/ServiceRallonges.php:     * c'est-à-dire toutes les ressources (TODO - Ajouter un champ "disponible")
src/GramcServices/ServiceRallonges.php:        $em = $this->em;
src/GramcServices/ServiceRallonges.php:        $sj = $this->sj;
src/GramcServices/ServiceRallonges.php:            $sj->throwException('ServiceRallonges:prepareRessources : rallonge null');
src/GramcServices/ServiceRallonges.php:        $ressources = $em->getRepository(Ressource::class)->findAll();
src/GramcServices/ServiceRallonges.php:        foreach ($rallonge->getDar() as $dar) {
src/GramcServices/ServiceRallonges.php:            $k = $dar->getRessource()->getId();
src/GramcServices/ServiceRallonges.php:            if (array_key_exists($r->getId(), $dars)) {
src/GramcServices/ServiceRallonges.php:                $dar = $dars[$r->getId()];
src/GramcServices/ServiceRallonges.php:        $sj = $this->sj;
src/GramcServices/ServiceRallonges.php:        $em = $this->em;
src/GramcServices/ServiceRallonges.php:        $sval = $this->vl;
src/GramcServices/ServiceRallonges.php:        $form = $this->ff
src/GramcServices/ServiceRallonges.php:                   ->createNamedBuilder('form_ressource', FormType::class, ['ressource' => $this->prepareRessources($rallonge)])
src/GramcServices/ServiceRallonges.php:                   ->add('ressource', CollectionType::class, [
src/GramcServices/ServiceRallonges.php:                   ->getForm();
src/GramcServices/ServiceRallonges.php:     * Validation du formulaire des ressources - Retourne true car toujours valide !
src/GramcServices/ServiceRallonges.php:            if ($dar->getDemande() < 0) {
src/GramcServices/ServiceRallonges.php:                $dar->setdemande(0);
src/GramcServices/ServiceRessources.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceRessources.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceRessources.php:        $ressources = $this->getRessources();
src/GramcServices/ServiceRessources.php:            $noms[] = $this->getNomComplet($r);
src/GramcServices/ServiceRessources.php:        $em = $this->em;
src/GramcServices/ServiceRessources.php:        $ressources = $em->getRepository(Ressource::class)->findAll();
src/GramcServices/ServiceRessources.php:            return $this->getNomComplet($a) < $this->getNomComplet($b) ? -1 : 1;
src/GramcServices/ServiceRessources.php:     * Renvoie le nom complet de la ressource, c-à-d: nom-du-serveur nom-de-la-ressource
src/GramcServices/ServiceRessources.php:        $serveur = $ressource->getServeur();
src/GramcServices/ServiceRessources.php:        $nc = (null === $serveur) ? 'null' : $serveur->getNom();
src/GramcServices/ServiceRessources.php:        if (null !== $ressource->getNom()) {
src/GramcServices/ServiceRessources.php:            $nc = $nc.$sep.$ressource->getNom();
src/GramcServices/ServiceServeurs.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceServeurs.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceServeurs.php:        $serveurs = $this->getServeurs();
src/GramcServices/ServiceServeurs.php:            $noms[] = $s->getNom();
src/GramcServices/ServiceServeurs.php:        $em = $this->em;
src/GramcServices/ServiceServeurs.php:        return $em->getRepository(Serveur::class)->findAllsorted();
src/GramcServices/ServiceSessions.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceSessions.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceSessions.php:     *             $data = $ss->selectAnnee($request);
src/GramcServices/ServiceSessions.php:        $grdt = $this->grdt;
src/GramcServices/ServiceSessions.php:        $annee_max = new \DateTime($grdt->showYear().'-01-01');
src/GramcServices/ServiceSessions.php:        $annee_min = new \DateTime('2023-01-01'); // Mesonet commence en 2023
src/GramcServices/ServiceSessions.php:            $annee = $annee_max->format('Y');
src/GramcServices/ServiceSessions.php:        $form = Functions::createFormBuilder($this->ff, ['annee' => $annee])
src/GramcServices/ServiceSessions.php:                    ->add(
src/GramcServices/ServiceSessions.php:                    ->add('submit', SubmitType::class, ['label' => 'Choisir'])
src/GramcServices/ServiceSessions.php:                    ->getForm();
src/GramcServices/ServiceSessions.php:        $form->handleRequest($request);
src/GramcServices/ServiceSessions.php:        if ($form->isSubmitted() && $form->isValid()) {
src/GramcServices/ServiceSessions.php:            $annee = $form->getData()['annee'];
src/GramcServices/ServiceUsers.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceUsers.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceUsers.php:     *      $s['TURPAN']['nom'] -> le nom de login (toto), ou 'nologin'
src/GramcServices/ServiceUsers.php:     *      $s['TURPAN']['clessh'] -> la cléssh, ou null
src/GramcServices/ServiceUsers.php:     *      $s['TURPAN']['userid] -> le id du user
src/GramcServices/ServiceUsers.php:     *      $s['TURPAN']['deploy'] -> le flag deply (clé déployée ou pas)
src/GramcServices/ServiceUsers.php:        $em = $this->em;
src/GramcServices/ServiceUsers.php:        $sr = $this->sr;
src/GramcServices/ServiceUsers.php:        $serveurs = $sr->getServeurs();
src/GramcServices/ServiceUsers.php:                $u = $this->getUser($cv->getCollaborateur(), $cv->getVersion()->getProjet(), $s);
src/GramcServices/ServiceUsers.php:                $sn = $s->getNom();
src/GramcServices/ServiceUsers.php:                $loginnames3[$sn]['nom'] = $u->getLoginname() ? $u->getLoginname() : 'nologin';
src/GramcServices/ServiceUsers.php:                $loginnames3[$sn]['login'] = $u->getLogin();
src/GramcServices/ServiceUsers.php:                $clessh = $u->getClessh();
src/GramcServices/ServiceUsers.php:                    $loginnames3[$sn]['clessh']['idCle'] = $u->getClessh()->getId();
src/GramcServices/ServiceUsers.php:                    $loginnames3[$sn]['clessh']['nom'] = $u->getClessh()->getNom();
src/GramcServices/ServiceUsers.php:                    $loginnames3[$sn]['clessh']['pub'] = $u->getClessh()->getPub();
src/GramcServices/ServiceUsers.php:                    $loginnames3[$sn]['clessh']['rvk'] = $u->getClessh()->getRvk();
src/GramcServices/ServiceUsers.php:                    $loginnames3[$sn]['clessh']['deploy'] = $u->getDeply();
src/GramcServices/ServiceUsers.php:                $loginnames3[$sn]['userid'] = $u->getId();
src/GramcServices/ServiceUsers.php:                $sn = $s->getNom();
src/GramcServices/ServiceUsers.php:        return $u->getLoginname().'@'.$u->getServeur();
src/GramcServices/ServiceUsers.php:        $em = $this->em;
src/GramcServices/ServiceUsers.php:        $users = $em->getRepository(User::class)->findBy(['individu' => $i, 'projet' => $p, 'serveur' => $s]);
src/GramcServices/ServiceUsers.php:            $u->setIndividu($i);
src/GramcServices/ServiceUsers.php:            $u->setProjet($p);
src/GramcServices/ServiceUsers.php:            $u->setServeur($s);
src/GramcServices/ServiceUsers.php:            $p->addUser($u);
src/GramcServices/ServiceUsers.php:            $em->persist($u);
src/GramcServices/ServiceUsers.php:            $em->flush($u);
src/GramcServices/ServiceUsers.php:            throw $this->sj->throwException('ServiceUsers:getUser findBy renvoie '.count($users).' objets '."$i - $p - $s");
src/GramcServices/ServiceVersions.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/ServiceVersions.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/ServiceVersions.php:     * Création d'une nouvelle version liée à un projet existant, c'est-à-dire:
src/GramcServices/ServiceVersions.php:     *    - Création de la version:
src/GramcServices/ServiceVersions.php:     *       * Si c'est la première version, création ex-nihilo
src/GramcServices/ServiceVersions.php:     *    - Création des Dac associés
src/GramcServices/ServiceVersions.php:     *    - Si nécessaire, création des User associés
src/GramcServices/ServiceVersions.php:        $su = $this->su;
src/GramcServices/ServiceVersions.php:        $sr = $this->sr;
src/GramcServices/ServiceVersions.php:        $sroc = $this->sroc;
src/GramcServices/ServiceVersions.php:        $token = $this->tok->getToken();
src/GramcServices/ServiceVersions.php:        $em = $this->em;
src/GramcServices/ServiceVersions.php:        $versions = $em->getRepository(Version::class)->findVersions($projet);
src/GramcServices/ServiceVersions.php:            $version->setEtatVersion(Etat::EDITION_DEMANDE);
src/GramcServices/ServiceVersions.php:            $version->setProjet($projet);
src/GramcServices/ServiceVersions.php:            $version->setTypeVersion($projet->getTypeProjet());
src/GramcServices/ServiceVersions.php:            $version->setNbVersion('01');
src/GramcServices/ServiceVersions.php:            $version->setIdVersion('01'.$projet->getIdProjet());
src/GramcServices/ServiceVersions.php:            $moi = $token->getUser();
src/GramcServices/ServiceVersions.php:            $this->setLaboResponsable($version, $moi);
src/GramcServices/ServiceVersions.php:            $cv->setVersion($version);
src/GramcServices/ServiceVersions.php:            $cv->setResponsable(true);
src/GramcServices/ServiceVersions.php:            $cv->setDeleted(false);
src/GramcServices/ServiceVersions.php:            $em->persist($cv);
src/GramcServices/ServiceVersions.php:            $em->persist($version);
src/GramcServices/ServiceVersions.php:            $em->flush();
src/GramcServices/ServiceVersions.php:            // TODO - mais ici cela ne fonctionne pas car lors du persist de la version de projet n'est pas dans la BD
src/GramcServices/ServiceVersions.php:            $projet->setVersionDerniere($version);
src/GramcServices/ServiceVersions.php:            $em->persist($projet);
src/GramcServices/ServiceVersions.php:            $em->flush($projet);
src/GramcServices/ServiceVersions.php:            $dir = $this->imageDir($version);
src/GramcServices/ServiceVersions.php:            // NOTE - ils seront créés seulement lors de la première version
src/GramcServices/ServiceVersions.php:            $serveurs = $sr->getServeurs();
src/GramcServices/ServiceVersions.php:                $su->getUser($moi, $projet, $s);
src/GramcServices/ServiceVersions.php:            $verder = $projet->getVersionDerniere();
src/GramcServices/ServiceVersions.php:            $old_dir = $this->imageDir($verder);
src/GramcServices/ServiceVersions.php:            // Changement du numéro de version et de l'Id - Tout le reste est identique
src/GramcServices/ServiceVersions.php:            $nb = $this->__incrNbVersion($version->getNbVersion());
src/GramcServices/ServiceVersions.php:            $version->setNbVersion($nb);
src/GramcServices/ServiceVersions.php:            $version->setIdVersion($nb.$projet->getIdProjet());
src/GramcServices/ServiceVersions.php:            $em->persist($version);
src/GramcServices/ServiceVersions.php:            $em->flush();
src/GramcServices/ServiceVersions.php:            $new_dir = $this->imageDir($version);
src/GramcServices/ServiceVersions.php:                        $sj->errorMessage("VersionController:erreur dans la fonction copy $old_f => $new_f");
src/GramcServices/ServiceVersions.php:            $collaborateurVersions = $verder->getCollaborateurVersion();
src/GramcServices/ServiceVersions.php:                if ($collaborateurVersion->getDeleted()) {
src/GramcServices/ServiceVersions.php:                $newCollaborateurVersion->setVersion($version);
src/GramcServices/ServiceVersions.php:                $em->persist($newCollaborateurVersion);
src/GramcServices/ServiceVersions.php:            $em->flush();
src/GramcServices/ServiceVersions.php:        $ressources = $sroc->getRessources();
src/GramcServices/ServiceVersions.php:            $dac->setVersion($version);
src/GramcServices/ServiceVersions.php:            $dac->setRessource($r);
src/GramcServices/ServiceVersions.php:            $em->persist($dac);
src/GramcServices/ServiceVersions.php:            $version->addDac($dac);
src/GramcServices/ServiceVersions.php:        $em->flush();
src/GramcServices/ServiceVersions.php:        $full_filename = $this->imagePath($filename, $version);
src/GramcServices/ServiceVersions.php:        $document = $this->imageDir($version).'/document.pdf';
src/GramcServices/ServiceVersions.php:     * Fonctionne aussi bien en ajax avec jquery-upload-file-master
src/GramcServices/ServiceVersions.php:        $sj = $this->sj;
src/GramcServices/ServiceVersions.php:        $ff = $this->ff;
src/GramcServices/ServiceVersions.php:        $sf = $this->sf;
src/GramcServices/ServiceVersions.php:        $max_size_doc = intval($this->max_size_doc);
src/GramcServices/ServiceVersions.php:                $sj->errorMessage(__METHOD__.':'.__LINE__." Erreur interne - type $type pas supporté");
src/GramcServices/ServiceVersions.php:        ->createNamedBuilder('fichier', FormType::class, [], ['csrf_protection' => false])
src/GramcServices/ServiceVersions.php:        ->add(
src/GramcServices/ServiceVersions.php:        ->getForm();
src/GramcServices/ServiceVersions.php:        $form->handleRequest($request);
src/GramcServices/ServiceVersions.php:        if ($form->isSubmitted() && $form->isValid()) {
src/GramcServices/ServiceVersions.php:            $tempFilename = $form->getData()['fichier'];
src/GramcServices/ServiceVersions.php:            $file->move($dirname, $filename);
src/GramcServices/ServiceVersions.php:            $sj->debugMessage(__METHOD__.':'.__LINE__.' Fichier -> '.$filename);
src/GramcServices/ServiceVersions.php:                $rvl['properties'] = $this->imageProperties($filename, 'image au format jpeg', $version);
src/GramcServices/ServiceVersions.php:        elseif ($form->isSubmitted() && !$form->isValid()) {
src/GramcServices/ServiceVersions.php:            if (isset($form->getData()['fichier'])) {
src/GramcServices/ServiceVersions.php:                $rvl['message'] = $sf->formError($form->getData()['fichier'], $constraints);
src/GramcServices/ServiceVersions.php:        } elseif ($request->isXMLHttpRequest()) {
src/GramcServices/ServiceVersions.php:     *          TODO - Pas clair du tout !
src/GramcServices/ServiceVersions.php:        $full_filename = $this->imageDir($version).'/'.$filename;
src/GramcServices/ServiceVersions.php:        $dir = $this->fig_directory;
src/GramcServices/ServiceVersions.php:            $this->sj->warningMessage('fig_directory '.$dir.' créé !');
src/GramcServices/ServiceVersions.php:        $dir .= '/'.$version->getProjet()->getIdProjet();
src/GramcServices/ServiceVersions.php:        $dir .= '/'.$version->getIdVersion();
src/GramcServices/ServiceVersions.php:     * TODO - Le champ prjFicheVal de l'entité Version n'est pas utilisé !
src/GramcServices/ServiceVersions.php:        $file = $this->getSignePath($version);
src/GramcServices/ServiceVersions.php:        if ($this->isSigne($version)) {
src/GramcServices/ServiceVersions.php:            return $this->getSignePath($version);
src/GramcServices/ServiceVersions.php:        $signe = $this->getSigne($version);
src/GramcServices/ServiceVersions.php:        return $this->getSigneDir($version).'/'.$version.'.pdf';
src/GramcServices/ServiceVersions.php:        $dir = $this->signature_directory.'/'.$version->getProjet();
src/GramcServices/ServiceVersions.php:            $this->sj->warningMessage('Répertoire pour les fiches signées '.$dir.' créé !');
src/GramcServices/ServiceVersions.php:        $annee = $version->anneeRapport();
src/GramcServices/ServiceVersions.php:        $dir = $this->rapport_directory.'/'.$annee;
src/GramcServices/ServiceVersions.php:            $this->sj->warningMessage('rapport_directory '.$dir.' créé !');
src/GramcServices/ServiceVersions.php:        $dir = $this->rapport_directory.'/'.$annee;
src/GramcServices/ServiceVersions.php:            $this->sj->warningMessage('rapport_directory '.$dir.' créé !');
src/GramcServices/ServiceVersions.php:        foreach ($version->getCollaborateurVersion() as $item) {
src/GramcServices/ServiceVersions.php:            $collaborateur = $item->getCollaborateur();
src/GramcServices/ServiceVersions.php:                $this->sj->errorMessage(__METHOD__.':'.__LINE__.' collaborateur null pour CollaborateurVersion '.$item->getId());
src/GramcServices/ServiceVersions.php:            if ($collaborateur->isEqualTo($new)) {
src/GramcServices/ServiceVersions.php:                $item->setResponsable(true);
src/GramcServices/ServiceVersions.php:                $this->em->persist($item);
src/GramcServices/ServiceVersions.php:                $labo = $item->getLabo();
src/GramcServices/ServiceVersions.php:                    $version->setPrjLLabo(Functions::string_conversion($labo->getAcroLabo()));
src/GramcServices/ServiceVersions.php:                    $this->sj->errorMessage(__METHOD__.':'.__LINE__.' Le nouveau responsable '.$new." ne fait partie d'aucun laboratoire");
src/GramcServices/ServiceVersions.php:                $this->setLaboResponsable($version, $new);
src/GramcServices/ServiceVersions.php:                $this->em->persist($version);
src/GramcServices/ServiceVersions.php:            } elseif (true == $item->getResponsable()) {
src/GramcServices/ServiceVersions.php:                $item->setResponsable(false);
src/GramcServices/ServiceVersions.php:                $this->em->persist($item);
src/GramcServices/ServiceVersions.php:        $this->em->flush();
src/GramcServices/ServiceVersions.php:                                ->getCollaborateurVersion()
src/GramcServices/ServiceVersions.php:                                ->filter(function ($cv) use ($individu) {
src/GramcServices/ServiceVersions.php:                                            ->getCollaborateur()
src/GramcServices/ServiceVersions.php:                                            ->isEqualTo($individu);
src/GramcServices/ServiceVersions.php:            return $filteredCollection->first();
src/GramcServices/ServiceVersions.php:        $em = $this->em;
src/GramcServices/ServiceVersions.php:        $sj = $this->sj;
src/GramcServices/ServiceVersions.php:        $cv = $this->TrouverCollaborateur($version, $individu);
src/GramcServices/ServiceVersions.php:        $sj->debugMessage("ServiceVersion:supprimerCollaborateur $cv -> $individu supprimé");
src/GramcServices/ServiceVersions.php:        $em->remove($cv);
src/GramcServices/ServiceVersions.php:        $em->flush();
src/GramcServices/ServiceVersions.php:        $em = $this->em;
src/GramcServices/ServiceVersions.php:        $su = $this->su;
src/GramcServices/ServiceVersions.php:        $sj = $this->sj;
src/GramcServices/ServiceVersions.php:        foreach ($em->getRepository(Serveur::class)->findAll() as $s) {
src/GramcServices/ServiceVersions.php:            $u = $su->getUser($individu, $projet, $s);
src/GramcServices/ServiceVersions.php:            $k = $s->getnom();
src/GramcServices/ServiceVersions.php:                $u->setLogin($logins[$k]);
src/GramcServices/ServiceVersions.php:                $u->setLogin(false);
src/GramcServices/ServiceVersions.php:            $this->em->persist($u);
src/GramcServices/ServiceVersions.php:            $this->em->flush();
src/GramcServices/ServiceVersions.php:        if (1 === $version->getNbVersion()) {
src/GramcServices/ServiceVersions.php:     * c'est-à-dire s'il y a au moins 1 jour de l'année durant lequel
src/GramcServices/ServiceVersions.php:        $grdt = $this->grdt;
src/GramcServices/ServiceVersions.php:        if (Projet::PROJET_DYN == $version->getTypeVersion()) {
src/GramcServices/ServiceVersions.php:            $annee_courante = intval($grdt->showYear());
src/GramcServices/ServiceVersions.php:            if (null === $version->getStartDate()) {
src/GramcServices/ServiceVersions.php:                $s = $version->getStartDate();
src/GramcServices/ServiceVersions.php:            if (null === $version->getEndDate()) {
src/GramcServices/ServiceVersions.php:                $e = $grdt->getNew();
src/GramcServices/ServiceVersions.php:                $e = $version->getEndDate();
src/GramcServices/ServiceVersions.php:            $j1 = new \DateTime($grdt->showYear().'-01-01');
src/GramcServices/ServiceVersions.php:            $d31 = new \DateTime($grdt->showYear().'-12-31');
src/GramcServices/ServiceVersions.php:            // if ($version->getIdVersion() === '02M23017') {dd($version->getIdVersion(),$s,$e,$j1,$d31);};
src/GramcServices/ServiceVersions.php:            return $version->getFullAnnee() == strval($annee);
src/GramcServices/ServiceVersions.php:        $labo = $individu->getLabo();
src/GramcServices/ServiceVersions.php:            $version->setPrjLLabo(Functions::string_conversion($labo));
src/GramcServices/ServiceVersions.php:            $this->sj->errorMessage(__METHOD__.':'.__LINE__.' Le nouveau responsable '.$individu." ne fait partie d'aucun laboratoire");
src/GramcServices/ServiceVersions.php:     *  - Les fichiers img_* et *.pdf du répertoire des figures
src/GramcServices/ServiceVersions.php:     *  - Le fichier de signatures s'il existe
src/GramcServices/ServiceVersions.php:     *  - N'EFFACE PAS LE RAPPORT D'ACTIVITE !
src/GramcServices/ServiceVersions.php:        $img_dir = $this->imageDir($version);
src/GramcServices/ServiceVersions.php:        $full_filename = $this->imagePath($filename, $version);
src/GramcServices/ServiceVersions.php:            // $sj->debugMessage('ServiceVersion image  ' .$filename . ' : ' . base64_encode( file_get_contents( $full_filename ) )  );
src/GramcServices/ServiceVersions.php:        $cmd = "identify -format '%w %h' $image";
src/GramcServices/ServiceVersions.php:        // $sj->debugMessage('imageRedim cmd identify = ' . $cmd);
src/GramcServices/ServiceVersions.php:        $max_fig_width = $this->max_fig_width;
src/GramcServices/ServiceVersions.php:        $max_fig_height = $this->max_fig_height;
src/GramcServices/ServiceVersions.php:            $cmd = "convert $image -resize $rapport% $image";
src/GramcServices/ServiceVersions.php:            // $sj->debugMessage('imageRedim cmd convert = ' . $cmd);
src/GramcServices/ServiceVersions.php:     * c'est-à-dire les formations pour lesquelles startDate <= date courante <= endDate
src/GramcServices/ServiceVersions.php:        $em = $this->em;
src/GramcServices/ServiceVersions.php:        $sj = $this->sj;
src/GramcServices/ServiceVersions.php:            $sj->throwException('ServiceVersion:prepareFormations : version null');
src/GramcServices/ServiceVersions.php:        $formations = $em->getRepository(Formation::class)->findAllCurrentDate();
src/GramcServices/ServiceVersions.php:        foreach ($version->getFormationVersion() as $fv) {
src/GramcServices/ServiceVersions.php:            $k = $fv->getFormation()->getId();
src/GramcServices/ServiceVersions.php:            if (array_key_exists($f->getId(), $formationVersions)) {
src/GramcServices/ServiceVersions.php:                $fv = $formationVersions[$f->getId()];
src/GramcServices/ServiceVersions.php:            // $formationForm->setNombre($fv->getNombre());
src/GramcServices/ServiceVersions.php:        $sj = $this->sj;
src/GramcServices/ServiceVersions.php:        $em = $this->em;
src/GramcServices/ServiceVersions.php:        $sval = $this->vl;
src/GramcServices/ServiceVersions.php:        if ($this->resp_peut_modif_collabs) {
src/GramcServices/ServiceVersions.php:        return $this->ff
src/GramcServices/ServiceVersions.php:                   ->createNamedBuilder('form_formation', FormType::class, ['formation' => $this->prepareFormations($version)])
src/GramcServices/ServiceVersions.php:                   ->add('formation', CollectionType::class, [
src/GramcServices/ServiceVersions.php:                    ->getForm();
src/GramcServices/ServiceVersions.php:     * Validation du formulaire des formations - Retourne true/false
src/GramcServices/ServiceVersions.php:            if ($iform->getNombre() < 0) {
src/GramcServices/ServiceVersions.php:                $iform->setNombre(0);
src/GramcServices/ServiceVersions.php:        $em = $this->em;
src/GramcServices/ServiceVersions.php:        $sj = $this->sj;
src/GramcServices/ServiceVersions.php:        $sval = $this->vl;
src/GramcServices/ServiceVersions.php:            $version->addFormationVersion($iform);
src/GramcServices/ServiceVersions.php:        $em->persist($version);
src/GramcServices/ServiceVersions.php:        $em->flush();
src/GramcServices/ServiceVersions.php:    // TODO - Copié-presque-collé depuis DEMANDES DE FORMATION
src/GramcServices/ServiceVersions.php:     * c'est-à-dire toutes les ressources (TODO - Ajouter un champ "disponible")
src/GramcServices/ServiceVersions.php:        $em = $this->em;
src/GramcServices/ServiceVersions.php:        $sj = $this->sj;
src/GramcServices/ServiceVersions.php:            $sj->throwException('ServiceVersion:prepareRessources : version null');
src/GramcServices/ServiceVersions.php:        $ressources = $em->getRepository(Ressource::class)->findAll();
src/GramcServices/ServiceVersions.php:        foreach ($version->getDac() as $dac) {
src/GramcServices/ServiceVersions.php:            $k = $dac->getRessource()->getId();
src/GramcServices/ServiceVersions.php:            if (array_key_exists($r->getId(), $dacs)) {
src/GramcServices/ServiceVersions.php:                $dac = $dacs[$r->getId()];
src/GramcServices/ServiceVersions.php:        $sj = $this->sj;
src/GramcServices/ServiceVersions.php:        $em = $this->em;
src/GramcServices/ServiceVersions.php:        $sval = $this->vl;
src/GramcServices/ServiceVersions.php:        $form = $this->ff
src/GramcServices/ServiceVersions.php:                   ->createNamedBuilder('form_ressource', FormType::class, ['ressource' => $this->prepareRessources($version)])
src/GramcServices/ServiceVersions.php:                   ->add('ressource', CollectionType::class, [
src/GramcServices/ServiceVersions.php:                   ->getForm();
src/GramcServices/ServiceVersions.php:            if ($dac->getDemande() < 0) {
src/GramcServices/ServiceVersions.php:                $dac->setDemande(0);
src/GramcServices/ServiceVersions.php:            if ($dac->getAttribution() < 0) {
src/GramcServices/ServiceVersions.php:                $dac->setAttribution(0);
src/GramcServices/ServiceVersions.php:        $sj = $this->sj;
src/GramcServices/ServiceVersions.php:        $sr = $this->sr;
src/GramcServices/ServiceVersions.php:        $su = $this->su;
src/GramcServices/ServiceVersions.php:            $sj->throwException('ServiceVersion:modifierCollaborateurs : version null');
src/GramcServices/ServiceVersions.php:        foreach ($version->getCollaborateurVersion() as $cv) {
src/GramcServices/ServiceVersions.php:            $individu = $cv->getCollaborateur();
src/GramcServices/ServiceVersions.php:                $sj->errorMessage('ServiceVersion:modifierCollaborateurs : collaborateur null pour CollaborateurVersion '.
src/GramcServices/ServiceVersions.php:                         $cv->getId());
src/GramcServices/ServiceVersions.php:                // $individuForm = new IndividuForm($individu, $this->resp_peut_modif_collabs);
src/GramcServices/ServiceVersions.php:                // $users = $cv->getUser();
src/GramcServices/ServiceVersions.php:                $individuForm = new IndividuForm($sr->getNoms(), $individu);
src/GramcServices/ServiceVersions.php:                // $logins = $individuForm->getLogins();
src/GramcServices/ServiceVersions.php:                foreach ($sr->getServeurs() as $s) {
src/GramcServices/ServiceVersions.php:                    $u = $su->getUser($cv->getCollaborateur(), $version->getProjet(), $s);
src/GramcServices/ServiceVersions.php:                    $k = $s->getNom();
src/GramcServices/ServiceVersions.php:                    $logins[$k] = $u->getLogin();
src/GramcServices/ServiceVersions.php:                $individuForm->setLogins($logins);
src/GramcServices/ServiceVersions.php:                $individuForm->setResponsable($cv->getResponsable());
src/GramcServices/ServiceVersions.php:                $individuForm->setDeleted($cv->getDeleted());
src/GramcServices/ServiceVersions.php:                if (true == $individuForm->getResponsable()) {
src/GramcServices/ServiceVersions.php:     * Validation du formulaire des collaborateurs - Retourne true/false
src/GramcServices/ServiceVersions.php:     * params = $individu_forms: Retour de $sv->prepareCollaborateurs
src/GramcServices/ServiceVersions.php:        $resp_peut_modif_collabs = $this->resp_peut_modif_collabs;
src/GramcServices/ServiceVersions.php:            if ($individu_form->getDeleted()) {
src/GramcServices/ServiceVersions.php:                $logins = $individu_form->getLogins();
src/GramcServices/ServiceVersions.php:            if (null != $individu_form->getMail()
src/GramcServices/ServiceVersions.php:                && (null == $individu_form->getPrenom() || null == $individu_form->getNom())) {
src/GramcServices/ServiceVersions.php:                    null == $individu_form->getEtablissement()
src/GramcServices/ServiceVersions.php:                    || null == $individu_form->getLaboratoire()
src/GramcServices/ServiceVersions.php:                    || null == $individu_form->getStatut()
src/GramcServices/ServiceVersions.php:     *                   c-à-d un objet de type IndividuForm
src/GramcServices/ServiceVersions.php:        $em = $this->em;
src/GramcServices/ServiceVersions.php:        $sj = $this->sj;
src/GramcServices/ServiceVersions.php:        $su = $this->su;
src/GramcServices/ServiceVersions.php:        $sval = $this->vl;
src/GramcServices/ServiceVersions.php:        //    - Version active
src/GramcServices/ServiceVersions.php:        //    - Dernière version
src/GramcServices/ServiceVersions.php:        $projet = $vers->getProjet();
src/GramcServices/ServiceVersions.php:        $verder = $projet->getVersionDerniere();
src/GramcServices/ServiceVersions.php:        if (null != $projet->getVersionActive()) {
src/GramcServices/ServiceVersions.php:            $versions[] = $projet->getVersionActive();
src/GramcServices/ServiceVersions.php:        if (null != $projet->getVersionDerniere() && $projet->getVersionDerniere() != $projet->getVersionActive()) {
src/GramcServices/ServiceVersions.php:            $versions[] = $projet->getVersionDerniere();
src/GramcServices/ServiceVersions.php:                $id = $individu_form->getId();
src/GramcServices/ServiceVersions.php:                $srv_logins = $individu_form->getLogins();
src/GramcServices/ServiceVersions.php:                    $individu = $em->getRepository(Individu::class)->find($id);
src/GramcServices/ServiceVersions.php:                elseif (null != $individu_form->getMail()) {
src/GramcServices/ServiceVersions.php:                    $individu = $em->getRepository(Individu::class)->findOneBy(['mail' => $individu_form->getMail()]);
src/GramcServices/ServiceVersions.php:                        $sj->debugMessage(__METHOD__.':'.__LINE__.' mail='.$individu_form->getMail().' => trouvé '.$individu);
src/GramcServices/ServiceVersions.php:                        $sj->debugMessage(__METHOD__.':'.__LINE__.' mail='.$individu_form->getMail().' => Individu à créer !');
src/GramcServices/ServiceVersions.php:                // Pas de mail -> pas d'utilisateur !
src/GramcServices/ServiceVersions.php:                    $sj->errorMessage(__METHOD__.':'.__LINE__.' idIndividu '.$id.'du formulaire ne correspond pas à un utilisateur');
src/GramcServices/ServiceVersions.php:                    $sj->errorMessage(__METHOD__.':'.__LINE__.' individu_form est array '.Functions::show($individu_form));
src/GramcServices/ServiceVersions.php:                    $sj->errorMessage(__METHOD__.':'.__LINE__.' individu est array '.Functions::show($individu));
src/GramcServices/ServiceVersions.php:                } elseif (null != $individu && null != $individu_form->getMail() && $individu_form->getMail() != $individu->getMail()) {
src/GramcServices/ServiceVersions.php:                    $sj->errorMessage(__METHOD__.':'.__LINE__." l'adresse mail de l'utilisateur ".
src/GramcServices/ServiceVersions.php:                        $individu.' est incorrecte dans le formulaire :'.$individu_form->getMail().' != '.$individu->getMail());
src/GramcServices/ServiceVersions.php:                // --------------> Maintenant des cas réalistes !
src/GramcServices/ServiceVersions.php:                    if ($this->resp_peut_modif_collabs) {
src/GramcServices/ServiceVersions.php:                        $individu = $individu_form->modifyIndividu($individu, $sj, true);
src/GramcServices/ServiceVersions.php:                        $em->persist($individu);
src/GramcServices/ServiceVersions.php:                    // Il devient collaborateur: création d'un collaborateurVersion et peut-être de plusieurs User
src/GramcServices/ServiceVersions.php:                    if (!$version->isCollaborateur($individu)) {
src/GramcServices/ServiceVersions.php:                        $sj->infoMessage(__METHOD__.':'.__LINE__.' individu '.
src/GramcServices/ServiceVersions.php:                        $collaborateurVersion->setVersion($version);
src/GramcServices/ServiceVersions.php:                        $em->persist($collaborateurVersion);
src/GramcServices/ServiceVersions.php:                        $em->flush();
src/GramcServices/ServiceVersions.php:                        foreach ($em->getRepository(Serveur::class)->findAll() as $s) {
src/GramcServices/ServiceVersions.php:                            $u = $su->getUser($individu, $projet, $s);
src/GramcServices/ServiceVersions.php:                        $this->modifierLogins($projet, $individu, $individu_form->getLogins());
src/GramcServices/ServiceVersions.php:                        $sj->debugMessage(__METHOD__.':'.__LINE__.' individu '.
src/GramcServices/ServiceVersions.php:                        $this->modifierLogins($projet, $individu, $individu_form->getLogins());
src/GramcServices/ServiceVersions.php:                        if ($version->isResponsable($individu)) {
src/GramcServices/ServiceVersions.php:                            $this->setLaboResponsable($version, $individu);
src/GramcServices/ServiceVersions.php:                            $em->persist($version);
src/GramcServices/ServiceVersions.php:                            $em->flush();
src/GramcServices/ServiceVersions.php:                        $this->modifierLogins($projet, $individu, $individu_form->getLogins());
src/GramcServices/ServiceVersions.php:                    $em->flush(); // sans doute inutile
src/GramcServices/ServiceVersions.php:                elseif (null != $individu_form->getMail() && false == $individu_form->getDeleted()) {
src/GramcServices/ServiceVersions.php:                    $individu = $individu_form->nouvelIndividu($sval);
src/GramcServices/ServiceVersions.php:                        $collaborateurVersion->setVersion($version);
src/GramcServices/ServiceVersions.php:                        $sj->infoMessage(__METHOD__.':'.__LINE__.' nouvel utilisateur '.$individu.
src/GramcServices/ServiceVersions.php:                        $em->persist($individu);
src/GramcServices/ServiceVersions.php:                        $em->persist($collaborateurVersion);
src/GramcServices/ServiceVersions.php:                        $em->persist($version);
src/GramcServices/ServiceVersions.php:                        $em->flush();
src/GramcServices/ServiceVersions.php:                        $connected = $this->tok->getToken()->getUser();
src/GramcServices/ServiceVersions.php:                            $this->sid->sendInvitation($connected, $individu);
src/GramcServices/ServiceVersions.php:        $sj = $this->sj;
src/GramcServices/ServiceVersions.php:        $em = $this->em;
src/GramcServices/ServiceVersions.php:        $sr = $this->sr;
src/GramcServices/ServiceVersions.php:        $sval = $this->vl;
src/GramcServices/ServiceVersions.php:        if ($this->resp_peut_modif_collabs) {
src/GramcServices/ServiceVersions.php:        // TODO - mettre dans un objet Form ?
src/GramcServices/ServiceVersions.php:        // ceci est "presque" un copié-collé de VersionController:modifierCollaborateursAction !
src/GramcServices/ServiceVersions.php:        $collaborateur_form = $this->ff
src/GramcServices/ServiceVersions.php:                                   ->createNamedBuilder('form_projet', FormType::class, [
src/GramcServices/ServiceVersions.php:                                       'individus' => $this->prepareCollaborateurs($version, $sj, $sval),
src/GramcServices/ServiceVersions.php:                                   ->add('individus', CollectionType::class, [
src/GramcServices/ServiceVersions.php:                                       'attr' => ['class' => 'profil-horiz'],
src/GramcServices/ServiceVersions.php:                                       'entry_options' => ['text_fields' => $text_fields, 'srv_noms' => $sr->getNoms()],
src/GramcServices/ServiceVersions.php:                                   ->getForm();
src/GramcServices/ServiceVersions.php:        $em = $this->em;
src/GramcServices/ServiceVersions.php:        if (null == $version->getPrjTitre()) {
src/GramcServices/ServiceVersions.php:        $dacs = $version->getDac();
src/GramcServices/ServiceVersions.php:            if (0 != $d->getDemande()) {
src/GramcServices/ServiceVersions.php:        if (null == $version->getPrjThematique()) {
src/GramcServices/ServiceVersions.php:        if (null == $version->getCodeNom()) {
src/GramcServices/ServiceVersions.php:        if (null == $version->getCodeLicence()) {
src/GramcServices/ServiceVersions.php:        // TODO - Automatiser cela avec le formulaire !
src/GramcServices/ServiceVersions.php:        if (Projet::PROJET_DYN == $version->getProjet()->getTypeProjet()) {
src/GramcServices/ServiceVersions.php:            if (null == $version->getPrjExpose()) {
src/GramcServices/ServiceVersions.php:            if (count($version->getProjet()->getVersion()) > 1 && null == $version->getPrjJustifRenouv()) {
src/GramcServices/ServiceVersions.php:            if (null == $version->getPrjGenciCentre()
src/GramcServices/ServiceVersions.php:                || null == $version->getPrjGenciMachines()
src/GramcServices/ServiceVersions.php:                || null == $version->getPrjGenciHeures()
src/GramcServices/ServiceVersions.php:                || null == $version->getPrjGenciDari()) {
src/GramcServices/ServiceVersions.php:        if (Projet::PROJET_SESS == $version->getProjet()->getTypeProjet()) {
src/GramcServices/ServiceVersions.php:            if (null == $version->getPrjExpose()) {
src/GramcServices/ServiceVersions.php:            if (count($version->getProjet()->getVersion()) > 1 && null == $version->getPrjJustifRenouv()) {
src/GramcServices/ServiceVersions.php:            if (null == $version->getPrjGenciCentre()
src/GramcServices/ServiceVersions.php:                || null == $version->getPrjGenciMachines()
src/GramcServices/ServiceVersions.php:                || null == $version->getPrjGenciHeures()
src/GramcServices/ServiceVersions.php:                || null == $version->getPrjGenciDari()) {
src/GramcServices/ServiceVersions.php:        if (!$this->validateIndividuForms($this->prepareCollaborateurs($version), true)) {
src/GramcServices/Signal.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Signal.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Signal.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/Workflow/NoTransition.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/NoTransition.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/NoTransition.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/Workflow/Projet4/Projet4Transition.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Projet4/Projet4Transition.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Projet4/Projet4Transition.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/Workflow/Projet4/Projet4Transition.php:        4 == $projet->getTypeProjet() || throw new \InvalidArgumentException();
src/GramcServices/Workflow/Projet4/Projet4Transition.php:        if (Transition::FAST == false && $this->getPropageSignal()) {
src/GramcServices/Workflow/Projet4/Projet4Transition.php:            $versionWorkflow = new Version4Workflow($this->sn, $this->sj, $this->ss, $this->em);
src/GramcServices/Workflow/Projet4/Projet4Transition.php:            foreach ($projet->getVersion() as $version) {
src/GramcServices/Workflow/Projet4/Projet4Transition.php:                if (Etat::TERMINE != $version->getEtatVersion() && Etat::ANNULE != $version->getEtatVersion()) {
src/GramcServices/Workflow/Projet4/Projet4Transition.php:                    $output = $versionWorkflow->canExecute($this->getSignal(), $version);
src/GramcServices/Workflow/Projet4/Projet4Transition.php:                        $this->sj->warningMessage(__METHOD__.':'.__LINE__.' Version '.$version.' état '
src/GramcServices/Workflow/Projet4/Projet4Transition.php:                            .Etat::getLibelle($version->getEtatVersion()).' signal = '.Signal::getLibelle($this->getSignal()));
src/GramcServices/Workflow/Projet4/Projet4Transition.php:        4 == $projet->getTypeProjet() || throw new \InvalidArgumentException();
src/GramcServices/Workflow/Projet4/Projet4Transition.php:            $this->sj->debugMessage('>>> '.__FILE__.':'.__LINE__." $this $projet");
src/GramcServices/Workflow/Projet4/Projet4Transition.php:        if ($this->getPropageSignal()) {
src/GramcServices/Workflow/Projet4/Projet4Transition.php:            $signal = $this->getSignal();
src/GramcServices/Workflow/Projet4/Projet4Transition.php:            $versionWorkflow = new Version4Workflow($this->sn, $this->sj, $this->ss, $this->em);
src/GramcServices/Workflow/Projet4/Projet4Transition.php:            foreach ($projet->getVersion() as $version) {
src/GramcServices/Workflow/Projet4/Projet4Transition.php:                if (Etat::TERMINE != $version->getEtatVersion() && Etat::ANNULE != $version->getEtatVersion()) {
src/GramcServices/Workflow/Projet4/Projet4Transition.php:                    $return = $versionWorkflow->execute($signal, $version);
src/GramcServices/Workflow/Projet4/Projet4Transition.php:                        $this->sj->debugMessage('>>> '.__FILE__.':'.__LINE__." version=$version signal=$signal rtn=".Functions::show($rtn));
src/GramcServices/Workflow/Projet4/Projet4Transition.php:        $this->changeEtat($projet);
src/GramcServices/Workflow/Projet4/Projet4Transition.php:        $this->sendNotif($projet);
src/GramcServices/Workflow/Projet4/Projet4Transition.php:            $this->sj->debugMessage('<<< '.__FILE__.':'.__LINE__.' rtn = '.Functions::show($rtn));
src/GramcServices/Workflow/Projet4/Projet4Workflow.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Projet4/Projet4Workflow.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Projet4/Projet4Workflow.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/Workflow/Projet4/Projet4Workflow.php:        $this->workflowIdentifier = get_class($this);
src/GramcServices/Workflow/Projet4/Projet4Workflow.php:            ->addState(
src/GramcServices/Workflow/Projet4/Projet4Workflow.php:            ->addState(
src/GramcServices/Workflow/Projet4/TProjet4Transition.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Projet4/TProjet4Transition.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Projet4/TProjet4Transition.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/Workflow/Projet4/TProjet4Transition.php:        4 == $projet->getTypeProjet() || throw new \InvalidArgumentException();
src/GramcServices/Workflow/Projet4/TProjet4Transition.php:            $this->sj->debugMessage('>>> '.__FILE__.':'.__LINE__." $this $projet");
src/GramcServices/Workflow/Projet4/TProjet4Transition.php:        $this->__changeTetat($projet);
src/GramcServices/Workflow/Projet4/TProjet4Transition.php:        $this->sendNotif($projet);
src/GramcServices/Workflow/Projet4/TProjet4Transition.php:            $old_etat = $projet->getTetatProjet();
src/GramcServices/Workflow/Projet4/TProjet4Transition.php:            $projet->setTetatProjet($this->getEtat());
src/GramcServices/Workflow/Projet4/TProjet4Transition.php:            Functions::sauvegarder($projet, $this->em);
src/GramcServices/Workflow/Projet4/TProjet4Transition.php:            $this->sj->debugMessage('>>> '.__FILE__.':'.__LINE__.' projet '.$projet." est passé de l'état ".$old_etat.' à '.$projet->getTetatProjet().' suite au signal '.$this->getSignal());
src/GramcServices/Workflow/Projet4/TProjet4Transition.php:            $projet->setTetatProjet($this->getEtat());
src/GramcServices/Workflow/Projet4/TProjet4Transition.php:            Functions::sauvegarder($projet, $this->em);
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php:        $this->workflowIdentifier = get_class($this);
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php:            ->addState(
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php:            ->addState(
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php:            ->addState(
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php:            ->addState(
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php:            ->addState(
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php:            ->addState(
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php:            ->addState(
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php:            $this->sj->errorMessage(__METHOD__.':'.__LINE__.' getObjectState on object null');
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php:            // echo "bonjour " . $object->getId() ." Tetat=" . $object->getTetatProjet() . "\n";
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php:            return $object->getTetatProjet();
src/GramcServices/Workflow/Projet4/TProjet4Workflow.php:            $this->sj->errorMessage(__METHOD__.':'.__LINE__." getTetatProjet n'existe pas pour la class ".get_class($object));
src/GramcServices/Workflow/Rallonge4/Rallonge4Transition.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Rallonge4/Rallonge4Transition.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Rallonge4/Rallonge4Transition.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/Workflow/Rallonge4/Rallonge4Transition.php:        if (Etat::ACTIF === $this->getetat()) {
src/GramcServices/Workflow/Rallonge4/Rallonge4Transition.php:            foreach ($rallonge->getDar() as $d) {
src/GramcServices/Workflow/Rallonge4/Rallonge4Transition.php:                if ($d->getAttribution() > 0) {
src/GramcServices/Workflow/Rallonge4/Rallonge4Transition.php:                    $d->setTodof(true);
src/GramcServices/Workflow/Rallonge4/Rallonge4Transition.php:        $this->changeEtat($rallonge);
src/GramcServices/Workflow/Rallonge4/Rallonge4Transition.php:        $this->sendNotif($rallonge);
src/GramcServices/Workflow/Rallonge4/Rallonge4Workflow.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Rallonge4/Rallonge4Workflow.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Rallonge4/Rallonge4Workflow.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/Workflow/Rallonge4/Rallonge4Workflow.php:        if (null != $this->workflowIdentifier) {
src/GramcServices/Workflow/Rallonge4/Rallonge4Workflow.php:            ->addState(
src/GramcServices/Workflow/Rallonge4/Rallonge4Workflow.php:            ->addState(
src/GramcServices/Workflow/Rallonge4/Rallonge4Workflow.php:            ->addState(
src/GramcServices/Workflow/Rallonge4/Rallonge4Workflow.php:            ->addState(
src/GramcServices/Workflow/Rallonge4/Rallonge4Workflow.php:            ->addState(
src/GramcServices/Workflow/Rallonge4/Rallonge4Workflow.php:            ->addState(
src/GramcServices/Workflow/README.txt:1/ Qu'est-ce qu'un workflow ?
src/GramcServices/Workflow/README.txt:-----------------------------
src/GramcServices/Workflow/README.txt:   - des signaux (des entiers)
src/GramcServices/Workflow/README.txt:   - des états (des entiers)
src/GramcServices/Workflow/README.txt:-----------------------------
src/GramcServices/Workflow/README.txt:   - 1er niveau : les clés sont les états de l'objet
src/GramcServices/Workflow/README.txt:   - 2ème niveau: les clés sont les signaux qui peuvent déclencher des transitions vers un état donné
src/GramcServices/Workflow/State.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/State.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/State.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/Workflow/State.php: * State - Une classe pour décrire l'ensemble des transitions possibles
src/GramcServices/Workflow/State.php: *             $transitions = [ signal1->transition1, signal2->transition2, ... ]
src/GramcServices/Workflow/State.php:     *      $transitions     Un array de transitions (voir le format ci-dessus)
src/GramcServices/Workflow/State.php:        $this->stateIdentifier = $stateIdentifier;
src/GramcServices/Workflow/State.php:        $this->transitions = $transitions;
src/GramcServices/Workflow/State.php:        $output = ' STATE{'.Etat::getLibelle($this->stateIdentifier).' : ';
src/GramcServices/Workflow/State.php:        foreach ($this->transitions as $key => $value) {
src/GramcServices/Workflow/State.php:     * Existe-t-il une transition possible avec le signal $signal ?
src/GramcServices/Workflow/State.php:        if (isset($this->transitions[$signal])) {
src/GramcServices/Workflow/State.php:     * La transition avec le signal peut-elle être exécutée sur l'objet $objet ?
src/GramcServices/Workflow/State.php:        if ($this->hasTransition($signal)) {
src/GramcServices/Workflow/State.php:            return $this->transitions[$signal]->canExecute($object);
src/GramcServices/Workflow/State.php:            // echo ' State['.$this->stateIdentifier .'] signal ' . $signal . ' on ' . get_class ( $object ) . " n'existe pas ";
src/GramcServices/Workflow/State.php:        if ($this->hasTransition($signal)) {
src/GramcServices/Workflow/State.php:            // echo ' State['.$this->stateIdentifier .'] signal ' . $name . ' on ' . get_class ( $object ) . ' exécuté ';
src/GramcServices/Workflow/State.php:            // $msg = $this->transitions[$name] . ' -- on -- ' . $object;
src/GramcServices/Workflow/State.php:            // App::getLogger()->info($msg);
src/GramcServices/Workflow/State.php:            return $this->transitions[$signal]->execute($object);
src/GramcServices/Workflow/State.php:            // echo ' State['.$this->stateIdentifier .'] signal ' . $name . ' on ' . get_class ( $object ) . ' ne peux pas être exécuté !!!!!!!!!!!! ';
src/GramcServices/Workflow/Transition.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Transition.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Transition.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/Workflow/Transition.php: * Transition - Implémente une transition d'états
src/GramcServices/Workflow/Transition.php: *                         retourne true  -> la transition est exécutée
src/GramcServices/Workflow/Transition.php: *                         retourne false -> il y a eu un pb (voir le journal) la transition ne s'est pas faite (ou s'est faite en partie)
src/GramcServices/Workflow/Transition.php:    public const DEBUG = false;   // Activer - ou pas - le debug dans les transitions
src/GramcServices/Workflow/Transition.php:    public const FAST = false;   // TODO - VIRER TOUTE PROPAGATION DANS canExecute !!!
src/GramcServices/Workflow/Transition.php:    // TODO - Les services devraient être des variables de classe !
src/GramcServices/Workflow/Transition.php:        $this->sn = $sn;
src/GramcServices/Workflow/Transition.php:        $this->sj = $sj;
src/GramcServices/Workflow/Transition.php:        $this->ss = $ss;
src/GramcServices/Workflow/Transition.php:        $this->em = $em;
src/GramcServices/Workflow/Transition.php:        return $this->etat;
src/GramcServices/Workflow/Transition.php:        return $this->signal;
src/GramcServices/Workflow/Transition.php:        return $this->mail;
src/GramcServices/Workflow/Transition.php:        return $this->propage_signal;
src/GramcServices/Workflow/Transition.php:        $output = $reflect->getShortName().':etat='.Etat::getLibelle($this->etat);
src/GramcServices/Workflow/Transition.php:        $output .= ', signal='.Signal::getLibelle($this->signal);
src/GramcServices/Workflow/Transition.php:        if ([] != $this->mail) {
src/GramcServices/Workflow/Transition.php:            $output .= ', mail='.Functions::show($this->mail);
src/GramcServices/Workflow/Transition.php:        if ($this->propage_signal) {
src/GramcServices/Workflow/Transition.php:     * NB - L'objet doit avoir une méthode appelée getObjectState
src/GramcServices/Workflow/Transition.php:     * TODO- $object devrait sans doute implémenter un interface mais comment ça se
src/GramcServices/Workflow/Transition.php:            $old_etat = $object->getObjectState();
src/GramcServices/Workflow/Transition.php:            $object->setObjectState($this->getEtat());
src/GramcServices/Workflow/Transition.php:            Functions::sauvegarder($object, $this->em);
src/GramcServices/Workflow/Transition.php:            $classe = $reflect->getShortName();
src/GramcServices/Workflow/Transition.php:            $this->sj->debugMessage('>>> '.__FILE__.':'.__LINE__." $classe ".$object." est passé de l'état ".$old_etat.' à '.$object->getObjectState().' suite au signal '.$this->getSignal());
src/GramcServices/Workflow/Transition.php:            $object->setObjectState($this->getEtat());
src/GramcServices/Workflow/Transition.php:            Functions::sauvegarder($object, $this->em);
src/GramcServices/Workflow/Transition.php:        foreach ($this->getMail() as $mail_role => $template) {
src/GramcServices/Workflow/Transition.php:            $users = $this->sn->mailUsers([$mail_role], $object);
src/GramcServices/Workflow/Transition.php:            $params['liste_mail_destinataires'] = implode(',', $this->sn->usersToMail($users));
src/GramcServices/Workflow/Transition.php:            $this->sn->sendMessage(
src/GramcServices/Workflow/Transition.php:                'notification/'.$template.'-sujet.html.twig',
src/GramcServices/Workflow/Transition.php:                'notification/'.$template.'-contenu.html.twig',
src/GramcServices/Workflow/Version4/Version4Transition.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Version4/Version4Transition.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Version4/Version4Transition.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/Workflow/Version4/Version4Transition.php:        if (Transition::FAST == false && $this->getPropageSignal()) {
src/GramcServices/Workflow/Version4/Version4Transition.php:            $rallonges = $version->getRallonge();
src/GramcServices/Workflow/Version4/Version4Transition.php:                $workflow = new Rallonge4Workflow($this->sn, $this->sj, $this->ss, $this->em);
src/GramcServices/Workflow/Version4/Version4Transition.php:                    $rtn = $rtn && $workflow->canExecute($this->getSignal(), $rallonge);
src/GramcServices/Workflow/Version4/Version4Transition.php:            $this->sj->debugMessage('>>> '.__FILE__.':'.__LINE__." $this $version");
src/GramcServices/Workflow/Version4/Version4Transition.php:        if ($this->getPropageSignal()) {
src/GramcServices/Workflow/Version4/Version4Transition.php:                $this->sj->debugMessage('<<< '.__FILE__.':'.__LINE__.' Propagations aux rallonges ('.count($rallonges).')');
src/GramcServices/Workflow/Version4/Version4Transition.php:            $rallonges = $version->getRallonge();
src/GramcServices/Workflow/Version4/Version4Transition.php:                $workflow = new Rallonge4Workflow($this->sn, $this->sj, $this->ss, $this->em);
src/GramcServices/Workflow/Version4/Version4Transition.php:                    $output = $workflow->execute($this->getSignal(), $rallonge);
src/GramcServices/Workflow/Version4/Version4Transition.php:        if ($this->getPropageSignal()) {
src/GramcServices/Workflow/Version4/Version4Transition.php:                $this->sj->debugMessage('<<< '.__FILE__.':'.__LINE__.' Propagations au projet');
src/GramcServices/Workflow/Version4/Version4Transition.php:            $projet = $version->getProjet();
src/GramcServices/Workflow/Version4/Version4Transition.php:            $workflow = new ProjetWorkflow($this->sn, $this->sj, $this->ss, $this->em);
src/GramcServices/Workflow/Version4/Version4Transition.php:            $output = $workflow->execute($this->getSignal(), $projet);
src/GramcServices/Workflow/Version4/Version4Transition.php:        if (Etat::ACTIF === $this->getetat()) {
src/GramcServices/Workflow/Version4/Version4Transition.php:            foreach ($version->getDac() as $d) {
src/GramcServices/Workflow/Version4/Version4Transition.php:                if ($d->getAttribution() > 0) {
src/GramcServices/Workflow/Version4/Version4Transition.php:                    $d->setTodof(true);
src/GramcServices/Workflow/Version4/Version4Transition.php:        $this->changeEtat($version);
src/GramcServices/Workflow/Version4/Version4Transition.php:        $this->sendNotif($version);
src/GramcServices/Workflow/Version4/Version4Transition.php:            $this->sj->debugMessage('>>> '.__FILE__.':'.__LINE__.' rtn = '.Functions::show($rtn));
src/GramcServices/Workflow/Version4/Version4Workflow.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Version4/Version4Workflow.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Version4/Version4Workflow.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/Workflow/Version4/Version4Workflow.php:        $this->workflowIdentifier = get_class($this);
src/GramcServices/Workflow/Version4/Version4Workflow.php:            ->addState(
src/GramcServices/Workflow/Version4/Version4Workflow.php:            ->addState(
src/GramcServices/Workflow/Version4/Version4Workflow.php:            ->addState(
src/GramcServices/Workflow/Version4/Version4Workflow.php:            ->addState(
src/GramcServices/Workflow/Version4/Version4Workflow.php:             ->addState(
src/GramcServices/Workflow/Workflow.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Workflow.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/GramcServices/Workflow/Workflow.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/GramcServices/Workflow/Workflow.php: * Workflow - Implémente des changements d'état entre objets
src/GramcServices/Workflow/Workflow.php:        $this->workflowIdentifier = get_class($this);
src/GramcServices/Workflow/Workflow.php:        return $this->workflowIdentifier;
src/GramcServices/Workflow/Workflow.php:        return $reflect->getShortName();
src/GramcServices/Workflow/Workflow.php:            $this->sj->errorMessage(__METHOD__.':'.__LINE__.' getObjectState on object null');
src/GramcServices/Workflow/Workflow.php:            return $object->getObjectState($this->workflowIdentifier);
src/GramcServices/Workflow/Workflow.php:            $this->sj->errorMessage(__METHOD__.':'.__LINE__." getObjectState n'existe pas pour la class ".get_class($object));
src/GramcServices/Workflow/Workflow.php:     * Ajoute un état avec ses transitions - Appelé par les constructeurs des classes filles
src/GramcServices/Workflow/Workflow.php:        $this->addStateObject($stateConstant, new State($stateConstant, $transition_array));
src/GramcServices/Workflow/Workflow.php:            $t->setServices($this->sn, $this->sj, $this->ss, $this->em);
src/GramcServices/Workflow/Workflow.php:        $this->states[$stateConstant] = $stateObject;
src/GramcServices/Workflow/Workflow.php:        if (isset($this->states[$stateConstant])) {
src/GramcServices/Workflow/Workflow.php:            return $this->states[$stateConstant];
src/GramcServices/Workflow/Workflow.php:            $this->sj->warningMessage(__METHOD__.' on a null object dans '.$this->workflowIdentifier);
src/GramcServices/Workflow/Workflow.php:        $state = $this->getObjectState($object);
src/GramcServices/Workflow/Workflow.php:        if ($this->hasState($state)) {
src/GramcServices/Workflow/Workflow.php:            return $this->getState($state)->execute($signal, $object);
src/GramcServices/Workflow/Workflow.php:                    .'('.$state.") n'existe pas dans ".$this->getWorkflowIdentifier()."\n";
src/GramcServices/Workflow/Workflow.php:            $this->sj->warningMessage(__METHOD__.':'.__LINE__.' état '.Etat::getLibelle($state)
src/GramcServices/Workflow/Workflow.php:                    .'('.$state.") n'existe pas dans ".$this->getWorkflowIdentifier());
src/GramcServices/Workflow/Workflow.php:        $state = $this->getObjectState($object);
src/GramcServices/Workflow/Workflow.php:        if ($this->hasState($state)) {
src/GramcServices/Workflow/Workflow.php:            return $this->states[$state]->canExecute($transition_code, $object);
src/GramcServices/Workflow/Workflow.php:        return isset($this->states[$state]);
src/GramcServices/Workflow/Workflow.php:        $output = 'workflow('.$this->getWorkflowIdentifier().':';
src/GramcServices/Workflow/Workflow.php:        foreach ($this->states as $state) {
src/GramcServices/Workflow/Workflow.php:            $output .= $state->__toString().',';
src/Interfaces/Demande.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Interfaces/Demande.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Interfaces/Demande.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Kernel.php:        $container->import('../config/{packages}/*.yaml');
src/Kernel.php:        $container->import('../config/{packages}/'.$this->environment.'/*.yaml');
src/Kernel.php:            $container->import('../config/services.yaml');
src/Kernel.php:            $container->import('../config/{services}_'.$this->environment.'.yaml');
src/Kernel.php:            (require $path)($container->withPath($path), $this);
src/Kernel.php:        $routes->import('../config/{routes}/'.$this->environment.'/*.yaml');
src/Kernel.php:        $routes->import('../config/{routes}/*.yaml');
src/Kernel.php:            $routes->import('../config/routes.yaml');
src/Kernel.php:            (require $path)($routes->withPath($path), $this);
src/Kernel.php.S:        $contents = require $this->getProjectDir().'/config/bundles.php';
src/Kernel.php.S:            if ($envs[$this->environment] ?? $envs['all'] ?? false) {
src/Kernel.php.S:        $container->addResource(new FileResource($this->getProjectDir().'/config/bundles.php'));
src/Kernel.php.S:        $container->setParameter('container.dumper.inline_class_loader', \PHP_VERSION_ID < 70400 || $this->debug);
src/Kernel.php.S:        $container->setParameter('container.dumper.inline_factories', true);
src/Kernel.php.S:        $confDir = $this->getProjectDir().'/config';
src/Kernel.php.S:        $loader->load($confDir.'/{packages}/*'.self::CONFIG_EXTS, 'glob');
src/Kernel.php.S:        $loader->load($confDir.'/{packages}/'.$this->environment.'/*'.self::CONFIG_EXTS, 'glob');
src/Kernel.php.S:        $loader->load($confDir.'/{services}'.self::CONFIG_EXTS, 'glob');
src/Kernel.php.S:        $loader->load($confDir.'/{services}_'.$this->environment.self::CONFIG_EXTS, 'glob');
src/Kernel.php.S:        $confDir = $this->getProjectDir().'/config';
src/Kernel.php.S:        $routes->import($confDir.'/{routes}/'.$this->environment.'/*'.self::CONFIG_EXTS, '/', 'glob');
src/Kernel.php.S:        $routes->import($confDir.'/{routes}/*'.self::CONFIG_EXTS, '/', 'glob');
src/Kernel.php.S:        $routes->import($confDir.'/{routes}'.self::CONFIG_EXTS, '/', 'glob');
src/Repository/CollaborateurprojettestRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/CollaborateurprojettestRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/CollaborateurprojettestRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/CollaborateurVersionRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/CollaborateurVersionRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/CollaborateurVersionRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/CollaborateurVersionRepository.php:        $collaborateurVersion = $this->getEntityManager()
src/Repository/CollaborateurVersionRepository.php:         ->createQuery('SELECT partial v.{id}  FROM App:CollaborateurVersion v JOIN App:Projet p WHERE ( v.responsable = true AND  v.version = p.versionDerniere AND p = :projet)')
src/Repository/CollaborateurVersionRepository.php:        ->setParameter('projet', $projet)
src/Repository/CollaborateurVersionRepository.php:        ->getOneOrNullResult();
src/Repository/CollaborateurVersionRepository.php:            return $collaborateurVersion->getCollaborateur();
src/Repository/CollaborateurVersionRepository.php:        $output = $this->getEntityManager()
src/Repository/CollaborateurVersionRepository.php:         ->createQuery('SELECT i  FROM App:Individu i, App:CollaborateurVersion cv JOIN cv.version v JOIN'
src/Repository/CollaborateurVersionRepository.php:        ->setParameter('projet', $projet)
src/Repository/CollaborateurVersionRepository.php:        ->setParameter('termine', Etat::getEtat('TERMINE'))
src/Repository/CollaborateurVersionRepository.php:        ->setParameter('annule', Etat::getEtat('ANNULE'))
src/Repository/CollaborateurVersionRepository.php:        ->getResult();
src/Repository/CollaborateurVersionRepository.php:            $collaborateurs[$user->getIdIndividu()] = $user;
src/Repository/ComptaRepository.php:    /* -------- FONCTIONS DE HAUT NIVEAU -------- */
src/Repository/ComptaRepository.php:     * Par défaut, on s'intéresse aux lignes de type 2, c'est-à-dire "group"
src/Repository/ComptaRepository.php:     * Par défaut, on ne s'intéresse qu'aux ressources de type calcul, c-à-d cpu, gpu
src/Repository/ComptaRepository.php:        $debut = new \DateTime($annee.'-01-01');
src/Repository/ComptaRepository.php:        $fin = new \DateTime($annee.'-12-31');
src/Repository/ComptaRepository.php:            throw new \Exception("ERREUR - Fonction conso: type vaut $type, devrait être 1 ou 2");
src/Repository/ComptaRepository.php:        $db_data = $this->getEntityManager()->createQuery(
src/Repository/ComptaRepository.php:        ->setParameter('loginname', strtolower($loginname))
src/Repository/ComptaRepository.php:        ->setParameter('debut', $debut)
src/Repository/ComptaRepository.php:        ->setParameter('fin', $fin)
src/Repository/ComptaRepository.php:        ->setParameter('type', strval($type))
src/Repository/ComptaRepository.php:        ->getResult();
src/Repository/ComptaRepository.php:     * Par défaut, on s'intéresse aux lignes de type 2, c'est-à-dire "group"
src/Repository/ComptaRepository.php:            return $this->consoResPrj($loginname, $ressource, $annee);
src/Repository/ComptaRepository.php:            return $this->consoResPrjUser($loginname, $ressource, $annee);
src/Repository/ComptaRepository.php:        // TODO - Une exception ?
src/Repository/ComptaRepository.php:     * On ne s'intéresse qu'aux lignes de type 2, c'est-à-dire "group"
src/Repository/ComptaRepository.php:     * On ne s'intéresse qu'aux ressources de type calcul, c-à-d cpu, gpu
src/Repository/ComptaRepository.php:        $conso_cpu = $this->consoResPrjDate($projet, ['ress' => 'cpu'], $date);
src/Repository/ComptaRepository.php:        // //echo('<pre>'.$projet."###".$date->format('Y-m-d').'</pre>');
src/Repository/ComptaRepository.php:            $cpu = intval($conso_cpu[0]->getConso());
src/Repository/ComptaRepository.php:        $conso_gpu = $this->consoResPrjDate($projet, ['ress' => 'gpu'], $date);
src/Repository/ComptaRepository.php:            $gpu = intval($conso_gpu[0]->getConso());
src/Repository/ComptaRepository.php:        $debut = new \DateTime($annee.'-01-01');
src/Repository/ComptaRepository.php:        $fin = new \DateTime($nannee.'-01-02');
src/Repository/ComptaRepository.php:        $db_data = $this->getEntityManager()->createQuery(
src/Repository/ComptaRepository.php:        ->setParameter('debut', $debut)
src/Repository/ComptaRepository.php:        ->setParameter('fin', $fin)
src/Repository/ComptaRepository.php:        ->setParameter('ressource', $ressource)
src/Repository/ComptaRepository.php:        ->getResult();
src/Repository/ComptaRepository.php:    /* -------- FONCTIONS DE BAS NIVEAU -------- */
src/Repository/ComptaRepository.php:        $debut = new \DateTime($annee.'-01-01');
src/Repository/ComptaRepository.php:        $fin = new \DateTime($annee.'-12-31');
src/Repository/ComptaRepository.php:        $db_data = $this->getEntityManager()->createQuery(
src/Repository/ComptaRepository.php:        ->setParameter('projet', strtolower($id_projet))
src/Repository/ComptaRepository.php:        ->setParameter('debut', $debut)
src/Repository/ComptaRepository.php:        ->setParameter('res', $ressource['ress'])
src/Repository/ComptaRepository.php:        ->setParameter('fin', $fin)
src/Repository/ComptaRepository.php:        ->getResult();
src/Repository/ComptaRepository.php:        // //echo('<pre>#'.strtolower($projet->getIdProjet())."#".$date->format('Y-m-d')."#".$ressource['ress']."#</pre>");
src/Repository/ComptaRepository.php:        // echo('<pre>#--->'.$projet->getIdProjet()."#".print_r($ressource)."#".$date->format('Y-m-d').'</pre>');
src/Repository/ComptaRepository.php:        $db_data = $this->getEntityManager()->createQuery(
src/Repository/ComptaRepository.php:        // ->setParameter ('projet', strtolower($projet->getIdProjet() ) )
src/Repository/ComptaRepository.php:        ->setParameter('projet', $projet)
src/Repository/ComptaRepository.php:        ->setParameter('date', $date)
src/Repository/ComptaRepository.php:        ->setParameter('res', $ressource['ress'])
src/Repository/ComptaRepository.php:        ->getResult();
src/Repository/ComptaRepository.php:        $debut = new \DateTime($annee.'-01-01');
src/Repository/ComptaRepository.php:        $fin = new \DateTime($annee.'-12-31');
src/Repository/ComptaRepository.php:        $db_data = $this->getEntityManager()->createQuery(
src/Repository/ComptaRepository.php:        ->setParameter('loginname', strtolower($user))
src/Repository/ComptaRepository.php:        ->setParameter('debut', $debut)
src/Repository/ComptaRepository.php:        ->setParameter('res', $ressource['ress'])
src/Repository/ComptaRepository.php:        ->setParameter('fin', $fin)
src/Repository/ComptaRepository.php:        ->getResult();
src/Repository/ComptaRepository.php:        $db_data = $this->getEntityManager()->createQuery(
src/Repository/ComptaRepository.php:        ->setParameter('loginname', lcfirst($projet->getIdProjet()))
src/Repository/ComptaRepository.php:        ->setParameter('date', $date)
src/Repository/ComptaRepository.php:        ->getResult();
src/Repository/ComptaRepository.php:        $em = $this->getEntityManager();
src/Repository/ComptaRepository.php:        $rvl = $em->createQuery(
src/Repository/ComptaRepository.php:             ->setParameter('loginname', $loginname)
src/Repository/ComptaRepository.php:             ->setParameter('date', $date)
src/Repository/ComptaRepository.php:             ->getResult();
src/Repository/ComptaRepository.php:        $em = $this->getEntityManager();
src/Repository/ComptaRepository.php:        $rvl = $em->createQuery(
src/Repository/ComptaRepository.php:            ->setParameter('date', $date)
src/Repository/ComptaRepository.php:            ->getResult();
src/Repository/CompteactivationRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/CompteactivationRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/CompteactivationRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/EtablissementRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/EtablissementRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/EtablissementRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/ExpertiseRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/ExpertiseRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/ExpertiseRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/ExpertiseRepository.php:        return $this->getEntityManager()
src/Repository/ExpertiseRepository.php:         ->createQuery('SELECT count(e) FROM App:Expertise e JOIN App:Version v WHERE ( v.etatVersion = :edition_expertise  AND e.version = v AND e.expert = :expert )')
src/Repository/ExpertiseRepository.php:        ->setParameter('edition_expertise', Etat::getEtat('EDITION_EXPERTISE'))
src/Repository/ExpertiseRepository.php:        ->setParameter('expert', $expert)
src/Repository/ExpertiseRepository.php:        ->getSingleScalarResult();
src/Repository/ExpertiseRepository.php:        return $this->getEntityManager()
src/Repository/ExpertiseRepository.php:         ->createQuery($dql)
src/Repository/ExpertiseRepository.php:         ->setParameter('session', $session)
src/Repository/ExpertiseRepository.php:         ->setParameter('thematique', $thematique)
src/Repository/ExpertiseRepository.php:         ->getResult();
src/Repository/ExpertiseRepository.php:        return $this->getEntityManager()
src/Repository/ExpertiseRepository.php:         ->createQuery($dql)
src/Repository/ExpertiseRepository.php:         ->setParameter('thematique', $thematique)
src/Repository/ExpertiseRepository.php:         ->getResult();
src/Repository/ExpertiseRepository.php:    // 14-10-2020 -> Ne garde que les expertises pour lesquelles definitif vaut 0
src/Repository/ExpertiseRepository.php:        return $this->getEntityManager()
src/Repository/ExpertiseRepository.php:         ->createQuery($dql)
src/Repository/ExpertiseRepository.php:         ->setParameter('session', $session)
src/Repository/ExpertiseRepository.php:         ->setParameter('expert', $expert)
src/Repository/ExpertiseRepository.php:         ->getResult();
src/Repository/ExpertiseRepository.php:        return $this->getEntityManager()
src/Repository/ExpertiseRepository.php:         ->createQuery($dql)
src/Repository/ExpertiseRepository.php:         ->setParameter('expert', $expert)
src/Repository/ExpertiseRepository.php:         ->setParameter('annule', Etat::ANNULE)
src/Repository/ExpertiseRepository.php:         ->getResult();
src/Repository/ExpertiseRepository.php:    // NOTE - Je fais deux requêtes dql, pour gérer versions ET rallonges
src/Repository/ExpertiseRepository.php:        $v = $this->getEntityManager()
src/Repository/ExpertiseRepository.php:                 ->createQuery($dqlv)
src/Repository/ExpertiseRepository.php:                 ->setParameter('edition_expertise', Etat::EDITION_EXPERTISE)
src/Repository/ExpertiseRepository.php:                 ->getResult();
src/Repository/ExpertiseRepository.php:        $r = $this->getEntityManager()
src/Repository/ExpertiseRepository.php:                 ->createQuery($dqlr)
src/Repository/ExpertiseRepository.php:                 ->setParameter('edition_expertise', Etat::EDITION_EXPERTISE)
src/Repository/ExpertiseRepository.php:                 ->getResult();
src/Repository/ExpertiseRepository.php:        return $this->getEntityManager()
src/Repository/ExpertiseRepository.php:         ->createQuery($dql)
src/Repository/ExpertiseRepository.php:         ->setParameter('version', $version)
src/Repository/ExpertiseRepository.php:         ->setParameter('expert', $expert)
src/Repository/ExpertiseRepository.php:         ->getResult();
src/Repository/FormationRepository.php:        return $this->createQueryBuilder('f')
src/Repository/FormationRepository.php:                    ->where('f.startDate <= ?1 and ?1 <= f.endDate')
src/Repository/FormationRepository.php:                    ->orderBy('f.numeroForm', 'ASC')
src/Repository/FormationRepository.php:                    ->setParameter(1, $today)
src/Repository/FormationRepository.php:                    ->getQuery()
src/Repository/FormationRepository.php:                    ->getResult();
src/Repository/FormationVersionRepository.php:        return $this->createQueryBuilder('fv')
src/Repository/FormationVersionRepository.php:            ->select('fv, sum(fv.nombre) as nb')
src/Repository/FormationVersionRepository.php:            ->groupBy('fv.formation')
src/Repository/FormationVersionRepository.php:            ->getQuery()
src/Repository/FormationVersionRepository.php:            ->getResult();
src/Repository/IndividuRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/IndividuRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/IndividuRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/IndividuRepository.php:        $users = $this->getEntityManager()
src/Repository/IndividuRepository.php:                   ->createQuery('SELECT DISTINCT u FROM App:Individu u, App:Sso s WHERE ( u.admin = true OR u.expert = true OR u.president = true OR u.desactive = true OR s.individu = u.idIndividu )')
src/Repository/IndividuRepository.php:                   ->getResult();
src/Repository/IndividuRepository.php:        return $this->getEntityManager()
src/Repository/IndividuRepository.php:                   ->createQuery('SELECT DISTINCT u FROM App:Individu u  WHERE ( u.admin = true OR u.expert = true OR u.president = true  )')
src/Repository/IndividuRepository.php:                   ->getResult();
src/Repository/IndividuRepository.php:        return $this->getEntityManager()
src/Repository/IndividuRepository.php:                   ->createQuery('SELECT DISTINCT u FROM App:Individu u  WHERE ( u.valideur = true )')
src/Repository/IndividuRepository.php:                   ->getResult();
src/Repository/IndividuRepository.php:        return $this->createQueryBuilder('l')
src/Repository/IndividuRepository.php:                        ->select('COUNT(l)')
src/Repository/IndividuRepository.php:                        ->getQuery()
src/Repository/IndividuRepository.php:                        ->getSingleScalarResult();
src/Repository/IndividuRepository.php:        $query = $this->getEntityManager()
src/Repository/IndividuRepository.php:         ->createQuery($dql)
src/Repository/IndividuRepository.php:         ->setParameter('responsable', $responsable);
src/Repository/IndividuRepository.php:        return $query->getResult();
src/Repository/IndividuRepository.php:            return $this->getEntityManager()
src/Repository/IndividuRepository.php:            ->createQuery('SELECT u.mail FROM App:Individu u WHERE u.mail LIKE :key')
src/Repository/IndividuRepository.php:            ->setParameter('key', '%'.$mail.'%')
src/Repository/IndividuRepository.php:            ->getResult();
src/Repository/IndividuRepository.php:        return $this->getEntityManager()
src/Repository/IndividuRepository.php:            ->createQuery('SELECT u FROM App:Individu u WHERE u.creationStamp <= :date')
src/Repository/IndividuRepository.php:            ->setParameter('date', $date)
src/Repository/IndividuRepository.php:            ->getResult();
src/Repository/JournalRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/JournalRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/JournalRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/JournalRepository.php:        return $this->getEntityManager()
src/Repository/JournalRepository.php:                   ->createQuery('SELECT j FROM App:Journal j WHERE ( j.stamp <= :fin AND j.stamp >= :debut AND j.niveau <= :niveau) ORDER BY j.stamp DESC ')
src/Repository/JournalRepository.php:                   ->setParameter('fin', $fin)
src/Repository/JournalRepository.php:                   ->setParameter('debut', $debut)
src/Repository/JournalRepository.php:                   ->setParameter('niveau', $niveau)
src/Repository/JournalRepository.php:                   ->getResult();
src/Repository/JournalRepository.php:        return $this->getEntityManager()
src/Repository/JournalRepository.php:            ->createQuery('SELECT j FROM App:Journal j WHERE j.stamp <= :date')
src/Repository/JournalRepository.php:            ->setParameter('date', $date)
src/Repository/JournalRepository.php:            ->getResult();
src/Repository/LaboratoireRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/LaboratoireRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/LaboratoireRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/LaboratoireRepository.php:        $query = $this->getEntityManager()->createQuery($dql);
src/Repository/LaboratoireRepository.php:        return $query->getResult();
src/Repository/LaboratoireRepository.php:        $query = $this->getEntityManager()->createQuery($dql);
src/Repository/LaboratoireRepository.php:        return $query->setParameter('admname', $admname)->getResult();
src/Repository/ParametresRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/ParametresRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/ParametresRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/ProjetRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/ProjetRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/ProjetRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/ProjetRepository.php:        return $this->getEntityManager()
src/Repository/ProjetRepository.php:                   ->createQuery('SELECT p FROM App:Projet p WHERE ( NOT p.etatProjet = :termine AND NOT p.etatProjet = :annule)')
src/Repository/ProjetRepository.php:                   ->setParameter('termine', Etat::getEtat($etat))
src/Repository/ProjetRepository.php:                   ->setParameter('annule', Etat::getEtat('ANNULE'))
src/Repository/ProjetRepository.php:                   ->getResult();
src/Repository/ProjetRepository.php:        return $this->getEntityManager()
src/Repository/ProjetRepository.php:         ->createQuery('SELECT count(p) FROM App:Projet p WHERE ( p.etatProjet = :etat )')
src/Repository/ProjetRepository.php:        ->setParameter('etat', Etat::getEtat($etat))
src/Repository/ProjetRepository.php:        ->getSingleScalarResult();
src/Repository/ProjetRepository.php:        return $this->getEntityManager()
src/Repository/ProjetRepository.php:         ->createQuery('SELECT count(p) FROM App:Projet p WHERE ( p.etatProjet = :etat AND p.typeProjet = :type )')
src/Repository/ProjetRepository.php:        ->setParameter('etat', Etat::getEtat($etat))
src/Repository/ProjetRepository.php:        ->setParameter('type', $type)
src/Repository/ProjetRepository.php:        ->getSingleScalarResult();
src/Repository/ProjetRepository.php:            return $this->countEtatPrj($etat);
src/Repository/ProjetRepository.php:            return $this->countEtatPrjType($etat, $type);
src/Repository/ProjetRepository.php:        return $this->countEtat($etat, '2');
src/Repository/ProjetRepository.php:        return $this->getEntityManager()
src/Repository/ProjetRepository.php:         ->createQuery('SELECT count(p) FROM App:Projet p WHERE ( NOT p.etatProjet = :etat )')
src/Repository/ProjetRepository.php:        ->setParameter('etat', Etat::getEtat('ANNULE'))
src/Repository/ProjetRepository.php:        ->getSingleScalarResult();
src/Repository/ProjetRepository.php:        return $this->getEntityManager()
src/Repository/ProjetRepository.php:         ->createQuery('SELECT count(p) FROM App:Projet p WHERE ( NOT p.etatProjet = :etat AND p.typeProjet = :type)')
src/Repository/ProjetRepository.php:        ->setParameter('etat', Etat::getEtat('ANNULE'))
src/Repository/ProjetRepository.php:        ->setParameter(':type', $type)
src/Repository/ProjetRepository.php:        ->getSingleScalarResult();
src/Repository/ProjetRepository.php:            return $this->countAllPrj();
src/Repository/ProjetRepository.php:            return $this->countAllPrjType($type);
src/Repository/ProjetRepository.php:        return $this->countAll('2');
src/Repository/ProjetRepository.php:        $query = $this->getEntityManager()
src/Repository/ProjetRepository.php:            ->createQuery($dql)
src/Repository/ProjetRepository.php:            ->setParameter('id_individu', $id_individu)
src/Repository/ProjetRepository.php:            ->setParameter('termine', Etat::getEtat('TERMINE'))
src/Repository/ProjetRepository.php:            ->setParameter('annule', Etat::getEtat('ANNULE'));
src/Repository/ProjetRepository.php:            $query->setParameter('responsable', true === $responsable ? 1 : 0);
src/Repository/ProjetRepository.php:            $query->setParameter('non_renouvelable', Etat::getEtat('NON_RENOUVELABLE'));
src/Repository/ProjetRepository.php:        return $query->getResult();
src/Repository/ProjetRepository.php:        return $this->getEntityManager()
src/Repository/ProjetRepository.php:             ->createQuery($dql)
src/Repository/ProjetRepository.php:             ->setParameter('id_individu', $id_individu)
src/Repository/ProjetRepository.php:             ->setParameter('etat', $code_etat)
src/Repository/ProjetRepository.php:             ->getResult();
src/Repository/ProjetRepository.php:     * params: $annee -> L'année (2 chiffres: 17, 18, 19)
src/Repository/ProjetRepository.php:     *         $prefix-> Le type (cf. le paramètre prj_prefix)
src/Repository/ProjetRepository.php:        $em = $this->getEntityManager();
src/Repository/ProjetRepository.php:        $projetIds = $em->createQuery($dql)
src/Repository/ProjetRepository.php:                         ->setParameter('key', $prefix.$annee.'%')
src/Repository/ProjetRepository.php:                         ->getResult();
src/Repository/ProjetRepository.php:            return intval(substr($num, -3));
src/Repository/ProjetRepository.php:     * NOTE - Type de projet = 2
src/Repository/ProjetRepository.php:        return $this->getEntityManager()
src/Repository/ProjetRepository.php:         ->createQuery($dql)
src/Repository/ProjetRepository.php:         ->setParameter('individu', $individu)
src/Repository/ProjetRepository.php:         ->setParameter('termine', Etat::getEtat('TERMINE'))
src/Repository/ProjetRepository.php:         ->setParameter('annule', Etat::getEtat('ANNULE'))
src/Repository/ProjetRepository.php:         ->setParameter('type', '2')
src/Repository/ProjetRepository.php:         ->setParameter('responsable', 1)
src/Repository/ProjetRepository.php:         ->getSingleScalarResult();
src/Repository/ProjetRepository.php:    // TODO - NE MARCHE PAS AVEC PREFIX DIFFERENT DE P !!!
src/Repository/ProjetRepository.php:        $subAnnee = substr(strval($annee), -2);
src/Repository/ProjetRepository.php:        $projets = $this->getEntityManager()
src/Repository/ProjetRepository.php:        ->createQuery($query)
src/Repository/ProjetRepository.php:        ->setParameter('anneeA', $subAnnee.'A')
src/Repository/ProjetRepository.php:        ->setParameter('anneeB', $subAnnee.'B');
src/Repository/ProjetRepository.php:            return $projets->getResult();
src/Repository/ProjetRepository.php:            return $projets->setParameter('Pannee', 'P'.$subAnnee.'%')->getResult();
src/Repository/ProjetRepository.php:        $subAnnee = substr(strval($annee), -2);
src/Repository/ProjetRepository.php:        return $this->getEntityManager()
src/Repository/ProjetRepository.php:        ->createQuery($query)
src/Repository/ProjetRepository.php:        ->setParameter('anneeA', $subAnnee.'A')
src/Repository/ProjetRepository.php:        ->setParameter('anneeB', $subAnnee.'B')
src/Repository/ProjetRepository.php:        ->getSingleScalarResult();
src/Repository/PubkeyRepository.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/PubkeyRepository.php: *            Thierry Louge      - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/PubkeyRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/PublicationRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/PublicationRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/PublicationRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/PublicationRepository.php:            return $this->getEntityManager()
src/Repository/PublicationRepository.php:            ->createQuery('SELECT p.refbib FROM App:Publication p WHERE p.refbib LIKE :key')
src/Repository/PublicationRepository.php:            ->setParameter('key', '%'.$refbib.'%')
src/Repository/PublicationRepository.php:            ->getResult();
src/Repository/RallongeRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/RallongeRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/RallongeRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/RallongeRepository.php:            $session_rallonges = $this->getEntityManager()
src/Repository/RallongeRepository.php:                                ->createQuery($dql)
src/Repository/RallongeRepository.php:                                ->setParameter('session', $session)
src/Repository/RallongeRepository.php:                                ->getResult();
src/Repository/RallongeRepository.php:        return $this->getEntityManager()
src/Repository/RallongeRepository.php:                            ->createQuery($dql)
src/Repository/RallongeRepository.php:                            ->setParameter('version', $version)
src/Repository/RallongeRepository.php:                            ->setParameter('ed_dem', Etat::EDITION_DEMANDE)
src/Repository/RallongeRepository.php:                            ->setParameter('ed_exp', Etat::EDITION_EXPERTISE)
src/Repository/RallongeRepository.php:                            ->setParameter('att', Etat::EN_ATTENTE)
src/Repository/RallongeRepository.php:                            ->getResult();
src/Repository/RallongeRepository.php:        return $this->getEntityManager()
src/Repository/RallongeRepository.php:                        ->createQuery($dql)
src/Repository/RallongeRepository.php:                        ->setParameter('ed_exp', Etat::EDITION_EXPERTISE)
src/Repository/RallongeRepository.php:                        ->setParameter('expert', $expert)
src/Repository/RallongeRepository.php:                        ->getResult();
src/Repository/RapportactiviteRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/RapportactiviteRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/RapportactiviteRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/RessourceRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/RessourceRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/RessourceRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/RessourceRepository.php:        $query = $this->getEntityManager()->createQuery($dql);
src/Repository/RessourceRepository.php:        return $query->getResult();
src/Repository/ServeurRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/ServeurRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/ServeurRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/ServeurRepository.php:        $query = $this->getEntityManager()->createQuery($dql);
src/Repository/ServeurRepository.php:        return $query->getResult();
src/Repository/SessionRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/SessionRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/SessionRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/SessionRepository.php:        return $this->createQueryBuilder('s')
src/Repository/SessionRepository.php:            ->where('s.etatSession != :termine')
src/Repository/SessionRepository.php:            ->setParameter('termine', Etat::TERMINE)
src/Repository/SessionRepository.php:            ->orderBy('s.idSession', 'DESC')
src/Repository/SessionRepository.php:            ->getQuery()
src/Repository/SessionRepository.php:            ->getResult();
src/Repository/SsoRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/SsoRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/SsoRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/ThematiqueRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/ThematiqueRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/ThematiqueRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/UserRepository.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/UserRepository.php: *            Thierry Louge      - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/UserRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/UserRepository.php:        // $su = this->su;
src/Repository/UserRepository.php:        $l = $this->parseLoginname($loginname);
src/Repository/UserRepository.php:        $f = $this->findBy($l);
src/Repository/UserRepository.php:        // $su = this->su;
src/Repository/UserRepository.php:        $l = $this->parseLoginname($loginname);
src/Repository/UserRepository.php:        $u = $this->findOneBy($l);
src/Repository/UserRepository.php:    // PROVISOIRE - COPIER-COLLER depuis ServiceUser - A virer quand on en fera un service
src/Repository/VersionRepository.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/VersionRepository.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Repository/VersionRepository.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:                   ->createQuery('SELECT p FROM App:Version p WHERE ( NOT p.etatVersion = :termine AND NOT p.etatVersion = :annule)')
src/Repository/VersionRepository.php:                   ->setParameter('termine', Etat::getEtat('TERMINE'))
src/Repository/VersionRepository.php:                   ->setParameter('annule', Etat::getEtat('ANNULE'))
src/Repository/VersionRepository.php:                   ->getResult();
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:            ->createQuery('SELECT partial v.{idVersion,etatVersion,prjTitre,prjLLabo,prjThematique,demHeures,attrHeures,penalHeures} FROM App:Version v WHERE ( v.projet = :projet AND v.session = :session AND NOT v.etatVersion = :annule)')
src/Repository/VersionRepository.php:            ->setParameter('annule', Etat::getEtat('ANNULE'))
src/Repository/VersionRepository.php:            ->setParameter('projet', $projet)
src/Repository/VersionRepository.php:            ->setParameter('session', $session)
src/Repository/VersionRepository.php:            ->getOneOrNullResult();
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:        ->createQuery('SELECT partial v.{idVersion,etatVersion,prjTitre,prjLLabo}  FROM App:Version v WHERE ( v.projet = :projet AND NOT v.etatVersion = :annule) ORDER BY v.idVersion ASC')
src/Repository/VersionRepository.php:        ->setParameter('annule', Etat::getEtat('ANNULE'))
src/Repository/VersionRepository.php:        ->setParameter('projet', $projet)
src/Repository/VersionRepository.php:        ->getResult();
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:        ->createQuery('SELECT partial v.{idVersion,etatVersion,prjGenciDari,prjTitre,prjLLabo,demHeures,attrHeures}  FROM App:Version v JOIN v.session s WHERE ( s = :session AND NOT v.etatVersion = :annule)')
src/Repository/VersionRepository.php:        ->setParameter('annule', Etat::getEtat('ANNULE'))
src/Repository/VersionRepository.php:        ->setParameter('session', $session)
src/Repository/VersionRepository.php:        ->getResult();
src/Repository/VersionRepository.php:        // 2022 -> 22
src/Repository/VersionRepository.php:        $subAnnee = substr(strval($annee), -2);
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:        ->createQuery('SELECT partial v.{idVersion,etatVersion,prjGenciDari,prjTitre,prjLLabo,demHeures,attrHeures}  FROM App:Version v  WHERE ( v.idVersion LIKE :pattern AND NOT v.etatVersion = :annule)')
src/Repository/VersionRepository.php:        ->setParameter('annule', Etat::getEtat('ANNULE'))
src/Repository/VersionRepository.php:        ->setParameter('pattern', $subAnnee.'%')
src/Repository/VersionRepository.php:        // ->setParameter('pattern', $annee . 'T' . $annee)
src/Repository/VersionRepository.php:        ->getResult();
src/Repository/VersionRepository.php:     *  Renvoie les versions actives de la session, c-à-d qui sont en état: ACTIF, EN_ATTENTE, NOUVELLE_VERSION_DEMANDEE
src/Repository/VersionRepository.php:     *  NOTE - Fonction écrite pour AdminuxController::versionGetAction() mais finalement PAS UTILISEE
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:        ->createQuery('SELECT partial v.{idVersion,etatVersion,prjGenciDari,prjTitre,prjLLabo,demHeures,attrHeures}  FROM App:Version v JOIN v.session s WHERE ( s = :session AND (v.etatVersion = :actif OR v.etatVersion = :nouvelle_version_demandee OR v.etatVersion = :en_attente))')
src/Repository/VersionRepository.php:        ->setParameter('nouvelle_version_demandee', Etat::getetat('NOUVELLE_VERSION_DEMANDEE'))
src/Repository/VersionRepository.php:        ->setParameter('en_attente', Etat::getetat('EN_ATTENTE'))
src/Repository/VersionRepository.php:        ->setParameter('actif', Etat::getetat('ACTIF'))
src/Repository/VersionRepository.php:        ->setParameter('session', $session)
src/Repository/VersionRepository.php:        ->getResult();
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:        ->createQuery('SELECT partial v.{idVersion,etatVersion,prjGenciDari,prjTitre,prjLLabo,demHeures,attrHeures}  FROM App:Version v  WHERE ( v.idVersion LIKE :pattern AND NOT v.etatVersion = :annule)')
src/Repository/VersionRepository.php:        ->setParameter('annule', Etat::getEtat('ANNULE'))
src/Repository/VersionRepository.php:        ->setParameter('pattern', '%T'.$annee.'%')
src/Repository/VersionRepository.php:        // ->setParameter('pattern', $annee . 'T' . $annee)
src/Repository/VersionRepository.php:        ->getResult();
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:         ->createQuery('SELECT count(v) FROM App:Version v WHERE ( v.projet = :projet AND NOT v.etatVersion = :annule)')
src/Repository/VersionRepository.php:        ->setParameter('annule', Etat::getEtat('ANNULE'))
src/Repository/VersionRepository.php:        ->setParameter('projet', $projet)
src/Repository/VersionRepository.php:        ->getSingleScalarResult();
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:         ->createQuery('SELECT count(v) FROM App:Version v WHERE ( v.etatVersion = :etat)')
src/Repository/VersionRepository.php:        ->setParameter('etat', Etat::getEtat($etat))
src/Repository/VersionRepository.php:        ->getSingleScalarResult();
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:         ->createQuery('SELECT SUM(v.demHeures) FROM App:Version v WHERE ( v.projet = :projet AND NOT v.etatVersion = :annule)')
src/Repository/VersionRepository.php:        ->setParameter('annule', Etat::getEtat('ANNULE'))
src/Repository/VersionRepository.php:        ->setParameter('projet', $projet)
src/Repository/VersionRepository.php:        ->getSingleScalarResult();
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:         ->createQuery('SELECT SUM(v.attrHeures) FROM App:Version v WHERE ( v.projet = :projet AND NOT v.etatVersion = :annule)')
src/Repository/VersionRepository.php:        ->setParameter('annule', Etat::getEtat('ANNULE'))
src/Repository/VersionRepository.php:        ->setParameter('projet', $projet)
src/Repository/VersionRepository.php:        ->getSingleScalarResult();
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:         ->createQuery('SELECT COUNT(v), SUM(v.demHeures), SUM(v.attrHeures) FROM App:Version v WHERE ( v.projet = :projet AND NOT v.etatVersion = :annule)')
src/Repository/VersionRepository.php:        ->setParameter('annule', Etat::getEtat('ANNULE'))
src/Repository/VersionRepository.php:        ->setParameter('projet', $projet)
src/Repository/VersionRepository.php:        ->getSingleResult();
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:         ->createQuery('SELECT v.etatVersion FROM App:Version v JOIN App:Projet p WHERE ( p.versionDerniere = v AND p = :projet)')
src/Repository/VersionRepository.php:        ->setParameter('projet', $projet)
src/Repository/VersionRepository.php:        ->getOneOrNullResult();
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:         ->createQuery('SELECT COUNT(v) FROM App:Version v  WHERE v.idVersion = :id')
src/Repository/VersionRepository.php:        ->setParameter('id', $idVersion)
src/Repository/VersionRepository.php:        ->getSingleScalarResult();
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:         ->createQuery('SELECT COUNT(v) FROM App:Version v  WHERE v.prjThematique; = :thematique')
src/Repository/VersionRepository.php:        ->setParameter('thematique', $thematique)
src/Repository/VersionRepository.php:        ->getSingleResult();
src/Repository/VersionRepository.php:        return $this->getEntityManager()
src/Repository/VersionRepository.php:        ->createQuery('SELECT v FROM App:Version v, App:Projet p WHERE (v.session = :session AND v.projet = p AND p.typeProjet = 1)')
src/Repository/VersionRepository.php:        ->setParameter('session', $session)
src/Repository/VersionRepository.php:        ->getResult();
src/Security/GramcAuthenticator.php:        if ('remlogin' === $request->attributes->get('_route') && $request->isMethod('GET')) {
src/Security/GramcAuthenticator.php:        // if ($request->attributes->get('_route') === 'connexionshiblogin' && $request->isMethod('GET')) $rvl = true;
src/Security/GramcAuthenticator.php:        if ('connexion_dbg' === $request->attributes->get('_route') && $request->isMethod('POST')) {
src/Security/GramcAuthenticator.php:        $mode_auth = $this->mode_auth;
src/Security/GramcAuthenticator.php:            // TODO - Pourquoi on ne peut pas récupérer REMOTE_USER ?
src/Security/GramcAuthenticator.php:            $remote_user = $request->headers->get('eppn');
src/Security/GramcAuthenticator.php:            $mail = $request->headers->get('mail');
src/Security/GramcAuthenticator.php:            // POUR LES TESTS UNIQUEMENT - On simule l'absence de eppn ou de mail
src/Security/GramcAuthenticator.php:            // Pas d'eppn, on essaie persistent-id
src/Security/GramcAuthenticator.php:            // TODO - L'authentifiant s'appelle eppn même si le header est persistent-id, ce n'est pas très propre
src/Security/GramcAuthenticator.php:                $remote_user = $request->headers->get('persistent-id');
src/Security/GramcAuthenticator.php:            // POUR LES TESTS UNIQUEMENT - On prend un header stupide
src/Security/GramcAuthenticator.php:            //    $remote_user = $request->headers->get('x-real-ip');
src/Security/GramcAuthenticator.php:            // $this->sj->debugMessage(__FILE__ . ":" . __LINE__ . " eppn=$remote_user, mail=$mail ");
src/Security/GramcAuthenticator.php:                $request->getSession()->set('eppn', $remote_user);
src/Security/GramcAuthenticator.php:                $request->getSession()->set('mail', $mail);
src/Security/GramcAuthenticator.php:                $repository = $this->em->getRepository(Sso::class);
src/Security/GramcAuthenticator.php:                $sso = $repository->findOneBy(['eppn' => $remote_user]);
src/Security/GramcAuthenticator.php:                // Pas de sso --> nouveau compte ou nouvel eppn !
src/Security/GramcAuthenticator.php:                    $this->shibbHeadersToSession($request);
src/Security/GramcAuthenticator.php:                $individu = $sso->getIndividu();
src/Security/GramcAuthenticator.php:                    return new SelfValidatingPassport(new UserBadge($individu->getIdIndividu()),
src/Security/GramcAuthenticator.php:                            new GramcBadge($individu, $request, $this->sj),
src/Security/GramcAuthenticator.php:                    // TODO - Une fonction privée, pour éviter le copier-coller (cf. ligne 250))
src/Security/GramcAuthenticator.php:                    $eppn = $request->headers->get('eppn');
src/Security/GramcAuthenticator.php:                    $persistent_id = $request->headers->get('persistent-id');
src/Security/GramcAuthenticator.php:                    $targeted_id = $request->headers->get('targeted-id');
src/Security/GramcAuthenticator.php:                    $subject_id = $request->headers->get('subject-id');
src/Security/GramcAuthenticator.php:                    $pairwise_id = $request->headers->get('pairwise-id');
src/Security/GramcAuthenticator.php:                    $this->sj->warningMessage("Un utilisateur a tenté de se connecter - remote_user = $remote_user, mail = $mail");
src/Security/GramcAuthenticator.php:                    $this->sj->warningMessage("--> eppn = $eppn");
src/Security/GramcAuthenticator.php:                    $this->sj->warningMessage("--> persistent-id = $persistent_id");
src/Security/GramcAuthenticator.php:                    $this->sj->warningMessage("--> targeted-id = $targeted_id");
src/Security/GramcAuthenticator.php:                    $this->sj->warningMessage("--> subject-id = $subject_id");
src/Security/GramcAuthenticator.php:                    $this->sj->warningMessage("--> pairwise-id = $pairwise_id");
src/Security/GramcAuthenticator.php:            $remote_user = $request->server->get('REDIRECT_REMOTE_USER');
src/Security/GramcAuthenticator.php:            $mail = $request->server->get('REDIRECT_OIDC_CLAIM_email');
src/Security/GramcAuthenticator.php:                $request->getSession()->set('eppn', $remote_user);
src/Security/GramcAuthenticator.php:                $request->getSession()->set('mail', $mail);
src/Security/GramcAuthenticator.php:                $repository = $this->em->getRepository(Sso::class);
src/Security/GramcAuthenticator.php:                $sso = $repository->findOneBy(['eppn' => $remote_user]);
src/Security/GramcAuthenticator.php:                // Pas de sso --> nouveau compte ou nouvel eppn !
src/Security/GramcAuthenticator.php:                    $this->oidcToSession($request);
src/Security/GramcAuthenticator.php:                $individu = $sso->getIndividu();
src/Security/GramcAuthenticator.php:                    return new SelfValidatingPassport(new UserBadge($individu->getIdIndividu()),
src/Security/GramcAuthenticator.php:                            new GramcBadge($individu, $request, $this->sj),
src/Security/GramcAuthenticator.php:                    // TODO - Une fonction privée, pour éviter le copier-coller (cf. ligne 250))
src/Security/GramcAuthenticator.php:                    $eppn = $request->headers->get('eppn');
src/Security/GramcAuthenticator.php:                    // $persistent_id = $request->headers->get('persistent-id');
src/Security/GramcAuthenticator.php:                    // $targeted_id  = $request->headers->get('targeted-id');
src/Security/GramcAuthenticator.php:                    // $subject_id = $request->headers->get('subject-id');
src/Security/GramcAuthenticator.php:                    // $pairwise_id = $request->headers->get('pairwise-id');
src/Security/GramcAuthenticator.php:                    $this->sj->warningMessage("Un utilisateur a tenté de se connecter - remote_user = $remote_user, mail = $mail");
src/Security/GramcAuthenticator.php:                    $this->sj->warningMessage("--> eppn = $eppn");
src/Security/GramcAuthenticator.php:                    // $this->sj->warningMessage("--> persistent-id = $persistent_id");
src/Security/GramcAuthenticator.php:                    // $this->sj->warningMessage("--> targeted-id = $targeted_id");
src/Security/GramcAuthenticator.php:                    // $this->sj->warningMessage("--> subject-id = $subject_id");
src/Security/GramcAuthenticator.php:                    // $this->sj->warningMessage("--> pairwise-id = $pairwise_id");
src/Security/GramcAuthenticator.php:            $this->sj->errorMessage("ERREUR - mode_auth = $mode_auth - Je ne connais pas ce mode d'authentification - Vérifiez parameters.yml");
src/Security/GramcAuthenticator.php:            throw new AuthenticationException("mode_auth = $mode_auth - Je ne connais pas ce mode d'authentification");
src/Security/GramcAuthenticator.php:        if ($this->knl_debug) {
src/Security/GramcAuthenticator.php:            $form_data = $request->get('form');
src/Security/GramcAuthenticator.php:                    $repository = $this->em->getRepository(Individu::class);
src/Security/GramcAuthenticator.php:                    $individu = $repository->findOneBy(['idIndividu' => $idIndividu]);
src/Security/GramcAuthenticator.php:                        return new SelfValidatingPassport(new UserBadge($individu->getIdIndividu()),
src/Security/GramcAuthenticator.php:                                new GramcBadge($individu, $request, $this->sj),
src/Security/GramcAuthenticator.php:        $individu = $token->getUser();
src/Security/GramcAuthenticator.php:        $this->sj->infoMessage($token->getUser()." vient de s'authentifier");
src/Security/GramcAuthenticator.php:        // $request->getSession()->getFlashbag()->add("flash info","Vous êtes authentifié");
src/Security/GramcAuthenticator.php:        if ($request->getSession()->has('desactive') && $request->getSession()->get('desactive')) {
src/Security/GramcAuthenticator.php:            return new RedirectResponse($this->urg->generate('accueil'));
src/Security/GramcAuthenticator.php:        if ($request->getSession()->has('eppn') && $request->getSession()->has('mail')) {
src/Security/GramcAuthenticator.php:            return new RedirectResponse($this->urg->generate('nouveau_compte'));
src/Security/GramcAuthenticator.php:            $log_msg = " Erreur d'authentification - ";
src/Security/GramcAuthenticator.php:            if ($request->getSession()->has('eppn')) {
src/Security/GramcAuthenticator.php:                $eppn = $request->getSession()->get('eppn');
src/Security/GramcAuthenticator.php:            if ($request->getSession()->has('mail')) {
src/Security/GramcAuthenticator.php:                $mail = $request->getSession()->get('mail');
src/Security/GramcAuthenticator.php:            $log_msg .= 'HTTP_REFERER = '.$request->server->get('HTTP_REFERER');
src/Security/GramcAuthenticator.php:            $this->sj->warningMessage(__FILE__.':'.__LINE__.$log_msg);
src/Security/GramcAuthenticator.php:            $eppn = $request->headers->get('eppn');
src/Security/GramcAuthenticator.php:            $persistent_id = $request->headers->get('persistent-id');
src/Security/GramcAuthenticator.php:            $targeted_id = $request->headers->get('targeted-id');
src/Security/GramcAuthenticator.php:            $subject_id = $request->headers->get('subject-id');
src/Security/GramcAuthenticator.php:            $pairwise_id = $request->headers->get('pairwise-id');
src/Security/GramcAuthenticator.php:            $this->sj->warningMessage("--> eppn = $eppn");
src/Security/GramcAuthenticator.php:            $this->sj->warningMessage("--> persistent-id = $persistent_id");
src/Security/GramcAuthenticator.php:            $this->sj->warningMessage("--> targeted-id = $targeted_id");
src/Security/GramcAuthenticator.php:            $this->sj->warningMessage("--> subject-id = $subject_id");
src/Security/GramcAuthenticator.php:            $this->sj->warningMessage("--> pairwise-id = $pairwise_id");
src/Security/GramcAuthenticator.php:            $request->getSession()->getFlashbag()->add('flash erreur', $message);
src/Security/GramcAuthenticator.php:            return new RedirectResponse($this->urg->generate('accueil'));
src/Security/GramcAuthenticator.php:     * NOTE - On ne s'occupe pas de eppn, cela est déjà fait par auth_connexionAction
src/Security/GramcAuthenticator.php:     *        Conf Shibboleth: il faut modifier le fichier attribute-map.xml (ie décommenter quelques lignes
src/Security/GramcAuthenticator.php:        $headers = ['givenName', 'sn', 'displayName', 'cn', 'affiliation', 'primary-affiliation'];
src/Security/GramcAuthenticator.php:            if ($request->headers->has($h)) {
src/Security/GramcAuthenticator.php:                $headers_values[$h] = $request->headers->get($h);
src/Security/GramcAuthenticator.php:        $server = $request->server;
src/Security/GramcAuthenticator.php:                // mail -> REDIRECT_mail
src/Security/GramcAuthenticator.php:                if ($server->has($k1)) {
src/Security/GramcAuthenticator.php:                    $headers_values[$h] = $server->get($k1);
src/Security/GramcAuthenticator.php:                // mail -> HTTP_MAIL
src/Security/GramcAuthenticator.php:                elseif ($server->has($k2)) {
src/Security/GramcAuthenticator.php:                    $headers_values[$h] = $server->get($k2);
src/Security/GramcAuthenticator.php:        $session = $request->getSession();
src/Security/GramcAuthenticator.php:            $session->set($h, $v);
src/Security/GramcAuthenticator.php:     * NOTE - On ne s'occupe QUE de given_name et family_name
src/Security/GramcAuthenticator.php:        $server = $request->server;
src/Security/GramcAuthenticator.php:            // mail -> REDIRECT_mail
src/Security/GramcAuthenticator.php:            if ($server->has($k)) {
src/Security/GramcAuthenticator.php:                $vars_values[$v] = $server->get($k);
src/Security/GramcAuthenticator.php:        $session = $request->getSession();
src/Security/GramcAuthenticator.php:            $session->set($v, $val);
src/Security/GramcBadge.php: *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Security/GramcBadge.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Security/GramcBadge.php:        // dd($this->ind);
src/Security/GramcBadge.php:        if ($this->ind->getDesactive()) {
src/Security/GramcBadge.php:            $this->request->getSession()->set('desactive', true);
src/Security/GramcBadge.php:            $this->request->getSession()->getFlashbag()->add('flash erreur', $message);
src/Security/GramcBadge.php:            $this->sj->errorMessage($this->ind." n'a pas pu s'authentifier (compte désactivé)");
src/Utils/Functions.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Utils/Functions.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Utils/Functions.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Utils/Functions.php:        // le nombre d'années est +- 5 par défaut, nous devons le changer
src/Utils/Functions.php:        $first_year = $begin->format('Y');      // la première année
src/Utils/Functions.php:        $last_year = $end->format('Y');         // la dernière année
src/Utils/Functions.php:            $years = range($first_year - $difference, $last_year + $difference);
src/Utils/Functions.php:            $years = range($last_year - $difference, $first_year + $difference);
src/Utils/Functions.php:     *    - Si le flush se passe bien, renvoie true
src/Utils/Functions.php:     *    - Sinon:
src/Utils/Functions.php:     *       - écrit des choses dans le Logger (il y a des chances que le journal ne marche pas non plus)
src/Utils/Functions.php:     *       - Si on est dans une requête ajax: renvoie false, sinon: relance l'exception
src/Utils/Functions.php:            if ($em->isOpen()) {
src/Utils/Functions.php:                $em->persist($object);
src/Utils/Functions.php:                $em->flush($object);
src/Utils/Functions.php:                    $logger->error(__METHOD__.':'.__LINE__.' Entity manager closed');
src/Utils/Functions.php:                $logger->error(__METHOD__.':'.__LINE__.' ORMException');
src/Utils/Functions.php:                $logger->error(__METHOD__.':'.__LINE__.' InvalidArgumentException');
src/Utils/Functions.php:                $logger->error(__METHOD__.':'.__LINE__.' DBALException');
src/Utils/Functions.php:     * Appelé par sauvegarder - retourne false ou propage l'exception suivant la requête
src/Utils/Functions.php:        if (Request::createFromGlobals()->isXmlHttpRequest()) {
src/Utils/Functions.php:     * On ne traite que les ORMException - Par exemple violation de contrainte d'intégrité
src/Utils/Functions.php:     * TODO - Je n'ai pas réussi à intercepter autre chose que \Exception. du coup je suis sceptique sur
src/Utils/Functions.php:            $em->flush();
src/Utils/Functions.php:            if (null != $request && null != $request->getSession()) {
src/Utils/Functions.php:                $request->getSession()->getFlashbag()->add('flash erreur', $e->getMessage());
src/Utils/Functions.php:        $response->setContent($content);
src/Utils/Functions.php:        $response->headers->set('Content-Type', 'text/csv');  // télécharger
src/Utils/Functions.php:        $response->headers->set('Cache-Control', 'no-cache, must-revalidate');
src/Utils/Functions.php:        $response->headers->set('Cache-Control', 'post-check=0,pre-check=0');
src/Utils/Functions.php:        $response->headers->set('Cache-Control', 'max-age=0');
src/Utils/Functions.php:        $response->headers->set('Pragma', 'no-cache');
src/Utils/Functions.php:        $response->headers->set('Expires', '0');
src/Utils/Functions.php:        $response->headers->set('Content-Disposition', 'attachment; filename="'.$filename.'"');
src/Utils/Functions.php:            $response->setContent($filename);
src/Utils/Functions.php:            $response->headers->set('Content-Disposition', 'inline; filename="document_gramc.pdf"');
src/Utils/Functions.php:            $response->setContent(file_get_contents($filename));
src/Utils/Functions.php:            $response->headers->set('Content-Disposition', 'inline; filename="'.basename($dwnfn).'"');
src/Utils/Functions.php:            $response->setContent('');
src/Utils/Functions.php:        $response->headers->set(
src/Utils/Functions.php:            'Content-Type',
src/Utils/Functions.php:            return $input->format('d F Y H:i:s');
src/Utils/Functions.php:                return '{'.$reflect->getShortName().':'.$input->__toString().'}';
src/Utils/Functions.php:                return '{'.$reflect->getShortName().':'.static::show($input->toArray()).'}';
src/Utils/Functions.php:                // return '{'.$reflect->getShortName().'}';
src/Utils/Functions.php:    // TODO - A METTRE DANS ServicesForms
src/Utils/Functions.php:        $violations = $sval->validate($data, null, $groups);
src/Utils/Functions.php:            $erreurs[] = $violation->getMessage();
src/Utils/Functions.php:     * Usage: $ff   = $this->get('form.factory')
src/Utils/Functions.php:     * TODO - Ces fonctions n'ont aucun intérêt - A virer !
src/Utils/Functions.php:        return $ff->createNamedBuilder($nom, $class, null, $options);
src/Utils/Functions.php:        return $ff->createBuilder(FormType::class, $data, $options);
src/Utils/Functions.php:     * https://paragonie.com/blog/2017/06/libsodium-quick-reference-quick-comparison-similar-functions-and-which-one-use#crypto-secretbox
src/Validator/Constraints/Clessh.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Validator/Constraints/Clessh.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Validator/Constraints/Clessh.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Validator/Constraints/ClesshValidator.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Validator/Constraints/ClesshValidator.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Validator/Constraints/ClesshValidator.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Validator/Constraints/ClesshValidator.php: * On calcule l'empreinte de la clé par keygen -l -f
src/Validator/Constraints/ClesshValidator.php: * On considère que l'ago est 2048-RSA
src/Validator/Constraints/ClesshValidator.php:        $sj = $this->sj;
src/Validator/Constraints/ClesshValidator.php:        $clessh_algos = $this->clessh_algos;
src/Validator/Constraints/ClesshValidator.php:        // ssh-keygen est-il disponible ?
src/Validator/Constraints/ClesshValidator.php:        exec("/bin/bash -c 'which ssh-keygen'", $o, $c);
src/Validator/Constraints/ClesshValidator.php:            $sj->errorMessage("ssh-keygen n'est PAS utilisable ! - code $c");
src/Validator/Constraints/ClesshValidator.php:            $this->context->buildViolation($constraint->message3)->addViolation();
src/Validator/Constraints/ClesshValidator.php:        exec("/bin/bash -c 'ssh-keygen -l -f <(echo $pub)' 2>&1", $o, $c);
src/Validator/Constraints/ClesshValidator.php:        // dd("ssh-keygen -l -f <(echo $pub)", $o, $c);
src/Validator/Constraints/ClesshValidator.php:        // ssh-keygen a renvoyé un code d'erreur != 0
src/Validator/Constraints/ClesshValidator.php:            $msg = " ssh-keygen a renvoyé le code $c";
src/Validator/Constraints/ClesshValidator.php:            $sj->errorMessage(__METHOD__.':'.__LINE__.$msg);
src/Validator/Constraints/ClesshValidator.php:            $this->context->buildViolation($constraint->message3)->addViolation();
src/Validator/Constraints/ClesshValidator.php:            $msg = " ssh-keygen n'a rien renvoyé - code de retour 0";
src/Validator/Constraints/ClesshValidator.php:            $sj->errorMessage(__METHOD__.':'.__LINE__.$msg);
src/Validator/Constraints/ClesshValidator.php:            $this->context->buildViolation($constraint->message3)->addViolation();
src/Validator/Constraints/ClesshValidator.php:        // ssh-keygen a validé la clé
src/Validator/Constraints/ClesshValidator.php:            $msg = " ssh-keygen a renvoyé un truc zarbi: $o[0] - code de retour 0";
src/Validator/Constraints/ClesshValidator.php:            $sj->errorMessage(__METHOD__.':'.__LINE__.$msg);
src/Validator/Constraints/ClesshValidator.php:            $this->context->buildViolation($constraint->message3)->addViolation();
src/Validator/Constraints/ClesshValidator.php:        // (RSA) -> RSA
src/Validator/Constraints/ClesshValidator.php:        $a = $empreinte[count($empreinte) - 1];
src/Validator/Constraints/ClesshValidator.php:        $algo = substr($a, 1, strlen($a) - 2);
src/Validator/Constraints/ClesshValidator.php:        $algo .= '-'.$empreinte[0];
src/Validator/Constraints/ClesshValidator.php:        // L'algo est-il accepté ? Si oui c'est validé et on retourne !
src/Validator/Constraints/ClesshValidator.php:            $sj->errorMessage(__METHOD__.':'.__LINE__.$msg);
src/Validator/Constraints/ClesshValidator.php:            $this->context->buildViolation($constraint->message1)->addViolation();
src/Validator/Constraints/PagesNumber.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Validator/Constraints/PagesNumber.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Validator/Constraints/PagesNumber.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Validator/Constraints/PagesNumberValidator.php: *  authors : Miloslav Grundmann - C.N.R.S. - UMS 3667 - CALMIP
src/Validator/Constraints/PagesNumberValidator.php: *            Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
src/Validator/Constraints/PagesNumberValidator.php: *            Nicolas Renon - Université Paul Sabatier - CALMIP
src/Validator/Constraints/PagesNumberValidator.php:        $this->max_page_nb = $max_page_nb;
src/Validator/Constraints/PagesNumberValidator.php:        $this->sj = $sj;
src/Validator/Constraints/PagesNumberValidator.php:        $max_page_nb = $this->max_page_nb;
src/Validator/Constraints/PagesNumberValidator.php:        // pdfinfo est-il disponible ?
src/Validator/Constraints/PagesNumberValidator.php:            $this->sj->errorMessage('pdfinfo pas utilisable !');
src/Validator/Constraints/PagesNumberValidator.php:            $this->context->buildViolation($constraint->message3)->addViolation();
src/Validator/Constraints/PagesNumberValidator.php:                $num = exec('pdfinfo '.$path.'| awk -e \'/^Pages:/ {print $2}\' ');
src/Validator/Constraints/PagesNumberValidator.php:                $this->sj->errorMessage('PagesNumberValidator: '.$path.' pas trouvé');
src/Validator/Constraints/PagesNumberValidator.php:            $this->sj->debugMessage('PagesNumberValidator: Le fichier PDF a '.$num.' pages');
src/Validator/Constraints/PagesNumberValidator.php:                    $this->context->buildViolation($constraint->message1)
src/Validator/Constraints/PagesNumberValidator.php:                        ->setParameter('{{ pages }}', $num)
src/Validator/Constraints/PagesNumberValidator.php:                        ->addViolation();
src/Validator/Constraints/PagesNumberValidator.php:                    $this->context->buildViolation($constraint->message2)
src/Validator/Constraints/PagesNumberValidator.php:                        ->setParameter('{{ pages }}', $num)
src/Validator/Constraints/PagesNumberValidator.php:                        ->setParameter('{{ max_pages }}', $max_page_nb)
src/Validator/Constraints/PagesNumberValidator.php:                        ->addViolation();
