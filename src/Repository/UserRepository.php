<?php

/**
 * This file is part of GRAMC (Computing Ressource Granting Software)
 * GRAMC stands for : Gestion des Ressources et de leurs Attributions pour Mésocentre de Calcul.
 *
 * GRAMC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 *  GRAMC is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with GRAMC.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  authors : Emmanuel Courcelle - C.N.R.S. - UMS 3667 - CALMIP
 *            Thierry Louge      - C.N.R.S. - UMS 3667 - CALMIP
 *            Nicolas Renon - Université Paul Sabatier - CALMIP
 **/

namespace App\Repository;

use App\Entity\User;
use App\GramcServices\ServiceUsers;

// use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;

/**
 * UserRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
// class UserRepository extends ServiceEntityRepository {
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    //    public function __construct(
    //        ManagerRegistry $registry,
    //        private ServiceUsers $su
    //    )
    //    {
    //        parent::__construct($registry, User::class);
    //    }

    /*
     * Renvoie true/false suivant que loginname est dans la table User ou pas
     * $loginname doit être de la forme de la forme alice@serveur
     * Sinon une exception est lancée
     */
    public function existsLoginname(string $loginname): bool
    {
        // $su = this->su;

        $l = $this->parseLoginname($loginname);

        $f = $this->findBy($l);

        return count($f) > 0;
    }

    /*
     * $loginname doit être de la forme de la forme alice@serveur
     * Sinon une exception est lancée
     *
     * Renvoie THE user tel que loginname="alice", serveur="serveur" ou null
     */
    public function findOneByLoginname(string $loginname): ?User
    {
        // $su = this->su;

        $l = $this->parseLoginname($loginname);

        $u = $this->findOneBy($l);

        return null === $u ? null : $u;
    }

    // PROVISOIRE - COPIER-COLLER depuis ServiceUser - A virer quand on en fera un service
    private function parseLoginname(string $u): array
    {
        $rvl = explode('@', $u, 2);
        if (2 != count($rvl)) {
            throw new \Exception(" $u n'est pas de la forme alice@serveur");
        }

        return ['loginname' => $rvl[0], 'serveur' => $rvl[1]];
    }
}
